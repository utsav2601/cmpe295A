#ifndef __spawn_RPC_CLIENT_H
#define __spawn_RPC_CLIENT_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: spawn
 * INTEFACE FILE: ../if/spawn.if
 * INTERFACE DESCRIPTION: Interface to spawn domains
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

/*
 * RPC client
 */

#include <if/spawn_defs.h>

/*
 * Forward declaration of binding type
 */
struct spawn_rpc_client;

/*
 * Function signatures
 */
typedef  errval_t spawn_spawn_domain__rpc_method_fn(struct spawn_rpc_client *_rpc, const char *path, const char *argvbuf, size_t argvbytes, const char *envbuf, size_t envbytes, uint8_t flags, spawn_errval_t *err, spawn_domainid_t *domain_id);
typedef  errval_t spawn_spawn_domain_with_caps__rpc_method_fn(struct spawn_rpc_client *_rpc, const char *path, const char *argvbuf, size_t argvbytes, const char *envbuf, size_t envbytes, struct capref inheritcn_cap, struct capref argcn_cap, uint8_t flags, spawn_errval_t *err, spawn_domainid_t *domain_id);
typedef  errval_t spawn_use_local_memserv__rpc_method_fn(struct spawn_rpc_client *_rpc);
typedef  errval_t spawn_kill__rpc_method_fn(struct spawn_rpc_client *_rpc, spawn_domainid_t domain_id, spawn_errval_t *err);
typedef  errval_t spawn_exit__rpc_method_fn(struct spawn_rpc_client *_rpc, spawn_domainid_t domain_id, uint8_t exitcode);
typedef  errval_t spawn_wait__rpc_method_fn(struct spawn_rpc_client *_rpc, spawn_domainid_t domain_id, bool nohang, uint8_t *exitcode, spawn_errval_t *err);
typedef  errval_t spawn_get_domainlist__rpc_method_fn(struct spawn_rpc_client *_rpc, uint8_t **domains, size_t *len);
typedef  errval_t spawn_status__rpc_method_fn(struct spawn_rpc_client *_rpc, spawn_domainid_t domain_id, spawn_ps_entry_t *ps_entry, char **argv, size_t *len, spawn_errval_t *err);

/*
 * VTable struct definition for the interface
 */
struct spawn_rpc_vtbl {
    spawn_spawn_domain__rpc_method_fn *spawn_domain;
    spawn_spawn_domain_with_caps__rpc_method_fn *spawn_domain_with_caps;
    spawn_use_local_memserv__rpc_method_fn *use_local_memserv;
    spawn_kill__rpc_method_fn *kill;
    spawn_exit__rpc_method_fn *exit;
    spawn_wait__rpc_method_fn *wait;
    spawn_get_domainlist__rpc_method_fn *get_domainlist;
    spawn_status__rpc_method_fn *status;
};

/*
 * The Binding structure
 */
struct spawn_rpc_client {
    struct spawn_binding *b;
    struct spawn_rpc_vtbl vtbl;
    bool rpc_in_progress;
    bool reply_present;
    errval_t async_error;
    struct waitset rpc_waitset;
    struct waitset_chanstate dummy_chanstate;
};

/*
 * Function to initialise an RPC client
 */
extern  errval_t spawn_rpc_client_init(struct spawn_rpc_client *rpc, struct spawn_binding *binding);

#endif // __spawn_RPC_CLIENT_H
