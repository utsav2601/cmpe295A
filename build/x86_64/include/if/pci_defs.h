#ifndef __pci_IF_H
#define __pci_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: pci
 * INTEFACE FILE: ../if/pci.if
 * INTERFACE DESCRIPTION: The PCI Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t pci_genpaddr_t;
typedef uint64_t pci_genvaddr_t;
typedef uint32_t pci_rsrcid_t;
typedef uint64_t pci_errval_t;
typedef uint64_t pci_cycles_t;
typedef uint32_t pci_iref_t;
typedef uint8_t pci_coreid_t;
typedef uint32_t pci_domainid_t;
typedef uint32_t pci_caps_per_bar_t[6];

/*
 * Forward declaration of binding type
 */
struct pci_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void pci_bind_continuation_fn(void *st, errval_t err, struct pci_binding *_binding);
typedef  bool pci_can_send_fn(struct pci_binding *_binding);
typedef  errval_t pci_register_send_fn(struct pci_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t pci_change_waitset_fn(struct pci_binding *_binding, struct waitset *ws);
typedef  errval_t pci_control_fn(struct pci_binding *_binding, idc_control_t control);
typedef  void pci_error_handler_fn(struct pci_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum pci_msg_enum {
    pci___dummy__msgnum = 0,
    pci___bind__msgnum = 1,
    pci___bind_reply__msgnum = 2,
    pci_init_pci_device_call__msgnum = 3,
    pci_init_pci_device_response__msgnum = 4,
    pci_init_legacy_device_call__msgnum = 5,
    pci_init_legacy_device_response__msgnum = 6,
    pci_get_cap_call__msgnum = 7,
    pci_get_cap_response__msgnum = 8,
    pci_reregister_interrupt_call__msgnum = 9,
    pci_reregister_interrupt_response__msgnum = 10,
    pci_read_conf_header_call__msgnum = 11,
    pci_read_conf_header_response__msgnum = 12,
    pci_write_conf_header_call__msgnum = 13,
    pci_write_conf_header_response__msgnum = 14,
    pci_msix_enable_call__msgnum = 15,
    pci_msix_enable_response__msgnum = 16,
    pci_msix_vector_init_call__msgnum = 17,
    pci_msix_vector_init_response__msgnum = 18
} pci_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t pci_init_pci_device_call__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, uint32_t class_code, uint32_t sub_class, uint32_t prog_if, uint32_t vendor_id, uint32_t device_id, uint32_t bus, uint32_t dev, uint32_t fun, uint8_t coreid, uint32_t vector);
typedef  errval_t pci_init_pci_device_response__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, uint8_t nr_allocated_bars, pci_caps_per_bar_t caps_per_bar);
typedef  errval_t pci_init_legacy_device_call__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, uint16_t iomin, uint16_t iomax, uint8_t irq, uint8_t coreid, uint32_t vector);
typedef  errval_t pci_init_legacy_device_response__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, struct capref iocap);
typedef  errval_t pci_get_cap_call__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, uint32_t idx, uint32_t cap_nr);
typedef  errval_t pci_get_cap_response__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, struct capref cap, uint8_t type);
typedef  errval_t pci_reregister_interrupt_call__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, uint32_t class_code, uint32_t sub_class, uint32_t prog_if, uint32_t vendor_id, uint32_t device_id, uint32_t bus, uint32_t dev, uint32_t fun, uint8_t coreid, uint32_t vector);
typedef  errval_t pci_reregister_interrupt_response__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err);
typedef  errval_t pci_read_conf_header_call__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, uint32_t dword);
typedef  errval_t pci_read_conf_header_response__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, uint32_t val);
typedef  errval_t pci_write_conf_header_call__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, uint32_t dword, uint32_t val);
typedef  errval_t pci_write_conf_header_response__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err);
typedef  errval_t pci_msix_enable_call__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation);
typedef  errval_t pci_msix_enable_response__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, uint16_t vec_count);
typedef  errval_t pci_msix_vector_init_call__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, uint16_t idx, uint8_t destination, uint8_t vector);
typedef  errval_t pci_msix_vector_init_response__tx_method_fn(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err);

/*
 * Message type signatures (receive)
 */
typedef  void pci_init_pci_device_call__rx_method_fn(struct pci_binding *_binding, uint32_t class_code, uint32_t sub_class, uint32_t prog_if, uint32_t vendor_id, uint32_t device_id, uint32_t bus, uint32_t dev, uint32_t fun, uint8_t coreid, uint32_t vector);
typedef  void pci_init_pci_device_response__rx_method_fn(struct pci_binding *_binding, pci_errval_t err, uint8_t nr_allocated_bars, pci_caps_per_bar_t caps_per_bar);
typedef  void pci_init_legacy_device_call__rx_method_fn(struct pci_binding *_binding, uint16_t iomin, uint16_t iomax, uint8_t irq, uint8_t coreid, uint32_t vector);
typedef  void pci_init_legacy_device_response__rx_method_fn(struct pci_binding *_binding, pci_errval_t err, struct capref iocap);
typedef  void pci_get_cap_call__rx_method_fn(struct pci_binding *_binding, uint32_t idx, uint32_t cap_nr);
typedef  void pci_get_cap_response__rx_method_fn(struct pci_binding *_binding, pci_errval_t err, struct capref cap, uint8_t type);
typedef  void pci_reregister_interrupt_call__rx_method_fn(struct pci_binding *_binding, uint32_t class_code, uint32_t sub_class, uint32_t prog_if, uint32_t vendor_id, uint32_t device_id, uint32_t bus, uint32_t dev, uint32_t fun, uint8_t coreid, uint32_t vector);
typedef  void pci_reregister_interrupt_response__rx_method_fn(struct pci_binding *_binding, pci_errval_t err);
typedef  void pci_read_conf_header_call__rx_method_fn(struct pci_binding *_binding, uint32_t dword);
typedef  void pci_read_conf_header_response__rx_method_fn(struct pci_binding *_binding, pci_errval_t err, uint32_t val);
typedef  void pci_write_conf_header_call__rx_method_fn(struct pci_binding *_binding, uint32_t dword, uint32_t val);
typedef  void pci_write_conf_header_response__rx_method_fn(struct pci_binding *_binding, pci_errval_t err);
typedef  void pci_msix_enable_call__rx_method_fn(struct pci_binding *_binding);
typedef  void pci_msix_enable_response__rx_method_fn(struct pci_binding *_binding, pci_errval_t err, uint16_t vec_count);
typedef  void pci_msix_vector_init_call__rx_method_fn(struct pci_binding *_binding, uint16_t idx, uint8_t destination, uint8_t vector);
typedef  void pci_msix_vector_init_response__rx_method_fn(struct pci_binding *_binding, pci_errval_t err);

/*
 * Struct type for holding the args for each msg
 */
struct pci_init_pci_device_call__args {
    uint32_t class_code;
    uint32_t sub_class;
    uint32_t prog_if;
    uint32_t vendor_id;
    uint32_t device_id;
    uint32_t bus;
    uint32_t dev;
    uint32_t fun;
    uint8_t coreid;
    uint32_t vector;
};
struct pci_init_pci_device_response__args {
    pci_errval_t err;
    uint8_t nr_allocated_bars;
    pci_caps_per_bar_t *caps_per_bar;
};
struct pci_init_legacy_device_call__args {
    uint16_t iomin;
    uint16_t iomax;
    uint8_t irq;
    uint8_t coreid;
    uint32_t vector;
};
struct pci_init_legacy_device_response__args {
    pci_errval_t err;
    struct capref iocap;
};
struct pci_get_cap_call__args {
    uint32_t idx;
    uint32_t cap_nr;
};
struct pci_get_cap_response__args {
    pci_errval_t err;
    struct capref cap;
    uint8_t type;
};
struct pci_reregister_interrupt_call__args {
    uint32_t class_code;
    uint32_t sub_class;
    uint32_t prog_if;
    uint32_t vendor_id;
    uint32_t device_id;
    uint32_t bus;
    uint32_t dev;
    uint32_t fun;
    uint8_t coreid;
    uint32_t vector;
};
struct pci_reregister_interrupt_response__args {
    pci_errval_t err;
};
struct pci_read_conf_header_call__args {
    uint32_t dword;
};
struct pci_read_conf_header_response__args {
    pci_errval_t err;
    uint32_t val;
};
struct pci_write_conf_header_call__args {
    uint32_t dword;
    uint32_t val;
};
struct pci_write_conf_header_response__args {
    pci_errval_t err;
};
struct pci_msix_enable_response__args {
    pci_errval_t err;
    uint16_t vec_count;
};
struct pci_msix_vector_init_call__args {
    uint16_t idx;
    uint8_t destination;
    uint8_t vector;
};
struct pci_msix_vector_init_response__args {
    pci_errval_t err;
};

/*
 * Union type for all message arguments
 */
union pci_arg_union {
    struct pci_init_pci_device_call__args init_pci_device_call;
    struct pci_init_pci_device_response__args init_pci_device_response;
    struct pci_init_legacy_device_call__args init_legacy_device_call;
    struct pci_init_legacy_device_response__args init_legacy_device_response;
    struct pci_get_cap_call__args get_cap_call;
    struct pci_get_cap_response__args get_cap_response;
    struct pci_reregister_interrupt_call__args reregister_interrupt_call;
    struct pci_reregister_interrupt_response__args reregister_interrupt_response;
    struct pci_read_conf_header_call__args read_conf_header_call;
    struct pci_read_conf_header_response__args read_conf_header_response;
    struct pci_write_conf_header_call__args write_conf_header_call;
    struct pci_write_conf_header_response__args write_conf_header_response;
    struct pci_msix_enable_response__args msix_enable_response;
    struct pci_msix_vector_init_call__args msix_vector_init_call;
    struct pci_msix_vector_init_response__args msix_vector_init_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct pci_tx_vtbl {
    pci_init_pci_device_call__tx_method_fn *init_pci_device_call;
    pci_init_pci_device_response__tx_method_fn *init_pci_device_response;
    pci_init_legacy_device_call__tx_method_fn *init_legacy_device_call;
    pci_init_legacy_device_response__tx_method_fn *init_legacy_device_response;
    pci_get_cap_call__tx_method_fn *get_cap_call;
    pci_get_cap_response__tx_method_fn *get_cap_response;
    pci_reregister_interrupt_call__tx_method_fn *reregister_interrupt_call;
    pci_reregister_interrupt_response__tx_method_fn *reregister_interrupt_response;
    pci_read_conf_header_call__tx_method_fn *read_conf_header_call;
    pci_read_conf_header_response__tx_method_fn *read_conf_header_response;
    pci_write_conf_header_call__tx_method_fn *write_conf_header_call;
    pci_write_conf_header_response__tx_method_fn *write_conf_header_response;
    pci_msix_enable_call__tx_method_fn *msix_enable_call;
    pci_msix_enable_response__tx_method_fn *msix_enable_response;
    pci_msix_vector_init_call__tx_method_fn *msix_vector_init_call;
    pci_msix_vector_init_response__tx_method_fn *msix_vector_init_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct pci_rx_vtbl {
    pci_init_pci_device_call__rx_method_fn *init_pci_device_call;
    pci_init_pci_device_response__rx_method_fn *init_pci_device_response;
    pci_init_legacy_device_call__rx_method_fn *init_legacy_device_call;
    pci_init_legacy_device_response__rx_method_fn *init_legacy_device_response;
    pci_get_cap_call__rx_method_fn *get_cap_call;
    pci_get_cap_response__rx_method_fn *get_cap_response;
    pci_reregister_interrupt_call__rx_method_fn *reregister_interrupt_call;
    pci_reregister_interrupt_response__rx_method_fn *reregister_interrupt_response;
    pci_read_conf_header_call__rx_method_fn *read_conf_header_call;
    pci_read_conf_header_response__rx_method_fn *read_conf_header_response;
    pci_write_conf_header_call__rx_method_fn *write_conf_header_call;
    pci_write_conf_header_response__rx_method_fn *write_conf_header_response;
    pci_msix_enable_call__rx_method_fn *msix_enable_call;
    pci_msix_enable_response__rx_method_fn *msix_enable_response;
    pci_msix_vector_init_call__rx_method_fn *msix_vector_init_call;
    pci_msix_vector_init_response__rx_method_fn *msix_vector_init_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t pci_connect_fn(void *st, struct pci_binding *binding);

/*
 * Export state struct
 */
struct pci_export {
    struct idc_export common;
    pci_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t pci_export(void *st, idc_export_callback_fn *export_cb, pci_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct pci_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t pci_accept(struct pci_frameinfo *_frameinfo, void *st, pci_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct pci_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    pci_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    pci_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    pci_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    pci_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    pci_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct pci_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct pci_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union pci_arg_union tx_union;
    union pci_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum pci_msg_enum tx_msgnum;
    enum pci_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    pci_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t pci_bind(iref_t i, pci_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t pci_connect(struct pci_frameinfo *_frameinfo, pci_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t pci_init_pci_device_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint32_t class_code, uint32_t sub_class, uint32_t prog_if, uint32_t vendor_id, uint32_t device_id, uint32_t bus, uint32_t dev, uint32_t fun, uint8_t coreid, uint32_t vector) __attribute__ ((always_inline));
static inline errval_t pci_init_pci_device_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint32_t class_code, uint32_t sub_class, uint32_t prog_if, uint32_t vendor_id, uint32_t device_id, uint32_t bus, uint32_t dev, uint32_t fun, uint8_t coreid, uint32_t vector)
{
    return(((_binding->tx_vtbl).init_pci_device_call)(_binding, _continuation, class_code, sub_class, prog_if, vendor_id, device_id, bus, dev, fun, coreid, vector));
}

static inline errval_t pci_init_pci_device_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, uint8_t nr_allocated_bars, pci_caps_per_bar_t caps_per_bar) __attribute__ ((always_inline));
static inline errval_t pci_init_pci_device_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, uint8_t nr_allocated_bars, pci_caps_per_bar_t caps_per_bar)
{
    return(((_binding->tx_vtbl).init_pci_device_response)(_binding, _continuation, err, nr_allocated_bars, caps_per_bar));
}

static inline errval_t pci_init_legacy_device_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint16_t iomin, uint16_t iomax, uint8_t irq, uint8_t coreid, uint32_t vector) __attribute__ ((always_inline));
static inline errval_t pci_init_legacy_device_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint16_t iomin, uint16_t iomax, uint8_t irq, uint8_t coreid, uint32_t vector)
{
    return(((_binding->tx_vtbl).init_legacy_device_call)(_binding, _continuation, iomin, iomax, irq, coreid, vector));
}

static inline errval_t pci_init_legacy_device_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, struct capref iocap) __attribute__ ((always_inline));
static inline errval_t pci_init_legacy_device_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, struct capref iocap)
{
    return(((_binding->tx_vtbl).init_legacy_device_response)(_binding, _continuation, err, iocap));
}

static inline errval_t pci_get_cap_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint32_t idx, uint32_t cap_nr) __attribute__ ((always_inline));
static inline errval_t pci_get_cap_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint32_t idx, uint32_t cap_nr)
{
    return(((_binding->tx_vtbl).get_cap_call)(_binding, _continuation, idx, cap_nr));
}

static inline errval_t pci_get_cap_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, struct capref cap, uint8_t type) __attribute__ ((always_inline));
static inline errval_t pci_get_cap_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, struct capref cap, uint8_t type)
{
    return(((_binding->tx_vtbl).get_cap_response)(_binding, _continuation, err, cap, type));
}

static inline errval_t pci_reregister_interrupt_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint32_t class_code, uint32_t sub_class, uint32_t prog_if, uint32_t vendor_id, uint32_t device_id, uint32_t bus, uint32_t dev, uint32_t fun, uint8_t coreid, uint32_t vector) __attribute__ ((always_inline));
static inline errval_t pci_reregister_interrupt_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint32_t class_code, uint32_t sub_class, uint32_t prog_if, uint32_t vendor_id, uint32_t device_id, uint32_t bus, uint32_t dev, uint32_t fun, uint8_t coreid, uint32_t vector)
{
    return(((_binding->tx_vtbl).reregister_interrupt_call)(_binding, _continuation, class_code, sub_class, prog_if, vendor_id, device_id, bus, dev, fun, coreid, vector));
}

static inline errval_t pci_reregister_interrupt_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err) __attribute__ ((always_inline));
static inline errval_t pci_reregister_interrupt_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err)
{
    return(((_binding->tx_vtbl).reregister_interrupt_response)(_binding, _continuation, err));
}

static inline errval_t pci_read_conf_header_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint32_t dword) __attribute__ ((always_inline));
static inline errval_t pci_read_conf_header_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint32_t dword)
{
    return(((_binding->tx_vtbl).read_conf_header_call)(_binding, _continuation, dword));
}

static inline errval_t pci_read_conf_header_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, uint32_t val) __attribute__ ((always_inline));
static inline errval_t pci_read_conf_header_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, uint32_t val)
{
    return(((_binding->tx_vtbl).read_conf_header_response)(_binding, _continuation, err, val));
}

static inline errval_t pci_write_conf_header_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint32_t dword, uint32_t val) __attribute__ ((always_inline));
static inline errval_t pci_write_conf_header_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint32_t dword, uint32_t val)
{
    return(((_binding->tx_vtbl).write_conf_header_call)(_binding, _continuation, dword, val));
}

static inline errval_t pci_write_conf_header_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err) __attribute__ ((always_inline));
static inline errval_t pci_write_conf_header_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err)
{
    return(((_binding->tx_vtbl).write_conf_header_response)(_binding, _continuation, err));
}

static inline errval_t pci_msix_enable_call__tx(struct pci_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t pci_msix_enable_call__tx(struct pci_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).msix_enable_call)(_binding, _continuation));
}

static inline errval_t pci_msix_enable_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, uint16_t vec_count) __attribute__ ((always_inline));
static inline errval_t pci_msix_enable_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err, uint16_t vec_count)
{
    return(((_binding->tx_vtbl).msix_enable_response)(_binding, _continuation, err, vec_count));
}

static inline errval_t pci_msix_vector_init_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint16_t idx, uint8_t destination, uint8_t vector) __attribute__ ((always_inline));
static inline errval_t pci_msix_vector_init_call__tx(struct pci_binding *_binding, struct event_closure _continuation, uint16_t idx, uint8_t destination, uint8_t vector)
{
    return(((_binding->tx_vtbl).msix_vector_init_call)(_binding, _continuation, idx, destination, vector));
}

static inline errval_t pci_msix_vector_init_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err) __attribute__ ((always_inline));
static inline errval_t pci_msix_vector_init_response__tx(struct pci_binding *_binding, struct event_closure _continuation, pci_errval_t err)
{
    return(((_binding->tx_vtbl).msix_vector_init_response)(_binding, _continuation, err));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/pci_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/pci_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/pci_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/pci_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __pci_IF_H
