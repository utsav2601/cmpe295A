#ifndef __rcce_IF_H
#define __rcce_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: rcce
 * INTEFACE FILE: ../if/rcce.if
 * INTERFACE DESCRIPTION: The RCCE Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t rcce_genpaddr_t;
typedef uint64_t rcce_genvaddr_t;
typedef uint32_t rcce_rsrcid_t;
typedef uint64_t rcce_errval_t;
typedef uint64_t rcce_cycles_t;
typedef uint32_t rcce_iref_t;
typedef uint8_t rcce_coreid_t;
typedef uint32_t rcce_domainid_t;

/*
 * Forward declaration of binding type
 */
struct rcce_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void rcce_bind_continuation_fn(void *st, errval_t err, struct rcce_binding *_binding);
typedef  bool rcce_can_send_fn(struct rcce_binding *_binding);
typedef  errval_t rcce_register_send_fn(struct rcce_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t rcce_change_waitset_fn(struct rcce_binding *_binding, struct waitset *ws);
typedef  errval_t rcce_control_fn(struct rcce_binding *_binding, idc_control_t control);
typedef  void rcce_error_handler_fn(struct rcce_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum rcce_msg_enum {
    rcce___dummy__msgnum = 0,
    rcce___bind__msgnum = 1,
    rcce___bind_reply__msgnum = 2,
    rcce_init_request__msgnum = 3,
    rcce_ssf__msgnum = 4,
    rcce_jump__msgnum = 5,
    rcce_acknowledgement__msgnum = 6,
    rcce_wait_request__msgnum = 7,
    rcce_wait_reply__msgnum = 8,
    rcce_ring_request__msgnum = 9,
    rcce_ring_reply__msgnum = 10,
    rcce_error_reply__msgnum = 11,
    rcce_message_request__msgnum = 12,
    rcce_message_reply__msgnum = 13,
    rcce_bulk_message_request__msgnum = 14,
    rcce_bulk_message_reply__msgnum = 15,
    rcce_bulk_recv_ready__msgnum = 16
} rcce_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t rcce_init_request__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation, uint8_t coreid, uint8_t bspid, uint64_t state, struct capref shared_mem);
typedef  errval_t rcce_ssf__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation, uint8_t id, uint64_t pyaload, uint64_t timestamp);
typedef  errval_t rcce_jump__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation, uint8_t id, uint64_t timestamp);
typedef  errval_t rcce_acknowledgement__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation, uint8_t id, uint64_t time);
typedef  errval_t rcce_wait_request__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation);
typedef  errval_t rcce_wait_reply__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation);
typedef  errval_t rcce_ring_request__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation);
typedef  errval_t rcce_ring_reply__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation);
typedef  errval_t rcce_error_reply__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation, rcce_errval_t err, uint64_t state);
typedef  errval_t rcce_message_request__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid, const uint8_t *msg, size_t size);
typedef  errval_t rcce_message_reply__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid);
typedef  errval_t rcce_bulk_message_request__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid, uint64_t id, uint64_t size, uint8_t last_fragment);
typedef  errval_t rcce_bulk_message_reply__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid, uint64_t id);
typedef  errval_t rcce_bulk_recv_ready__tx_method_fn(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid, uint64_t size);

/*
 * Message type signatures (receive)
 */
typedef  void rcce_init_request__rx_method_fn(struct rcce_binding *_binding, uint8_t coreid, uint8_t bspid, uint64_t state, struct capref shared_mem);
typedef  void rcce_ssf__rx_method_fn(struct rcce_binding *_binding, uint8_t id, uint64_t pyaload, uint64_t timestamp);
typedef  void rcce_jump__rx_method_fn(struct rcce_binding *_binding, uint8_t id, uint64_t timestamp);
typedef  void rcce_acknowledgement__rx_method_fn(struct rcce_binding *_binding, uint8_t id, uint64_t time);
typedef  void rcce_wait_request__rx_method_fn(struct rcce_binding *_binding);
typedef  void rcce_wait_reply__rx_method_fn(struct rcce_binding *_binding);
typedef  void rcce_ring_request__rx_method_fn(struct rcce_binding *_binding);
typedef  void rcce_ring_reply__rx_method_fn(struct rcce_binding *_binding);
typedef  void rcce_error_reply__rx_method_fn(struct rcce_binding *_binding, rcce_errval_t err, uint64_t state);
typedef  void rcce_message_request__rx_method_fn(struct rcce_binding *_binding, uint16_t coreid, uint8_t *msg, size_t size);
typedef  void rcce_message_reply__rx_method_fn(struct rcce_binding *_binding, uint16_t coreid);
typedef  void rcce_bulk_message_request__rx_method_fn(struct rcce_binding *_binding, uint16_t coreid, uint64_t id, uint64_t size, uint8_t last_fragment);
typedef  void rcce_bulk_message_reply__rx_method_fn(struct rcce_binding *_binding, uint16_t coreid, uint64_t id);
typedef  void rcce_bulk_recv_ready__rx_method_fn(struct rcce_binding *_binding, uint16_t coreid, uint64_t size);

/*
 * Struct type for holding the args for each msg
 */
struct rcce_init_request__args {
    uint8_t coreid;
    uint8_t bspid;
    uint64_t state;
    struct capref shared_mem;
};
struct rcce_ssf__args {
    uint8_t id;
    uint64_t pyaload;
    uint64_t timestamp;
};
struct rcce_jump__args {
    uint8_t id;
    uint64_t timestamp;
};
struct rcce_acknowledgement__args {
    uint8_t id;
    uint64_t time;
};
struct rcce_error_reply__args {
    rcce_errval_t err;
    uint64_t state;
};
struct rcce_message_request__args {
    uint16_t coreid;
    uint8_t *msg;
    size_t size;
};
struct rcce_message_reply__args {
    uint16_t coreid;
};
struct rcce_bulk_message_request__args {
    uint16_t coreid;
    uint64_t id;
    uint64_t size;
    uint8_t last_fragment;
};
struct rcce_bulk_message_reply__args {
    uint16_t coreid;
    uint64_t id;
};
struct rcce_bulk_recv_ready__args {
    uint16_t coreid;
    uint64_t size;
};

/*
 * Union type for all message arguments
 */
union rcce_arg_union {
    struct rcce_init_request__args init_request;
    struct rcce_ssf__args ssf;
    struct rcce_jump__args jump;
    struct rcce_acknowledgement__args acknowledgement;
    struct rcce_error_reply__args error_reply;
    struct rcce_message_request__args message_request;
    struct rcce_message_reply__args message_reply;
    struct rcce_bulk_message_request__args bulk_message_request;
    struct rcce_bulk_message_reply__args bulk_message_reply;
    struct rcce_bulk_recv_ready__args bulk_recv_ready;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct rcce_tx_vtbl {
    rcce_init_request__tx_method_fn *init_request;
    rcce_ssf__tx_method_fn *ssf;
    rcce_jump__tx_method_fn *jump;
    rcce_acknowledgement__tx_method_fn *acknowledgement;
    rcce_wait_request__tx_method_fn *wait_request;
    rcce_wait_reply__tx_method_fn *wait_reply;
    rcce_ring_request__tx_method_fn *ring_request;
    rcce_ring_reply__tx_method_fn *ring_reply;
    rcce_error_reply__tx_method_fn *error_reply;
    rcce_message_request__tx_method_fn *message_request;
    rcce_message_reply__tx_method_fn *message_reply;
    rcce_bulk_message_request__tx_method_fn *bulk_message_request;
    rcce_bulk_message_reply__tx_method_fn *bulk_message_reply;
    rcce_bulk_recv_ready__tx_method_fn *bulk_recv_ready;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct rcce_rx_vtbl {
    rcce_init_request__rx_method_fn *init_request;
    rcce_ssf__rx_method_fn *ssf;
    rcce_jump__rx_method_fn *jump;
    rcce_acknowledgement__rx_method_fn *acknowledgement;
    rcce_wait_request__rx_method_fn *wait_request;
    rcce_wait_reply__rx_method_fn *wait_reply;
    rcce_ring_request__rx_method_fn *ring_request;
    rcce_ring_reply__rx_method_fn *ring_reply;
    rcce_error_reply__rx_method_fn *error_reply;
    rcce_message_request__rx_method_fn *message_request;
    rcce_message_reply__rx_method_fn *message_reply;
    rcce_bulk_message_request__rx_method_fn *bulk_message_request;
    rcce_bulk_message_reply__rx_method_fn *bulk_message_reply;
    rcce_bulk_recv_ready__rx_method_fn *bulk_recv_ready;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t rcce_connect_fn(void *st, struct rcce_binding *binding);

/*
 * Export state struct
 */
struct rcce_export {
    struct idc_export common;
    rcce_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t rcce_export(void *st, idc_export_callback_fn *export_cb, rcce_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct rcce_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t rcce_accept(struct rcce_frameinfo *_frameinfo, void *st, rcce_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct rcce_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    rcce_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    rcce_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    rcce_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    rcce_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    rcce_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct rcce_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct rcce_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union rcce_arg_union tx_union;
    union rcce_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum rcce_msg_enum tx_msgnum;
    enum rcce_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    rcce_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t rcce_bind(iref_t i, rcce_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t rcce_connect(struct rcce_frameinfo *_frameinfo, rcce_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t rcce_init_request__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint8_t coreid, uint8_t bspid, uint64_t state, struct capref shared_mem) __attribute__ ((always_inline));
static inline errval_t rcce_init_request__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint8_t coreid, uint8_t bspid, uint64_t state, struct capref shared_mem)
{
    return(((_binding->tx_vtbl).init_request)(_binding, _continuation, coreid, bspid, state, shared_mem));
}

static inline errval_t rcce_ssf__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint8_t id, uint64_t pyaload, uint64_t timestamp) __attribute__ ((always_inline));
static inline errval_t rcce_ssf__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint8_t id, uint64_t pyaload, uint64_t timestamp)
{
    return(((_binding->tx_vtbl).ssf)(_binding, _continuation, id, pyaload, timestamp));
}

static inline errval_t rcce_jump__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint8_t id, uint64_t timestamp) __attribute__ ((always_inline));
static inline errval_t rcce_jump__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint8_t id, uint64_t timestamp)
{
    return(((_binding->tx_vtbl).jump)(_binding, _continuation, id, timestamp));
}

static inline errval_t rcce_acknowledgement__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint8_t id, uint64_t time) __attribute__ ((always_inline));
static inline errval_t rcce_acknowledgement__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint8_t id, uint64_t time)
{
    return(((_binding->tx_vtbl).acknowledgement)(_binding, _continuation, id, time));
}

static inline errval_t rcce_wait_request__tx(struct rcce_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t rcce_wait_request__tx(struct rcce_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).wait_request)(_binding, _continuation));
}

static inline errval_t rcce_wait_reply__tx(struct rcce_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t rcce_wait_reply__tx(struct rcce_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).wait_reply)(_binding, _continuation));
}

static inline errval_t rcce_ring_request__tx(struct rcce_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t rcce_ring_request__tx(struct rcce_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).ring_request)(_binding, _continuation));
}

static inline errval_t rcce_ring_reply__tx(struct rcce_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t rcce_ring_reply__tx(struct rcce_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).ring_reply)(_binding, _continuation));
}

static inline errval_t rcce_error_reply__tx(struct rcce_binding *_binding, struct event_closure _continuation, rcce_errval_t err, uint64_t state) __attribute__ ((always_inline));
static inline errval_t rcce_error_reply__tx(struct rcce_binding *_binding, struct event_closure _continuation, rcce_errval_t err, uint64_t state)
{
    return(((_binding->tx_vtbl).error_reply)(_binding, _continuation, err, state));
}

static inline errval_t rcce_message_request__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid, const uint8_t *msg, size_t size) __attribute__ ((always_inline));
static inline errval_t rcce_message_request__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid, const uint8_t *msg, size_t size)
{
    return(((_binding->tx_vtbl).message_request)(_binding, _continuation, coreid, msg, size));
}

static inline errval_t rcce_message_reply__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid) __attribute__ ((always_inline));
static inline errval_t rcce_message_reply__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid)
{
    return(((_binding->tx_vtbl).message_reply)(_binding, _continuation, coreid));
}

static inline errval_t rcce_bulk_message_request__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid, uint64_t id, uint64_t size, uint8_t last_fragment) __attribute__ ((always_inline));
static inline errval_t rcce_bulk_message_request__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid, uint64_t id, uint64_t size, uint8_t last_fragment)
{
    return(((_binding->tx_vtbl).bulk_message_request)(_binding, _continuation, coreid, id, size, last_fragment));
}

static inline errval_t rcce_bulk_message_reply__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid, uint64_t id) __attribute__ ((always_inline));
static inline errval_t rcce_bulk_message_reply__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid, uint64_t id)
{
    return(((_binding->tx_vtbl).bulk_message_reply)(_binding, _continuation, coreid, id));
}

static inline errval_t rcce_bulk_recv_ready__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid, uint64_t size) __attribute__ ((always_inline));
static inline errval_t rcce_bulk_recv_ready__tx(struct rcce_binding *_binding, struct event_closure _continuation, uint16_t coreid, uint64_t size)
{
    return(((_binding->tx_vtbl).bulk_recv_ready)(_binding, _continuation, coreid, size));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/rcce_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/rcce_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/rcce_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/rcce_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __rcce_IF_H
