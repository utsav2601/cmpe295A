#ifndef __bomp_IF_H
#define __bomp_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: bomp
 * INTEFACE FILE: ../if/bomp.if
 * INTERFACE DESCRIPTION: Barrelfish OpenMP Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t bomp_genpaddr_t;
typedef uint64_t bomp_genvaddr_t;
typedef uint32_t bomp_rsrcid_t;
typedef uint64_t bomp_errval_t;
typedef uint64_t bomp_cycles_t;
typedef uint32_t bomp_iref_t;
typedef uint8_t bomp_coreid_t;
typedef uint32_t bomp_domainid_t;

/*
 * Forward declaration of binding type
 */
struct bomp_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void bomp_bind_continuation_fn(void *st, errval_t err, struct bomp_binding *_binding);
typedef  bool bomp_can_send_fn(struct bomp_binding *_binding);
typedef  errval_t bomp_register_send_fn(struct bomp_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t bomp_change_waitset_fn(struct bomp_binding *_binding, struct waitset *ws);
typedef  errval_t bomp_control_fn(struct bomp_binding *_binding, idc_control_t control);
typedef  void bomp_error_handler_fn(struct bomp_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum bomp_msg_enum {
    bomp___dummy__msgnum = 0,
    bomp___bind__msgnum = 1,
    bomp___bind_reply__msgnum = 2,
    bomp_execute__msgnum = 3,
    bomp_done__msgnum = 4,
    bomp_initialize_call__msgnum = 5,
    bomp_initialize_response__msgnum = 6,
    bomp_execute_range__msgnum = 7,
    bomp_map_call__msgnum = 8,
    bomp_map_response__msgnum = 9,
    bomp_update_call__msgnum = 10,
    bomp_update_response__msgnum = 11
} bomp_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t bomp_execute__tx_method_fn(struct bomp_binding *_binding, struct event_closure _continuation, uint64_t fn, uint64_t arg, uint32_t tid, uint64_t icv);
typedef  errval_t bomp_done__tx_method_fn(struct bomp_binding *_binding, struct event_closure _continuation, bomp_errval_t status);
typedef  errval_t bomp_initialize_call__tx_method_fn(struct bomp_binding *_binding, struct event_closure _continuation);
typedef  errval_t bomp_initialize_response__tx_method_fn(struct bomp_binding *_binding, struct event_closure _continuation, bomp_errval_t status, uint32_t nthreads);
typedef  errval_t bomp_execute_range__tx_method_fn(struct bomp_binding *_binding, struct event_closure _continuation, uint64_t fn, uint64_t addr, uint32_t from, uint32_t to, uint32_t nthreads);
typedef  errval_t bomp_map_call__tx_method_fn(struct bomp_binding *_binding, struct event_closure _continuation, struct capref frame, uint64_t addr);
typedef  errval_t bomp_map_response__tx_method_fn(struct bomp_binding *_binding, struct event_closure _continuation, bomp_errval_t status);
typedef  errval_t bomp_update_call__tx_method_fn(struct bomp_binding *_binding, struct event_closure _continuation, uint64_t addr, uint64_t offset, uint64_t length);
typedef  errval_t bomp_update_response__tx_method_fn(struct bomp_binding *_binding, struct event_closure _continuation, bomp_errval_t status);

/*
 * Message type signatures (receive)
 */
typedef  void bomp_execute__rx_method_fn(struct bomp_binding *_binding, uint64_t fn, uint64_t arg, uint32_t tid, uint64_t icv);
typedef  void bomp_done__rx_method_fn(struct bomp_binding *_binding, bomp_errval_t status);
typedef  void bomp_initialize_call__rx_method_fn(struct bomp_binding *_binding);
typedef  void bomp_initialize_response__rx_method_fn(struct bomp_binding *_binding, bomp_errval_t status, uint32_t nthreads);
typedef  void bomp_execute_range__rx_method_fn(struct bomp_binding *_binding, uint64_t fn, uint64_t addr, uint32_t from, uint32_t to, uint32_t nthreads);
typedef  void bomp_map_call__rx_method_fn(struct bomp_binding *_binding, struct capref frame, uint64_t addr);
typedef  void bomp_map_response__rx_method_fn(struct bomp_binding *_binding, bomp_errval_t status);
typedef  void bomp_update_call__rx_method_fn(struct bomp_binding *_binding, uint64_t addr, uint64_t offset, uint64_t length);
typedef  void bomp_update_response__rx_method_fn(struct bomp_binding *_binding, bomp_errval_t status);

/*
 * Struct type for holding the args for each msg
 */
struct bomp_execute__args {
    uint64_t fn;
    uint64_t arg;
    uint32_t tid;
    uint64_t icv;
};
struct bomp_done__args {
    bomp_errval_t status;
};
struct bomp_initialize_response__args {
    bomp_errval_t status;
    uint32_t nthreads;
};
struct bomp_execute_range__args {
    uint64_t fn;
    uint64_t addr;
    uint32_t from;
    uint32_t to;
    uint32_t nthreads;
};
struct bomp_map_call__args {
    struct capref frame;
    uint64_t addr;
};
struct bomp_map_response__args {
    bomp_errval_t status;
};
struct bomp_update_call__args {
    uint64_t addr;
    uint64_t offset;
    uint64_t length;
};
struct bomp_update_response__args {
    bomp_errval_t status;
};

/*
 * Union type for all message arguments
 */
union bomp_arg_union {
    struct bomp_execute__args execute;
    struct bomp_done__args done;
    struct bomp_initialize_response__args initialize_response;
    struct bomp_execute_range__args execute_range;
    struct bomp_map_call__args map_call;
    struct bomp_map_response__args map_response;
    struct bomp_update_call__args update_call;
    struct bomp_update_response__args update_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct bomp_tx_vtbl {
    bomp_execute__tx_method_fn *execute;
    bomp_done__tx_method_fn *done;
    bomp_initialize_call__tx_method_fn *initialize_call;
    bomp_initialize_response__tx_method_fn *initialize_response;
    bomp_execute_range__tx_method_fn *execute_range;
    bomp_map_call__tx_method_fn *map_call;
    bomp_map_response__tx_method_fn *map_response;
    bomp_update_call__tx_method_fn *update_call;
    bomp_update_response__tx_method_fn *update_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct bomp_rx_vtbl {
    bomp_execute__rx_method_fn *execute;
    bomp_done__rx_method_fn *done;
    bomp_initialize_call__rx_method_fn *initialize_call;
    bomp_initialize_response__rx_method_fn *initialize_response;
    bomp_execute_range__rx_method_fn *execute_range;
    bomp_map_call__rx_method_fn *map_call;
    bomp_map_response__rx_method_fn *map_response;
    bomp_update_call__rx_method_fn *update_call;
    bomp_update_response__rx_method_fn *update_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t bomp_connect_fn(void *st, struct bomp_binding *binding);

/*
 * Export state struct
 */
struct bomp_export {
    struct idc_export common;
    bomp_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t bomp_export(void *st, idc_export_callback_fn *export_cb, bomp_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct bomp_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t bomp_accept(struct bomp_frameinfo *_frameinfo, void *st, bomp_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct bomp_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    bomp_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    bomp_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    bomp_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    bomp_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    bomp_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct bomp_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct bomp_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union bomp_arg_union tx_union;
    union bomp_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum bomp_msg_enum tx_msgnum;
    enum bomp_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    bomp_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t bomp_bind(iref_t i, bomp_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t bomp_connect(struct bomp_frameinfo *_frameinfo, bomp_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t bomp_execute__tx(struct bomp_binding *_binding, struct event_closure _continuation, uint64_t fn, uint64_t arg, uint32_t tid, uint64_t icv) __attribute__ ((always_inline));
static inline errval_t bomp_execute__tx(struct bomp_binding *_binding, struct event_closure _continuation, uint64_t fn, uint64_t arg, uint32_t tid, uint64_t icv)
{
    return(((_binding->tx_vtbl).execute)(_binding, _continuation, fn, arg, tid, icv));
}

static inline errval_t bomp_done__tx(struct bomp_binding *_binding, struct event_closure _continuation, bomp_errval_t status) __attribute__ ((always_inline));
static inline errval_t bomp_done__tx(struct bomp_binding *_binding, struct event_closure _continuation, bomp_errval_t status)
{
    return(((_binding->tx_vtbl).done)(_binding, _continuation, status));
}

static inline errval_t bomp_initialize_call__tx(struct bomp_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bomp_initialize_call__tx(struct bomp_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).initialize_call)(_binding, _continuation));
}

static inline errval_t bomp_initialize_response__tx(struct bomp_binding *_binding, struct event_closure _continuation, bomp_errval_t status, uint32_t nthreads) __attribute__ ((always_inline));
static inline errval_t bomp_initialize_response__tx(struct bomp_binding *_binding, struct event_closure _continuation, bomp_errval_t status, uint32_t nthreads)
{
    return(((_binding->tx_vtbl).initialize_response)(_binding, _continuation, status, nthreads));
}

static inline errval_t bomp_execute_range__tx(struct bomp_binding *_binding, struct event_closure _continuation, uint64_t fn, uint64_t addr, uint32_t from, uint32_t to, uint32_t nthreads) __attribute__ ((always_inline));
static inline errval_t bomp_execute_range__tx(struct bomp_binding *_binding, struct event_closure _continuation, uint64_t fn, uint64_t addr, uint32_t from, uint32_t to, uint32_t nthreads)
{
    return(((_binding->tx_vtbl).execute_range)(_binding, _continuation, fn, addr, from, to, nthreads));
}

static inline errval_t bomp_map_call__tx(struct bomp_binding *_binding, struct event_closure _continuation, struct capref frame, uint64_t addr) __attribute__ ((always_inline));
static inline errval_t bomp_map_call__tx(struct bomp_binding *_binding, struct event_closure _continuation, struct capref frame, uint64_t addr)
{
    return(((_binding->tx_vtbl).map_call)(_binding, _continuation, frame, addr));
}

static inline errval_t bomp_map_response__tx(struct bomp_binding *_binding, struct event_closure _continuation, bomp_errval_t status) __attribute__ ((always_inline));
static inline errval_t bomp_map_response__tx(struct bomp_binding *_binding, struct event_closure _continuation, bomp_errval_t status)
{
    return(((_binding->tx_vtbl).map_response)(_binding, _continuation, status));
}

static inline errval_t bomp_update_call__tx(struct bomp_binding *_binding, struct event_closure _continuation, uint64_t addr, uint64_t offset, uint64_t length) __attribute__ ((always_inline));
static inline errval_t bomp_update_call__tx(struct bomp_binding *_binding, struct event_closure _continuation, uint64_t addr, uint64_t offset, uint64_t length)
{
    return(((_binding->tx_vtbl).update_call)(_binding, _continuation, addr, offset, length));
}

static inline errval_t bomp_update_response__tx(struct bomp_binding *_binding, struct event_closure _continuation, bomp_errval_t status) __attribute__ ((always_inline));
static inline errval_t bomp_update_response__tx(struct bomp_binding *_binding, struct event_closure _continuation, bomp_errval_t status)
{
    return(((_binding->tx_vtbl).update_response)(_binding, _continuation, status));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/bomp_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/bomp_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/bomp_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/bomp_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __bomp_IF_H
