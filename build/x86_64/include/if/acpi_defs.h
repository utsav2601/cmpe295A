#ifndef __acpi_IF_H
#define __acpi_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: acpi
 * INTEFACE FILE: ../if/acpi.if
 * INTERFACE DESCRIPTION: acpi RPC Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t acpi_genpaddr_t;
typedef uint64_t acpi_genvaddr_t;
typedef uint32_t acpi_rsrcid_t;
typedef uint64_t acpi_errval_t;
typedef uint64_t acpi_cycles_t;
typedef uint32_t acpi_iref_t;
typedef uint8_t acpi_coreid_t;
typedef uint32_t acpi_domainid_t;
struct _acpi_pci_address__struct {
    uint8_t bus;
    uint8_t device;
    uint8_t function;
};
typedef struct _acpi_pci_address__struct acpi_pci_address_t;

/*
 * Forward declaration of binding type
 */
struct acpi_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void acpi_bind_continuation_fn(void *st, errval_t err, struct acpi_binding *_binding);
typedef  bool acpi_can_send_fn(struct acpi_binding *_binding);
typedef  errval_t acpi_register_send_fn(struct acpi_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t acpi_change_waitset_fn(struct acpi_binding *_binding, struct waitset *ws);
typedef  errval_t acpi_control_fn(struct acpi_binding *_binding, idc_control_t control);
typedef  void acpi_error_handler_fn(struct acpi_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum acpi_msg_enum {
    acpi___dummy__msgnum = 0,
    acpi___bind__msgnum = 1,
    acpi___bind_reply__msgnum = 2,
    acpi_get_pcie_confspace_call__msgnum = 3,
    acpi_get_pcie_confspace_response__msgnum = 4,
    acpi_read_irq_table_call__msgnum = 5,
    acpi_read_irq_table_response__msgnum = 6,
    acpi_set_device_irq_call__msgnum = 7,
    acpi_set_device_irq_response__msgnum = 8,
    acpi_enable_and_route_interrupt_call__msgnum = 9,
    acpi_enable_and_route_interrupt_response__msgnum = 10,
    acpi_reset_call__msgnum = 11,
    acpi_reset_response__msgnum = 12,
    acpi_sleep_call__msgnum = 13,
    acpi_sleep_response__msgnum = 14,
    acpi_get_vbe_bios_cap_call__msgnum = 15,
    acpi_get_vbe_bios_cap_response__msgnum = 16,
    acpi_mm_alloc_range_proxy_call__msgnum = 17,
    acpi_mm_alloc_range_proxy_response__msgnum = 18,
    acpi_mm_realloc_range_proxy_call__msgnum = 19,
    acpi_mm_realloc_range_proxy_response__msgnum = 20,
    acpi_mm_free_proxy_call__msgnum = 21,
    acpi_mm_free_proxy_response__msgnum = 22
} acpi_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t acpi_get_pcie_confspace_call__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation);
typedef  errval_t acpi_get_pcie_confspace_response__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err, uint64_t address, uint16_t segment, uint8_t startbus, uint8_t endbus);
typedef  errval_t acpi_read_irq_table_call__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, const char *handle, acpi_pci_address_t addr, uint8_t bus);
typedef  errval_t acpi_read_irq_table_response__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t error, const char *child);
typedef  errval_t acpi_set_device_irq_call__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, const char *handle, uint32_t irq);
typedef  errval_t acpi_set_device_irq_response__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t error);
typedef  errval_t acpi_enable_and_route_interrupt_call__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, uint32_t gsi, acpi_coreid_t dest, uint32_t vector);
typedef  errval_t acpi_enable_and_route_interrupt_response__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t error_code);
typedef  errval_t acpi_reset_call__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation);
typedef  errval_t acpi_reset_response__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err);
typedef  errval_t acpi_sleep_call__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, uint32_t state);
typedef  errval_t acpi_sleep_response__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err);
typedef  errval_t acpi_get_vbe_bios_cap_call__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation);
typedef  errval_t acpi_get_vbe_bios_cap_response__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err, struct capref cap, uint32_t size);
typedef  errval_t acpi_mm_alloc_range_proxy_call__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, uint8_t sizebits, uint64_t minbase, uint64_t maxlimit);
typedef  errval_t acpi_mm_alloc_range_proxy_response__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, struct capref devframe, acpi_errval_t err);
typedef  errval_t acpi_mm_realloc_range_proxy_call__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, uint8_t sizebits, uint64_t minbase);
typedef  errval_t acpi_mm_realloc_range_proxy_response__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, struct capref devframe, acpi_errval_t err);
typedef  errval_t acpi_mm_free_proxy_call__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, struct capref devframe, uint64_t base, uint8_t sizebits);
typedef  errval_t acpi_mm_free_proxy_response__tx_method_fn(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err);

/*
 * Message type signatures (receive)
 */
typedef  void acpi_get_pcie_confspace_call__rx_method_fn(struct acpi_binding *_binding);
typedef  void acpi_get_pcie_confspace_response__rx_method_fn(struct acpi_binding *_binding, acpi_errval_t err, uint64_t address, uint16_t segment, uint8_t startbus, uint8_t endbus);
typedef  void acpi_read_irq_table_call__rx_method_fn(struct acpi_binding *_binding, char *handle, acpi_pci_address_t addr, uint8_t bus);
typedef  void acpi_read_irq_table_response__rx_method_fn(struct acpi_binding *_binding, acpi_errval_t error, char *child);
typedef  void acpi_set_device_irq_call__rx_method_fn(struct acpi_binding *_binding, char *handle, uint32_t irq);
typedef  void acpi_set_device_irq_response__rx_method_fn(struct acpi_binding *_binding, acpi_errval_t error);
typedef  void acpi_enable_and_route_interrupt_call__rx_method_fn(struct acpi_binding *_binding, uint32_t gsi, acpi_coreid_t dest, uint32_t vector);
typedef  void acpi_enable_and_route_interrupt_response__rx_method_fn(struct acpi_binding *_binding, acpi_errval_t error_code);
typedef  void acpi_reset_call__rx_method_fn(struct acpi_binding *_binding);
typedef  void acpi_reset_response__rx_method_fn(struct acpi_binding *_binding, acpi_errval_t err);
typedef  void acpi_sleep_call__rx_method_fn(struct acpi_binding *_binding, uint32_t state);
typedef  void acpi_sleep_response__rx_method_fn(struct acpi_binding *_binding, acpi_errval_t err);
typedef  void acpi_get_vbe_bios_cap_call__rx_method_fn(struct acpi_binding *_binding);
typedef  void acpi_get_vbe_bios_cap_response__rx_method_fn(struct acpi_binding *_binding, acpi_errval_t err, struct capref cap, uint32_t size);
typedef  void acpi_mm_alloc_range_proxy_call__rx_method_fn(struct acpi_binding *_binding, uint8_t sizebits, uint64_t minbase, uint64_t maxlimit);
typedef  void acpi_mm_alloc_range_proxy_response__rx_method_fn(struct acpi_binding *_binding, struct capref devframe, acpi_errval_t err);
typedef  void acpi_mm_realloc_range_proxy_call__rx_method_fn(struct acpi_binding *_binding, uint8_t sizebits, uint64_t minbase);
typedef  void acpi_mm_realloc_range_proxy_response__rx_method_fn(struct acpi_binding *_binding, struct capref devframe, acpi_errval_t err);
typedef  void acpi_mm_free_proxy_call__rx_method_fn(struct acpi_binding *_binding, struct capref devframe, uint64_t base, uint8_t sizebits);
typedef  void acpi_mm_free_proxy_response__rx_method_fn(struct acpi_binding *_binding, acpi_errval_t err);

/*
 * Struct type for holding the args for each msg
 */
struct acpi_get_pcie_confspace_response__args {
    acpi_errval_t err;
    uint64_t address;
    uint16_t segment;
    uint8_t startbus;
    uint8_t endbus;
};
struct acpi_read_irq_table_call__args {
    char *handle;
    acpi_pci_address_t addr;
    uint8_t bus;
};
struct acpi_read_irq_table_response__args {
    acpi_errval_t error;
    char *child;
};
struct acpi_set_device_irq_call__args {
    char *handle;
    uint32_t irq;
};
struct acpi_set_device_irq_response__args {
    acpi_errval_t error;
};
struct acpi_enable_and_route_interrupt_call__args {
    uint32_t gsi;
    acpi_coreid_t dest;
    uint32_t vector;
};
struct acpi_enable_and_route_interrupt_response__args {
    acpi_errval_t error_code;
};
struct acpi_reset_response__args {
    acpi_errval_t err;
};
struct acpi_sleep_call__args {
    uint32_t state;
};
struct acpi_sleep_response__args {
    acpi_errval_t err;
};
struct acpi_get_vbe_bios_cap_response__args {
    acpi_errval_t err;
    struct capref cap;
    uint32_t size;
};
struct acpi_mm_alloc_range_proxy_call__args {
    uint8_t sizebits;
    uint64_t minbase;
    uint64_t maxlimit;
};
struct acpi_mm_alloc_range_proxy_response__args {
    struct capref devframe;
    acpi_errval_t err;
};
struct acpi_mm_realloc_range_proxy_call__args {
    uint8_t sizebits;
    uint64_t minbase;
};
struct acpi_mm_realloc_range_proxy_response__args {
    struct capref devframe;
    acpi_errval_t err;
};
struct acpi_mm_free_proxy_call__args {
    struct capref devframe;
    uint64_t base;
    uint8_t sizebits;
};
struct acpi_mm_free_proxy_response__args {
    acpi_errval_t err;
};

/*
 * Union type for all message arguments
 */
union acpi_arg_union {
    struct acpi_get_pcie_confspace_response__args get_pcie_confspace_response;
    struct acpi_read_irq_table_call__args read_irq_table_call;
    struct acpi_read_irq_table_response__args read_irq_table_response;
    struct acpi_set_device_irq_call__args set_device_irq_call;
    struct acpi_set_device_irq_response__args set_device_irq_response;
    struct acpi_enable_and_route_interrupt_call__args enable_and_route_interrupt_call;
    struct acpi_enable_and_route_interrupt_response__args enable_and_route_interrupt_response;
    struct acpi_reset_response__args reset_response;
    struct acpi_sleep_call__args sleep_call;
    struct acpi_sleep_response__args sleep_response;
    struct acpi_get_vbe_bios_cap_response__args get_vbe_bios_cap_response;
    struct acpi_mm_alloc_range_proxy_call__args mm_alloc_range_proxy_call;
    struct acpi_mm_alloc_range_proxy_response__args mm_alloc_range_proxy_response;
    struct acpi_mm_realloc_range_proxy_call__args mm_realloc_range_proxy_call;
    struct acpi_mm_realloc_range_proxy_response__args mm_realloc_range_proxy_response;
    struct acpi_mm_free_proxy_call__args mm_free_proxy_call;
    struct acpi_mm_free_proxy_response__args mm_free_proxy_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct acpi_tx_vtbl {
    acpi_get_pcie_confspace_call__tx_method_fn *get_pcie_confspace_call;
    acpi_get_pcie_confspace_response__tx_method_fn *get_pcie_confspace_response;
    acpi_read_irq_table_call__tx_method_fn *read_irq_table_call;
    acpi_read_irq_table_response__tx_method_fn *read_irq_table_response;
    acpi_set_device_irq_call__tx_method_fn *set_device_irq_call;
    acpi_set_device_irq_response__tx_method_fn *set_device_irq_response;
    acpi_enable_and_route_interrupt_call__tx_method_fn *enable_and_route_interrupt_call;
    acpi_enable_and_route_interrupt_response__tx_method_fn *enable_and_route_interrupt_response;
    acpi_reset_call__tx_method_fn *reset_call;
    acpi_reset_response__tx_method_fn *reset_response;
    acpi_sleep_call__tx_method_fn *sleep_call;
    acpi_sleep_response__tx_method_fn *sleep_response;
    acpi_get_vbe_bios_cap_call__tx_method_fn *get_vbe_bios_cap_call;
    acpi_get_vbe_bios_cap_response__tx_method_fn *get_vbe_bios_cap_response;
    acpi_mm_alloc_range_proxy_call__tx_method_fn *mm_alloc_range_proxy_call;
    acpi_mm_alloc_range_proxy_response__tx_method_fn *mm_alloc_range_proxy_response;
    acpi_mm_realloc_range_proxy_call__tx_method_fn *mm_realloc_range_proxy_call;
    acpi_mm_realloc_range_proxy_response__tx_method_fn *mm_realloc_range_proxy_response;
    acpi_mm_free_proxy_call__tx_method_fn *mm_free_proxy_call;
    acpi_mm_free_proxy_response__tx_method_fn *mm_free_proxy_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct acpi_rx_vtbl {
    acpi_get_pcie_confspace_call__rx_method_fn *get_pcie_confspace_call;
    acpi_get_pcie_confspace_response__rx_method_fn *get_pcie_confspace_response;
    acpi_read_irq_table_call__rx_method_fn *read_irq_table_call;
    acpi_read_irq_table_response__rx_method_fn *read_irq_table_response;
    acpi_set_device_irq_call__rx_method_fn *set_device_irq_call;
    acpi_set_device_irq_response__rx_method_fn *set_device_irq_response;
    acpi_enable_and_route_interrupt_call__rx_method_fn *enable_and_route_interrupt_call;
    acpi_enable_and_route_interrupt_response__rx_method_fn *enable_and_route_interrupt_response;
    acpi_reset_call__rx_method_fn *reset_call;
    acpi_reset_response__rx_method_fn *reset_response;
    acpi_sleep_call__rx_method_fn *sleep_call;
    acpi_sleep_response__rx_method_fn *sleep_response;
    acpi_get_vbe_bios_cap_call__rx_method_fn *get_vbe_bios_cap_call;
    acpi_get_vbe_bios_cap_response__rx_method_fn *get_vbe_bios_cap_response;
    acpi_mm_alloc_range_proxy_call__rx_method_fn *mm_alloc_range_proxy_call;
    acpi_mm_alloc_range_proxy_response__rx_method_fn *mm_alloc_range_proxy_response;
    acpi_mm_realloc_range_proxy_call__rx_method_fn *mm_realloc_range_proxy_call;
    acpi_mm_realloc_range_proxy_response__rx_method_fn *mm_realloc_range_proxy_response;
    acpi_mm_free_proxy_call__rx_method_fn *mm_free_proxy_call;
    acpi_mm_free_proxy_response__rx_method_fn *mm_free_proxy_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t acpi_connect_fn(void *st, struct acpi_binding *binding);

/*
 * Export state struct
 */
struct acpi_export {
    struct idc_export common;
    acpi_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t acpi_export(void *st, idc_export_callback_fn *export_cb, acpi_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct acpi_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t acpi_accept(struct acpi_frameinfo *_frameinfo, void *st, acpi_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct acpi_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    acpi_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    acpi_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    acpi_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    acpi_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    acpi_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct acpi_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct acpi_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union acpi_arg_union tx_union;
    union acpi_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum acpi_msg_enum tx_msgnum;
    enum acpi_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    acpi_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t acpi_bind(iref_t i, acpi_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t acpi_connect(struct acpi_frameinfo *_frameinfo, acpi_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t acpi_get_pcie_confspace_call__tx(struct acpi_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t acpi_get_pcie_confspace_call__tx(struct acpi_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_pcie_confspace_call)(_binding, _continuation));
}

static inline errval_t acpi_get_pcie_confspace_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err, uint64_t address, uint16_t segment, uint8_t startbus, uint8_t endbus) __attribute__ ((always_inline));
static inline errval_t acpi_get_pcie_confspace_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err, uint64_t address, uint16_t segment, uint8_t startbus, uint8_t endbus)
{
    return(((_binding->tx_vtbl).get_pcie_confspace_response)(_binding, _continuation, err, address, segment, startbus, endbus));
}

static inline errval_t acpi_read_irq_table_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, const char *handle, acpi_pci_address_t addr, uint8_t bus) __attribute__ ((always_inline));
static inline errval_t acpi_read_irq_table_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, const char *handle, acpi_pci_address_t addr, uint8_t bus)
{
    return(((_binding->tx_vtbl).read_irq_table_call)(_binding, _continuation, handle, addr, bus));
}

static inline errval_t acpi_read_irq_table_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t error, const char *child) __attribute__ ((always_inline));
static inline errval_t acpi_read_irq_table_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t error, const char *child)
{
    return(((_binding->tx_vtbl).read_irq_table_response)(_binding, _continuation, error, child));
}

static inline errval_t acpi_set_device_irq_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, const char *handle, uint32_t irq) __attribute__ ((always_inline));
static inline errval_t acpi_set_device_irq_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, const char *handle, uint32_t irq)
{
    return(((_binding->tx_vtbl).set_device_irq_call)(_binding, _continuation, handle, irq));
}

static inline errval_t acpi_set_device_irq_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t error) __attribute__ ((always_inline));
static inline errval_t acpi_set_device_irq_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t error)
{
    return(((_binding->tx_vtbl).set_device_irq_response)(_binding, _continuation, error));
}

static inline errval_t acpi_enable_and_route_interrupt_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, uint32_t gsi, acpi_coreid_t dest, uint32_t vector) __attribute__ ((always_inline));
static inline errval_t acpi_enable_and_route_interrupt_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, uint32_t gsi, acpi_coreid_t dest, uint32_t vector)
{
    return(((_binding->tx_vtbl).enable_and_route_interrupt_call)(_binding, _continuation, gsi, dest, vector));
}

static inline errval_t acpi_enable_and_route_interrupt_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t acpi_enable_and_route_interrupt_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t error_code)
{
    return(((_binding->tx_vtbl).enable_and_route_interrupt_response)(_binding, _continuation, error_code));
}

static inline errval_t acpi_reset_call__tx(struct acpi_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t acpi_reset_call__tx(struct acpi_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).reset_call)(_binding, _continuation));
}

static inline errval_t acpi_reset_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err) __attribute__ ((always_inline));
static inline errval_t acpi_reset_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err)
{
    return(((_binding->tx_vtbl).reset_response)(_binding, _continuation, err));
}

static inline errval_t acpi_sleep_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, uint32_t state) __attribute__ ((always_inline));
static inline errval_t acpi_sleep_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, uint32_t state)
{
    return(((_binding->tx_vtbl).sleep_call)(_binding, _continuation, state));
}

static inline errval_t acpi_sleep_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err) __attribute__ ((always_inline));
static inline errval_t acpi_sleep_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err)
{
    return(((_binding->tx_vtbl).sleep_response)(_binding, _continuation, err));
}

static inline errval_t acpi_get_vbe_bios_cap_call__tx(struct acpi_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t acpi_get_vbe_bios_cap_call__tx(struct acpi_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_vbe_bios_cap_call)(_binding, _continuation));
}

static inline errval_t acpi_get_vbe_bios_cap_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err, struct capref cap, uint32_t size) __attribute__ ((always_inline));
static inline errval_t acpi_get_vbe_bios_cap_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err, struct capref cap, uint32_t size)
{
    return(((_binding->tx_vtbl).get_vbe_bios_cap_response)(_binding, _continuation, err, cap, size));
}

static inline errval_t acpi_mm_alloc_range_proxy_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, uint8_t sizebits, uint64_t minbase, uint64_t maxlimit) __attribute__ ((always_inline));
static inline errval_t acpi_mm_alloc_range_proxy_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, uint8_t sizebits, uint64_t minbase, uint64_t maxlimit)
{
    return(((_binding->tx_vtbl).mm_alloc_range_proxy_call)(_binding, _continuation, sizebits, minbase, maxlimit));
}

static inline errval_t acpi_mm_alloc_range_proxy_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, struct capref devframe, acpi_errval_t err) __attribute__ ((always_inline));
static inline errval_t acpi_mm_alloc_range_proxy_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, struct capref devframe, acpi_errval_t err)
{
    return(((_binding->tx_vtbl).mm_alloc_range_proxy_response)(_binding, _continuation, devframe, err));
}

static inline errval_t acpi_mm_realloc_range_proxy_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, uint8_t sizebits, uint64_t minbase) __attribute__ ((always_inline));
static inline errval_t acpi_mm_realloc_range_proxy_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, uint8_t sizebits, uint64_t minbase)
{
    return(((_binding->tx_vtbl).mm_realloc_range_proxy_call)(_binding, _continuation, sizebits, minbase));
}

static inline errval_t acpi_mm_realloc_range_proxy_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, struct capref devframe, acpi_errval_t err) __attribute__ ((always_inline));
static inline errval_t acpi_mm_realloc_range_proxy_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, struct capref devframe, acpi_errval_t err)
{
    return(((_binding->tx_vtbl).mm_realloc_range_proxy_response)(_binding, _continuation, devframe, err));
}

static inline errval_t acpi_mm_free_proxy_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, struct capref devframe, uint64_t base, uint8_t sizebits) __attribute__ ((always_inline));
static inline errval_t acpi_mm_free_proxy_call__tx(struct acpi_binding *_binding, struct event_closure _continuation, struct capref devframe, uint64_t base, uint8_t sizebits)
{
    return(((_binding->tx_vtbl).mm_free_proxy_call)(_binding, _continuation, devframe, base, sizebits));
}

static inline errval_t acpi_mm_free_proxy_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err) __attribute__ ((always_inline));
static inline errval_t acpi_mm_free_proxy_response__tx(struct acpi_binding *_binding, struct event_closure _continuation, acpi_errval_t err)
{
    return(((_binding->tx_vtbl).mm_free_proxy_response)(_binding, _continuation, err));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/acpi_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/acpi_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/acpi_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/acpi_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __acpi_IF_H
