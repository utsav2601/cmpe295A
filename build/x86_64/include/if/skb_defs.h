#ifndef __skb_IF_H
#define __skb_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: skb
 * INTEFACE FILE: ../if/skb.if
 * INTERFACE DESCRIPTION: SKB RPC Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t skb_genpaddr_t;
typedef uint64_t skb_genvaddr_t;
typedef uint32_t skb_rsrcid_t;
typedef uint64_t skb_errval_t;
typedef uint64_t skb_cycles_t;
typedef uint32_t skb_iref_t;
typedef uint8_t skb_coreid_t;
typedef uint32_t skb_domainid_t;

/*
 * Forward declaration of binding type
 */
struct skb_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void skb_bind_continuation_fn(void *st, errval_t err, struct skb_binding *_binding);
typedef  bool skb_can_send_fn(struct skb_binding *_binding);
typedef  errval_t skb_register_send_fn(struct skb_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t skb_change_waitset_fn(struct skb_binding *_binding, struct waitset *ws);
typedef  errval_t skb_control_fn(struct skb_binding *_binding, idc_control_t control);
typedef  void skb_error_handler_fn(struct skb_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum skb_msg_enum {
    skb___dummy__msgnum = 0,
    skb___bind__msgnum = 1,
    skb___bind_reply__msgnum = 2,
    skb_run_call__msgnum = 3,
    skb_run_response__msgnum = 4,
    skb_get_identifier_call__msgnum = 5,
    skb_get_identifier_response__msgnum = 6,
    skb_identify_call__msgnum = 7,
    skb_identify_response__msgnum = 8,
    skb_get_call__msgnum = 9,
    skb_get_response__msgnum = 10,
    skb_set_call__msgnum = 11,
    skb_set_response__msgnum = 12,
    skb_del_call__msgnum = 13,
    skb_del_response__msgnum = 14,
    skb_subscribe_call__msgnum = 15,
    skb_subscribe_response__msgnum = 16,
    skb_unsubscribe_call__msgnum = 17,
    skb_unsubscribe_response__msgnum = 18,
    skb_publish_call__msgnum = 19,
    skb_publish_response__msgnum = 20,
    skb_lock_call__msgnum = 21,
    skb_lock_response__msgnum = 22,
    skb_unlock_call__msgnum = 23,
    skb_unlock_response__msgnum = 24
} skb_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t skb_run_call__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, const char *input);
typedef  errval_t skb_run_response__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, const char *output, const char *str_error, int32_t int_error);
typedef  errval_t skb_get_identifier_call__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation);
typedef  errval_t skb_get_identifier_response__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, uint64_t id);
typedef  errval_t skb_identify_call__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, uint64_t id);
typedef  errval_t skb_identify_response__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation);
typedef  errval_t skb_get_call__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, const char *query);
typedef  errval_t skb_get_response__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, const char *output, const char *error, skb_errval_t error_code);
typedef  errval_t skb_set_call__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, const char *input);
typedef  errval_t skb_set_response__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, const char *error, skb_errval_t error_code);
typedef  errval_t skb_del_call__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, const char *query);
typedef  errval_t skb_del_response__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t error_code);
typedef  errval_t skb_subscribe_call__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, const char *query, uint64_t id);
typedef  errval_t skb_subscribe_response__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err);
typedef  errval_t skb_unsubscribe_call__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, uint64_t id);
typedef  errval_t skb_unsubscribe_response__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err);
typedef  errval_t skb_publish_call__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, const char *object);
typedef  errval_t skb_publish_response__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err);
typedef  errval_t skb_lock_call__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, const char *object);
typedef  errval_t skb_lock_response__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err);
typedef  errval_t skb_unlock_call__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, const char *object);
typedef  errval_t skb_unlock_response__tx_method_fn(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err);

/*
 * Message type signatures (receive)
 */
typedef  void skb_run_call__rx_method_fn(struct skb_binding *_binding, char *input);
typedef  void skb_run_response__rx_method_fn(struct skb_binding *_binding, char *output, char *str_error, int32_t int_error);
typedef  void skb_get_identifier_call__rx_method_fn(struct skb_binding *_binding);
typedef  void skb_get_identifier_response__rx_method_fn(struct skb_binding *_binding, uint64_t id);
typedef  void skb_identify_call__rx_method_fn(struct skb_binding *_binding, uint64_t id);
typedef  void skb_identify_response__rx_method_fn(struct skb_binding *_binding);
typedef  void skb_get_call__rx_method_fn(struct skb_binding *_binding, char *query);
typedef  void skb_get_response__rx_method_fn(struct skb_binding *_binding, char *output, char *error, skb_errval_t error_code);
typedef  void skb_set_call__rx_method_fn(struct skb_binding *_binding, char *input);
typedef  void skb_set_response__rx_method_fn(struct skb_binding *_binding, char *error, skb_errval_t error_code);
typedef  void skb_del_call__rx_method_fn(struct skb_binding *_binding, char *query);
typedef  void skb_del_response__rx_method_fn(struct skb_binding *_binding, skb_errval_t error_code);
typedef  void skb_subscribe_call__rx_method_fn(struct skb_binding *_binding, char *query, uint64_t id);
typedef  void skb_subscribe_response__rx_method_fn(struct skb_binding *_binding, skb_errval_t err);
typedef  void skb_unsubscribe_call__rx_method_fn(struct skb_binding *_binding, uint64_t id);
typedef  void skb_unsubscribe_response__rx_method_fn(struct skb_binding *_binding, skb_errval_t err);
typedef  void skb_publish_call__rx_method_fn(struct skb_binding *_binding, char *object);
typedef  void skb_publish_response__rx_method_fn(struct skb_binding *_binding, skb_errval_t err);
typedef  void skb_lock_call__rx_method_fn(struct skb_binding *_binding, char *object);
typedef  void skb_lock_response__rx_method_fn(struct skb_binding *_binding, skb_errval_t err);
typedef  void skb_unlock_call__rx_method_fn(struct skb_binding *_binding, char *object);
typedef  void skb_unlock_response__rx_method_fn(struct skb_binding *_binding, skb_errval_t err);

/*
 * Struct type for holding the args for each msg
 */
struct skb_run_call__args {
    char *input;
};
struct skb_run_response__args {
    char *output;
    char *str_error;
    int32_t int_error;
};
struct skb_get_identifier_response__args {
    uint64_t id;
};
struct skb_identify_call__args {
    uint64_t id;
};
struct skb_get_call__args {
    char *query;
};
struct skb_get_response__args {
    char *output;
    char *error;
    skb_errval_t error_code;
};
struct skb_set_call__args {
    char *input;
};
struct skb_set_response__args {
    char *error;
    skb_errval_t error_code;
};
struct skb_del_call__args {
    char *query;
};
struct skb_del_response__args {
    skb_errval_t error_code;
};
struct skb_subscribe_call__args {
    char *query;
    uint64_t id;
};
struct skb_subscribe_response__args {
    skb_errval_t err;
};
struct skb_unsubscribe_call__args {
    uint64_t id;
};
struct skb_unsubscribe_response__args {
    skb_errval_t err;
};
struct skb_publish_call__args {
    char *object;
};
struct skb_publish_response__args {
    skb_errval_t err;
};
struct skb_lock_call__args {
    char *object;
};
struct skb_lock_response__args {
    skb_errval_t err;
};
struct skb_unlock_call__args {
    char *object;
};
struct skb_unlock_response__args {
    skb_errval_t err;
};

/*
 * Union type for all message arguments
 */
union skb_arg_union {
    struct skb_run_call__args run_call;
    struct skb_run_response__args run_response;
    struct skb_get_identifier_response__args get_identifier_response;
    struct skb_identify_call__args identify_call;
    struct skb_get_call__args get_call;
    struct skb_get_response__args get_response;
    struct skb_set_call__args set_call;
    struct skb_set_response__args set_response;
    struct skb_del_call__args del_call;
    struct skb_del_response__args del_response;
    struct skb_subscribe_call__args subscribe_call;
    struct skb_subscribe_response__args subscribe_response;
    struct skb_unsubscribe_call__args unsubscribe_call;
    struct skb_unsubscribe_response__args unsubscribe_response;
    struct skb_publish_call__args publish_call;
    struct skb_publish_response__args publish_response;
    struct skb_lock_call__args lock_call;
    struct skb_lock_response__args lock_response;
    struct skb_unlock_call__args unlock_call;
    struct skb_unlock_response__args unlock_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct skb_tx_vtbl {
    skb_run_call__tx_method_fn *run_call;
    skb_run_response__tx_method_fn *run_response;
    skb_get_identifier_call__tx_method_fn *get_identifier_call;
    skb_get_identifier_response__tx_method_fn *get_identifier_response;
    skb_identify_call__tx_method_fn *identify_call;
    skb_identify_response__tx_method_fn *identify_response;
    skb_get_call__tx_method_fn *get_call;
    skb_get_response__tx_method_fn *get_response;
    skb_set_call__tx_method_fn *set_call;
    skb_set_response__tx_method_fn *set_response;
    skb_del_call__tx_method_fn *del_call;
    skb_del_response__tx_method_fn *del_response;
    skb_subscribe_call__tx_method_fn *subscribe_call;
    skb_subscribe_response__tx_method_fn *subscribe_response;
    skb_unsubscribe_call__tx_method_fn *unsubscribe_call;
    skb_unsubscribe_response__tx_method_fn *unsubscribe_response;
    skb_publish_call__tx_method_fn *publish_call;
    skb_publish_response__tx_method_fn *publish_response;
    skb_lock_call__tx_method_fn *lock_call;
    skb_lock_response__tx_method_fn *lock_response;
    skb_unlock_call__tx_method_fn *unlock_call;
    skb_unlock_response__tx_method_fn *unlock_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct skb_rx_vtbl {
    skb_run_call__rx_method_fn *run_call;
    skb_run_response__rx_method_fn *run_response;
    skb_get_identifier_call__rx_method_fn *get_identifier_call;
    skb_get_identifier_response__rx_method_fn *get_identifier_response;
    skb_identify_call__rx_method_fn *identify_call;
    skb_identify_response__rx_method_fn *identify_response;
    skb_get_call__rx_method_fn *get_call;
    skb_get_response__rx_method_fn *get_response;
    skb_set_call__rx_method_fn *set_call;
    skb_set_response__rx_method_fn *set_response;
    skb_del_call__rx_method_fn *del_call;
    skb_del_response__rx_method_fn *del_response;
    skb_subscribe_call__rx_method_fn *subscribe_call;
    skb_subscribe_response__rx_method_fn *subscribe_response;
    skb_unsubscribe_call__rx_method_fn *unsubscribe_call;
    skb_unsubscribe_response__rx_method_fn *unsubscribe_response;
    skb_publish_call__rx_method_fn *publish_call;
    skb_publish_response__rx_method_fn *publish_response;
    skb_lock_call__rx_method_fn *lock_call;
    skb_lock_response__rx_method_fn *lock_response;
    skb_unlock_call__rx_method_fn *unlock_call;
    skb_unlock_response__rx_method_fn *unlock_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t skb_connect_fn(void *st, struct skb_binding *binding);

/*
 * Export state struct
 */
struct skb_export {
    struct idc_export common;
    skb_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t skb_export(void *st, idc_export_callback_fn *export_cb, skb_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct skb_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t skb_accept(struct skb_frameinfo *_frameinfo, void *st, skb_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct skb_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    skb_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    skb_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    skb_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    skb_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    skb_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct skb_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct skb_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union skb_arg_union tx_union;
    union skb_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum skb_msg_enum tx_msgnum;
    enum skb_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    skb_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t skb_bind(iref_t i, skb_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t skb_connect(struct skb_frameinfo *_frameinfo, skb_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t skb_run_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *input) __attribute__ ((always_inline));
static inline errval_t skb_run_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *input)
{
    return(((_binding->tx_vtbl).run_call)(_binding, _continuation, input));
}

static inline errval_t skb_run_response__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *output, const char *str_error, int32_t int_error) __attribute__ ((always_inline));
static inline errval_t skb_run_response__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *output, const char *str_error, int32_t int_error)
{
    return(((_binding->tx_vtbl).run_response)(_binding, _continuation, output, str_error, int_error));
}

static inline errval_t skb_get_identifier_call__tx(struct skb_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t skb_get_identifier_call__tx(struct skb_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_identifier_call)(_binding, _continuation));
}

static inline errval_t skb_get_identifier_response__tx(struct skb_binding *_binding, struct event_closure _continuation, uint64_t id) __attribute__ ((always_inline));
static inline errval_t skb_get_identifier_response__tx(struct skb_binding *_binding, struct event_closure _continuation, uint64_t id)
{
    return(((_binding->tx_vtbl).get_identifier_response)(_binding, _continuation, id));
}

static inline errval_t skb_identify_call__tx(struct skb_binding *_binding, struct event_closure _continuation, uint64_t id) __attribute__ ((always_inline));
static inline errval_t skb_identify_call__tx(struct skb_binding *_binding, struct event_closure _continuation, uint64_t id)
{
    return(((_binding->tx_vtbl).identify_call)(_binding, _continuation, id));
}

static inline errval_t skb_identify_response__tx(struct skb_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t skb_identify_response__tx(struct skb_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).identify_response)(_binding, _continuation));
}

static inline errval_t skb_get_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *query) __attribute__ ((always_inline));
static inline errval_t skb_get_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *query)
{
    return(((_binding->tx_vtbl).get_call)(_binding, _continuation, query));
}

static inline errval_t skb_get_response__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *output, const char *error, skb_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t skb_get_response__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *output, const char *error, skb_errval_t error_code)
{
    return(((_binding->tx_vtbl).get_response)(_binding, _continuation, output, error, error_code));
}

static inline errval_t skb_set_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *input) __attribute__ ((always_inline));
static inline errval_t skb_set_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *input)
{
    return(((_binding->tx_vtbl).set_call)(_binding, _continuation, input));
}

static inline errval_t skb_set_response__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *error, skb_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t skb_set_response__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *error, skb_errval_t error_code)
{
    return(((_binding->tx_vtbl).set_response)(_binding, _continuation, error, error_code));
}

static inline errval_t skb_del_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *query) __attribute__ ((always_inline));
static inline errval_t skb_del_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *query)
{
    return(((_binding->tx_vtbl).del_call)(_binding, _continuation, query));
}

static inline errval_t skb_del_response__tx(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t skb_del_response__tx(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t error_code)
{
    return(((_binding->tx_vtbl).del_response)(_binding, _continuation, error_code));
}

static inline errval_t skb_subscribe_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *query, uint64_t id) __attribute__ ((always_inline));
static inline errval_t skb_subscribe_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *query, uint64_t id)
{
    return(((_binding->tx_vtbl).subscribe_call)(_binding, _continuation, query, id));
}

static inline errval_t skb_subscribe_response__tx(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err) __attribute__ ((always_inline));
static inline errval_t skb_subscribe_response__tx(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err)
{
    return(((_binding->tx_vtbl).subscribe_response)(_binding, _continuation, err));
}

static inline errval_t skb_unsubscribe_call__tx(struct skb_binding *_binding, struct event_closure _continuation, uint64_t id) __attribute__ ((always_inline));
static inline errval_t skb_unsubscribe_call__tx(struct skb_binding *_binding, struct event_closure _continuation, uint64_t id)
{
    return(((_binding->tx_vtbl).unsubscribe_call)(_binding, _continuation, id));
}

static inline errval_t skb_unsubscribe_response__tx(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err) __attribute__ ((always_inline));
static inline errval_t skb_unsubscribe_response__tx(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err)
{
    return(((_binding->tx_vtbl).unsubscribe_response)(_binding, _continuation, err));
}

static inline errval_t skb_publish_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *object) __attribute__ ((always_inline));
static inline errval_t skb_publish_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *object)
{
    return(((_binding->tx_vtbl).publish_call)(_binding, _continuation, object));
}

static inline errval_t skb_publish_response__tx(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err) __attribute__ ((always_inline));
static inline errval_t skb_publish_response__tx(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err)
{
    return(((_binding->tx_vtbl).publish_response)(_binding, _continuation, err));
}

static inline errval_t skb_lock_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *object) __attribute__ ((always_inline));
static inline errval_t skb_lock_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *object)
{
    return(((_binding->tx_vtbl).lock_call)(_binding, _continuation, object));
}

static inline errval_t skb_lock_response__tx(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err) __attribute__ ((always_inline));
static inline errval_t skb_lock_response__tx(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err)
{
    return(((_binding->tx_vtbl).lock_response)(_binding, _continuation, err));
}

static inline errval_t skb_unlock_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *object) __attribute__ ((always_inline));
static inline errval_t skb_unlock_call__tx(struct skb_binding *_binding, struct event_closure _continuation, const char *object)
{
    return(((_binding->tx_vtbl).unlock_call)(_binding, _continuation, object));
}

static inline errval_t skb_unlock_response__tx(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err) __attribute__ ((always_inline));
static inline errval_t skb_unlock_response__tx(struct skb_binding *_binding, struct event_closure _continuation, skb_errval_t err)
{
    return(((_binding->tx_vtbl).unlock_response)(_binding, _continuation, err));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/skb_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/skb_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/skb_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/skb_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __skb_IF_H
