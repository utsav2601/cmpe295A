#ifndef __e10k_IF_H
#define __e10k_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: e10k
 * INTEFACE FILE: ../if/e10k.if
 * INTERFACE DESCRIPTION: e10k queue management interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t e10k_genpaddr_t;
typedef uint64_t e10k_genvaddr_t;
typedef uint32_t e10k_rsrcid_t;
typedef uint64_t e10k_errval_t;
typedef uint64_t e10k_cycles_t;
typedef uint32_t e10k_iref_t;
typedef uint8_t e10k_coreid_t;
typedef uint32_t e10k_domainid_t;
typedef enum e10k_port_type_t {
    e10k_PORT_TCP,
    e10k_PORT_UDP
} e10k_port_type_t;
typedef uint8_t e10k_qid_t;

/*
 * Forward declaration of binding type
 */
struct e10k_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void e10k_bind_continuation_fn(void *st, errval_t err, struct e10k_binding *_binding);
typedef  bool e10k_can_send_fn(struct e10k_binding *_binding);
typedef  errval_t e10k_register_send_fn(struct e10k_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t e10k_change_waitset_fn(struct e10k_binding *_binding, struct waitset *ws);
typedef  errval_t e10k_control_fn(struct e10k_binding *_binding, idc_control_t control);
typedef  void e10k_error_handler_fn(struct e10k_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum e10k_msg_enum {
    e10k___dummy__msgnum = 0,
    e10k___bind__msgnum = 1,
    e10k___bind_reply__msgnum = 2,
    e10k_request_device_info__msgnum = 3,
    e10k_queue_init_data__msgnum = 4,
    e10k_register_queue_memory__msgnum = 5,
    e10k_queue_memory_registered__msgnum = 6,
    e10k_set_interrupt_rate__msgnum = 7,
    e10k_write_queue_tails__msgnum = 8,
    e10k_terminate_queue__msgnum = 9,
    e10k_queue_terminated__msgnum = 10,
    e10k_register_port_filter__msgnum = 11,
    e10k_filter_registered__msgnum = 12,
    e10k_unregister_filter__msgnum = 13,
    e10k_filter_unregistered__msgnum = 14
} e10k_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t e10k_request_device_info__tx_method_fn(struct e10k_binding *_binding, struct event_closure _continuation);
typedef  errval_t e10k_queue_init_data__tx_method_fn(struct e10k_binding *_binding, struct event_closure _continuation, struct capref registers, uint64_t macaddr);
typedef  errval_t e10k_register_queue_memory__tx_method_fn(struct e10k_binding *_binding, struct event_closure _continuation, e10k_qid_t id, struct capref tx, struct capref txhwb, struct capref rx, uint32_t rxbufsz, uint32_t rxhdrsz, int16_t msix_intvec, uint8_t msix_intdest, bool use_irq, bool use_rsc);
typedef  errval_t e10k_queue_memory_registered__tx_method_fn(struct e10k_binding *_binding, struct event_closure _continuation);
typedef  errval_t e10k_set_interrupt_rate__tx_method_fn(struct e10k_binding *_binding, struct event_closure _continuation, e10k_qid_t id, uint16_t rate);
typedef  errval_t e10k_write_queue_tails__tx_method_fn(struct e10k_binding *_binding, struct event_closure _continuation);
typedef  errval_t e10k_terminate_queue__tx_method_fn(struct e10k_binding *_binding, struct event_closure _continuation, e10k_qid_t id);
typedef  errval_t e10k_queue_terminated__tx_method_fn(struct e10k_binding *_binding, struct event_closure _continuation);
typedef  errval_t e10k_register_port_filter__tx_method_fn(struct e10k_binding *_binding, struct event_closure _continuation, uint64_t buf_id_rx, uint64_t buf_id_tx, e10k_qid_t queue, e10k_port_type_t type, uint16_t port);
typedef  errval_t e10k_filter_registered__tx_method_fn(struct e10k_binding *_binding, struct event_closure _continuation, uint64_t buf_id_rx, uint64_t buf_id_tx, e10k_errval_t err, uint64_t filter);
typedef  errval_t e10k_unregister_filter__tx_method_fn(struct e10k_binding *_binding, struct event_closure _continuation, uint64_t filter);
typedef  errval_t e10k_filter_unregistered__tx_method_fn(struct e10k_binding *_binding, struct event_closure _continuation, uint64_t filter, e10k_errval_t err);

/*
 * Message type signatures (receive)
 */
typedef  void e10k_request_device_info__rx_method_fn(struct e10k_binding *_binding);
typedef  void e10k_queue_init_data__rx_method_fn(struct e10k_binding *_binding, struct capref registers, uint64_t macaddr);
typedef  void e10k_register_queue_memory__rx_method_fn(struct e10k_binding *_binding, e10k_qid_t id, struct capref tx, struct capref txhwb, struct capref rx, uint32_t rxbufsz, uint32_t rxhdrsz, int16_t msix_intvec, uint8_t msix_intdest, bool use_irq, bool use_rsc);
typedef  void e10k_queue_memory_registered__rx_method_fn(struct e10k_binding *_binding);
typedef  void e10k_set_interrupt_rate__rx_method_fn(struct e10k_binding *_binding, e10k_qid_t id, uint16_t rate);
typedef  void e10k_write_queue_tails__rx_method_fn(struct e10k_binding *_binding);
typedef  void e10k_terminate_queue__rx_method_fn(struct e10k_binding *_binding, e10k_qid_t id);
typedef  void e10k_queue_terminated__rx_method_fn(struct e10k_binding *_binding);
typedef  void e10k_register_port_filter__rx_method_fn(struct e10k_binding *_binding, uint64_t buf_id_rx, uint64_t buf_id_tx, e10k_qid_t queue, e10k_port_type_t type, uint16_t port);
typedef  void e10k_filter_registered__rx_method_fn(struct e10k_binding *_binding, uint64_t buf_id_rx, uint64_t buf_id_tx, e10k_errval_t err, uint64_t filter);
typedef  void e10k_unregister_filter__rx_method_fn(struct e10k_binding *_binding, uint64_t filter);
typedef  void e10k_filter_unregistered__rx_method_fn(struct e10k_binding *_binding, uint64_t filter, e10k_errval_t err);

/*
 * Struct type for holding the args for each msg
 */
struct e10k_queue_init_data__args {
    struct capref registers;
    uint64_t macaddr;
};
struct e10k_register_queue_memory__args {
    e10k_qid_t id;
    struct capref tx;
    struct capref txhwb;
    struct capref rx;
    uint32_t rxbufsz;
    uint32_t rxhdrsz;
    int16_t msix_intvec;
    uint8_t msix_intdest;
    bool use_irq;
    bool use_rsc;
};
struct e10k_set_interrupt_rate__args {
    e10k_qid_t id;
    uint16_t rate;
};
struct e10k_terminate_queue__args {
    e10k_qid_t id;
};
struct e10k_register_port_filter__args {
    uint64_t buf_id_rx;
    uint64_t buf_id_tx;
    e10k_qid_t queue;
    e10k_port_type_t type;
    uint16_t port;
};
struct e10k_filter_registered__args {
    uint64_t buf_id_rx;
    uint64_t buf_id_tx;
    e10k_errval_t err;
    uint64_t filter;
};
struct e10k_unregister_filter__args {
    uint64_t filter;
};
struct e10k_filter_unregistered__args {
    uint64_t filter;
    e10k_errval_t err;
};

/*
 * Union type for all message arguments
 */
union e10k_arg_union {
    struct e10k_queue_init_data__args queue_init_data;
    struct e10k_register_queue_memory__args register_queue_memory;
    struct e10k_set_interrupt_rate__args set_interrupt_rate;
    struct e10k_terminate_queue__args terminate_queue;
    struct e10k_register_port_filter__args register_port_filter;
    struct e10k_filter_registered__args filter_registered;
    struct e10k_unregister_filter__args unregister_filter;
    struct e10k_filter_unregistered__args filter_unregistered;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct e10k_tx_vtbl {
    e10k_request_device_info__tx_method_fn *request_device_info;
    e10k_queue_init_data__tx_method_fn *queue_init_data;
    e10k_register_queue_memory__tx_method_fn *register_queue_memory;
    e10k_queue_memory_registered__tx_method_fn *queue_memory_registered;
    e10k_set_interrupt_rate__tx_method_fn *set_interrupt_rate;
    e10k_write_queue_tails__tx_method_fn *write_queue_tails;
    e10k_terminate_queue__tx_method_fn *terminate_queue;
    e10k_queue_terminated__tx_method_fn *queue_terminated;
    e10k_register_port_filter__tx_method_fn *register_port_filter;
    e10k_filter_registered__tx_method_fn *filter_registered;
    e10k_unregister_filter__tx_method_fn *unregister_filter;
    e10k_filter_unregistered__tx_method_fn *filter_unregistered;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct e10k_rx_vtbl {
    e10k_request_device_info__rx_method_fn *request_device_info;
    e10k_queue_init_data__rx_method_fn *queue_init_data;
    e10k_register_queue_memory__rx_method_fn *register_queue_memory;
    e10k_queue_memory_registered__rx_method_fn *queue_memory_registered;
    e10k_set_interrupt_rate__rx_method_fn *set_interrupt_rate;
    e10k_write_queue_tails__rx_method_fn *write_queue_tails;
    e10k_terminate_queue__rx_method_fn *terminate_queue;
    e10k_queue_terminated__rx_method_fn *queue_terminated;
    e10k_register_port_filter__rx_method_fn *register_port_filter;
    e10k_filter_registered__rx_method_fn *filter_registered;
    e10k_unregister_filter__rx_method_fn *unregister_filter;
    e10k_filter_unregistered__rx_method_fn *filter_unregistered;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t e10k_connect_fn(void *st, struct e10k_binding *binding);

/*
 * Export state struct
 */
struct e10k_export {
    struct idc_export common;
    e10k_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t e10k_export(void *st, idc_export_callback_fn *export_cb, e10k_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct e10k_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t e10k_accept(struct e10k_frameinfo *_frameinfo, void *st, e10k_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct e10k_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    e10k_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    e10k_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    e10k_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    e10k_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    e10k_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct e10k_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct e10k_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union e10k_arg_union tx_union;
    union e10k_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum e10k_msg_enum tx_msgnum;
    enum e10k_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    e10k_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t e10k_bind(iref_t i, e10k_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t e10k_connect(struct e10k_frameinfo *_frameinfo, e10k_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t e10k_request_device_info__tx(struct e10k_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t e10k_request_device_info__tx(struct e10k_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).request_device_info)(_binding, _continuation));
}

static inline errval_t e10k_queue_init_data__tx(struct e10k_binding *_binding, struct event_closure _continuation, struct capref registers, uint64_t macaddr) __attribute__ ((always_inline));
static inline errval_t e10k_queue_init_data__tx(struct e10k_binding *_binding, struct event_closure _continuation, struct capref registers, uint64_t macaddr)
{
    return(((_binding->tx_vtbl).queue_init_data)(_binding, _continuation, registers, macaddr));
}

static inline errval_t e10k_register_queue_memory__tx(struct e10k_binding *_binding, struct event_closure _continuation, e10k_qid_t id, struct capref tx, struct capref txhwb, struct capref rx, uint32_t rxbufsz, uint32_t rxhdrsz, int16_t msix_intvec, uint8_t msix_intdest, bool use_irq, bool use_rsc) __attribute__ ((always_inline));
static inline errval_t e10k_register_queue_memory__tx(struct e10k_binding *_binding, struct event_closure _continuation, e10k_qid_t id, struct capref tx, struct capref txhwb, struct capref rx, uint32_t rxbufsz, uint32_t rxhdrsz, int16_t msix_intvec, uint8_t msix_intdest, bool use_irq, bool use_rsc)
{
    return(((_binding->tx_vtbl).register_queue_memory)(_binding, _continuation, id, tx, txhwb, rx, rxbufsz, rxhdrsz, msix_intvec, msix_intdest, use_irq, use_rsc));
}

static inline errval_t e10k_queue_memory_registered__tx(struct e10k_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t e10k_queue_memory_registered__tx(struct e10k_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).queue_memory_registered)(_binding, _continuation));
}

static inline errval_t e10k_set_interrupt_rate__tx(struct e10k_binding *_binding, struct event_closure _continuation, e10k_qid_t id, uint16_t rate) __attribute__ ((always_inline));
static inline errval_t e10k_set_interrupt_rate__tx(struct e10k_binding *_binding, struct event_closure _continuation, e10k_qid_t id, uint16_t rate)
{
    return(((_binding->tx_vtbl).set_interrupt_rate)(_binding, _continuation, id, rate));
}

static inline errval_t e10k_write_queue_tails__tx(struct e10k_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t e10k_write_queue_tails__tx(struct e10k_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).write_queue_tails)(_binding, _continuation));
}

static inline errval_t e10k_terminate_queue__tx(struct e10k_binding *_binding, struct event_closure _continuation, e10k_qid_t id) __attribute__ ((always_inline));
static inline errval_t e10k_terminate_queue__tx(struct e10k_binding *_binding, struct event_closure _continuation, e10k_qid_t id)
{
    return(((_binding->tx_vtbl).terminate_queue)(_binding, _continuation, id));
}

static inline errval_t e10k_queue_terminated__tx(struct e10k_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t e10k_queue_terminated__tx(struct e10k_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).queue_terminated)(_binding, _continuation));
}

static inline errval_t e10k_register_port_filter__tx(struct e10k_binding *_binding, struct event_closure _continuation, uint64_t buf_id_rx, uint64_t buf_id_tx, e10k_qid_t queue, e10k_port_type_t type, uint16_t port) __attribute__ ((always_inline));
static inline errval_t e10k_register_port_filter__tx(struct e10k_binding *_binding, struct event_closure _continuation, uint64_t buf_id_rx, uint64_t buf_id_tx, e10k_qid_t queue, e10k_port_type_t type, uint16_t port)
{
    return(((_binding->tx_vtbl).register_port_filter)(_binding, _continuation, buf_id_rx, buf_id_tx, queue, type, port));
}

static inline errval_t e10k_filter_registered__tx(struct e10k_binding *_binding, struct event_closure _continuation, uint64_t buf_id_rx, uint64_t buf_id_tx, e10k_errval_t err, uint64_t filter) __attribute__ ((always_inline));
static inline errval_t e10k_filter_registered__tx(struct e10k_binding *_binding, struct event_closure _continuation, uint64_t buf_id_rx, uint64_t buf_id_tx, e10k_errval_t err, uint64_t filter)
{
    return(((_binding->tx_vtbl).filter_registered)(_binding, _continuation, buf_id_rx, buf_id_tx, err, filter));
}

static inline errval_t e10k_unregister_filter__tx(struct e10k_binding *_binding, struct event_closure _continuation, uint64_t filter) __attribute__ ((always_inline));
static inline errval_t e10k_unregister_filter__tx(struct e10k_binding *_binding, struct event_closure _continuation, uint64_t filter)
{
    return(((_binding->tx_vtbl).unregister_filter)(_binding, _continuation, filter));
}

static inline errval_t e10k_filter_unregistered__tx(struct e10k_binding *_binding, struct event_closure _continuation, uint64_t filter, e10k_errval_t err) __attribute__ ((always_inline));
static inline errval_t e10k_filter_unregistered__tx(struct e10k_binding *_binding, struct event_closure _continuation, uint64_t filter, e10k_errval_t err)
{
    return(((_binding->tx_vtbl).filter_unregistered)(_binding, _continuation, filter, err));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/e10k_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/e10k_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/e10k_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/e10k_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __e10k_IF_H
