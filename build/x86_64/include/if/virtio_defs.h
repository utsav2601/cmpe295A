#ifndef __virtio_IF_H
#define __virtio_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: virtio
 * INTEFACE FILE: ../if/virtio.if
 * INTERFACE DESCRIPTION: VirtIO Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t virtio_genpaddr_t;
typedef uint64_t virtio_genvaddr_t;
typedef uint32_t virtio_rsrcid_t;
typedef uint64_t virtio_errval_t;
typedef uint64_t virtio_cycles_t;
typedef uint32_t virtio_iref_t;
typedef uint8_t virtio_coreid_t;
typedef uint32_t virtio_domainid_t;

/*
 * Forward declaration of binding type
 */
struct virtio_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void virtio_bind_continuation_fn(void *st, errval_t err, struct virtio_binding *_binding);
typedef  bool virtio_can_send_fn(struct virtio_binding *_binding);
typedef  errval_t virtio_register_send_fn(struct virtio_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t virtio_change_waitset_fn(struct virtio_binding *_binding, struct waitset *ws);
typedef  errval_t virtio_control_fn(struct virtio_binding *_binding, idc_control_t control);
typedef  void virtio_error_handler_fn(struct virtio_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum virtio_msg_enum {
    virtio___dummy__msgnum = 0,
    virtio___bind__msgnum = 1,
    virtio___bind_reply__msgnum = 2,
    virtio_open_call__msgnum = 3,
    virtio_open_response__msgnum = 4,
    virtio_close_call__msgnum = 5,
    virtio_close_response__msgnum = 6,
    virtio_add_call__msgnum = 7,
    virtio_add_response__msgnum = 8,
    virtio_extend_call__msgnum = 9,
    virtio_extend_response__msgnum = 10,
    virtio_req_call__msgnum = 11,
    virtio_req_response__msgnum = 12
} virtio_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t virtio_open_call__tx_method_fn(struct virtio_binding *_binding, struct event_closure _continuation, uint8_t backend);
typedef  errval_t virtio_open_response__tx_method_fn(struct virtio_binding *_binding, struct event_closure _continuation, virtio_errval_t err, struct capref devframe);
typedef  errval_t virtio_close_call__tx_method_fn(struct virtio_binding *_binding, struct event_closure _continuation);
typedef  errval_t virtio_close_response__tx_method_fn(struct virtio_binding *_binding, struct event_closure _continuation);
typedef  errval_t virtio_add_call__tx_method_fn(struct virtio_binding *_binding, struct event_closure _continuation, uint16_t vq_id, uint16_t ndesc, uint8_t has_buffers, struct capref vring);
typedef  errval_t virtio_add_response__tx_method_fn(struct virtio_binding *_binding, struct event_closure _continuation, virtio_errval_t err);
typedef  errval_t virtio_extend_call__tx_method_fn(struct virtio_binding *_binding, struct event_closure _continuation, uint16_t vq_id, struct capref vbuf);
typedef  errval_t virtio_extend_response__tx_method_fn(struct virtio_binding *_binding, struct event_closure _continuation, virtio_errval_t err);
typedef  errval_t virtio_req_call__tx_method_fn(struct virtio_binding *_binding, struct event_closure _continuation, uint64_t size);
typedef  errval_t virtio_req_response__tx_method_fn(struct virtio_binding *_binding, struct event_closure _continuation, virtio_errval_t err, struct capref vring);

/*
 * Message type signatures (receive)
 */
typedef  void virtio_open_call__rx_method_fn(struct virtio_binding *_binding, uint8_t backend);
typedef  void virtio_open_response__rx_method_fn(struct virtio_binding *_binding, virtio_errval_t err, struct capref devframe);
typedef  void virtio_close_call__rx_method_fn(struct virtio_binding *_binding);
typedef  void virtio_close_response__rx_method_fn(struct virtio_binding *_binding);
typedef  void virtio_add_call__rx_method_fn(struct virtio_binding *_binding, uint16_t vq_id, uint16_t ndesc, uint8_t has_buffers, struct capref vring);
typedef  void virtio_add_response__rx_method_fn(struct virtio_binding *_binding, virtio_errval_t err);
typedef  void virtio_extend_call__rx_method_fn(struct virtio_binding *_binding, uint16_t vq_id, struct capref vbuf);
typedef  void virtio_extend_response__rx_method_fn(struct virtio_binding *_binding, virtio_errval_t err);
typedef  void virtio_req_call__rx_method_fn(struct virtio_binding *_binding, uint64_t size);
typedef  void virtio_req_response__rx_method_fn(struct virtio_binding *_binding, virtio_errval_t err, struct capref vring);

/*
 * Struct type for holding the args for each msg
 */
struct virtio_open_call__args {
    uint8_t backend;
};
struct virtio_open_response__args {
    virtio_errval_t err;
    struct capref devframe;
};
struct virtio_add_call__args {
    uint16_t vq_id;
    uint16_t ndesc;
    uint8_t has_buffers;
    struct capref vring;
};
struct virtio_add_response__args {
    virtio_errval_t err;
};
struct virtio_extend_call__args {
    uint16_t vq_id;
    struct capref vbuf;
};
struct virtio_extend_response__args {
    virtio_errval_t err;
};
struct virtio_req_call__args {
    uint64_t size;
};
struct virtio_req_response__args {
    virtio_errval_t err;
    struct capref vring;
};

/*
 * Union type for all message arguments
 */
union virtio_arg_union {
    struct virtio_open_call__args open_call;
    struct virtio_open_response__args open_response;
    struct virtio_add_call__args add_call;
    struct virtio_add_response__args add_response;
    struct virtio_extend_call__args extend_call;
    struct virtio_extend_response__args extend_response;
    struct virtio_req_call__args req_call;
    struct virtio_req_response__args req_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct virtio_tx_vtbl {
    virtio_open_call__tx_method_fn *open_call;
    virtio_open_response__tx_method_fn *open_response;
    virtio_close_call__tx_method_fn *close_call;
    virtio_close_response__tx_method_fn *close_response;
    virtio_add_call__tx_method_fn *add_call;
    virtio_add_response__tx_method_fn *add_response;
    virtio_extend_call__tx_method_fn *extend_call;
    virtio_extend_response__tx_method_fn *extend_response;
    virtio_req_call__tx_method_fn *req_call;
    virtio_req_response__tx_method_fn *req_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct virtio_rx_vtbl {
    virtio_open_call__rx_method_fn *open_call;
    virtio_open_response__rx_method_fn *open_response;
    virtio_close_call__rx_method_fn *close_call;
    virtio_close_response__rx_method_fn *close_response;
    virtio_add_call__rx_method_fn *add_call;
    virtio_add_response__rx_method_fn *add_response;
    virtio_extend_call__rx_method_fn *extend_call;
    virtio_extend_response__rx_method_fn *extend_response;
    virtio_req_call__rx_method_fn *req_call;
    virtio_req_response__rx_method_fn *req_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t virtio_connect_fn(void *st, struct virtio_binding *binding);

/*
 * Export state struct
 */
struct virtio_export {
    struct idc_export common;
    virtio_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t virtio_export(void *st, idc_export_callback_fn *export_cb, virtio_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct virtio_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t virtio_accept(struct virtio_frameinfo *_frameinfo, void *st, virtio_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct virtio_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    virtio_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    virtio_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    virtio_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    virtio_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    virtio_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct virtio_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct virtio_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union virtio_arg_union tx_union;
    union virtio_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum virtio_msg_enum tx_msgnum;
    enum virtio_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    virtio_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t virtio_bind(iref_t i, virtio_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t virtio_connect(struct virtio_frameinfo *_frameinfo, virtio_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t virtio_open_call__tx(struct virtio_binding *_binding, struct event_closure _continuation, uint8_t backend) __attribute__ ((always_inline));
static inline errval_t virtio_open_call__tx(struct virtio_binding *_binding, struct event_closure _continuation, uint8_t backend)
{
    return(((_binding->tx_vtbl).open_call)(_binding, _continuation, backend));
}

static inline errval_t virtio_open_response__tx(struct virtio_binding *_binding, struct event_closure _continuation, virtio_errval_t err, struct capref devframe) __attribute__ ((always_inline));
static inline errval_t virtio_open_response__tx(struct virtio_binding *_binding, struct event_closure _continuation, virtio_errval_t err, struct capref devframe)
{
    return(((_binding->tx_vtbl).open_response)(_binding, _continuation, err, devframe));
}

static inline errval_t virtio_close_call__tx(struct virtio_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t virtio_close_call__tx(struct virtio_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).close_call)(_binding, _continuation));
}

static inline errval_t virtio_close_response__tx(struct virtio_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t virtio_close_response__tx(struct virtio_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).close_response)(_binding, _continuation));
}

static inline errval_t virtio_add_call__tx(struct virtio_binding *_binding, struct event_closure _continuation, uint16_t vq_id, uint16_t ndesc, uint8_t has_buffers, struct capref vring) __attribute__ ((always_inline));
static inline errval_t virtio_add_call__tx(struct virtio_binding *_binding, struct event_closure _continuation, uint16_t vq_id, uint16_t ndesc, uint8_t has_buffers, struct capref vring)
{
    return(((_binding->tx_vtbl).add_call)(_binding, _continuation, vq_id, ndesc, has_buffers, vring));
}

static inline errval_t virtio_add_response__tx(struct virtio_binding *_binding, struct event_closure _continuation, virtio_errval_t err) __attribute__ ((always_inline));
static inline errval_t virtio_add_response__tx(struct virtio_binding *_binding, struct event_closure _continuation, virtio_errval_t err)
{
    return(((_binding->tx_vtbl).add_response)(_binding, _continuation, err));
}

static inline errval_t virtio_extend_call__tx(struct virtio_binding *_binding, struct event_closure _continuation, uint16_t vq_id, struct capref vbuf) __attribute__ ((always_inline));
static inline errval_t virtio_extend_call__tx(struct virtio_binding *_binding, struct event_closure _continuation, uint16_t vq_id, struct capref vbuf)
{
    return(((_binding->tx_vtbl).extend_call)(_binding, _continuation, vq_id, vbuf));
}

static inline errval_t virtio_extend_response__tx(struct virtio_binding *_binding, struct event_closure _continuation, virtio_errval_t err) __attribute__ ((always_inline));
static inline errval_t virtio_extend_response__tx(struct virtio_binding *_binding, struct event_closure _continuation, virtio_errval_t err)
{
    return(((_binding->tx_vtbl).extend_response)(_binding, _continuation, err));
}

static inline errval_t virtio_req_call__tx(struct virtio_binding *_binding, struct event_closure _continuation, uint64_t size) __attribute__ ((always_inline));
static inline errval_t virtio_req_call__tx(struct virtio_binding *_binding, struct event_closure _continuation, uint64_t size)
{
    return(((_binding->tx_vtbl).req_call)(_binding, _continuation, size));
}

static inline errval_t virtio_req_response__tx(struct virtio_binding *_binding, struct event_closure _continuation, virtio_errval_t err, struct capref vring) __attribute__ ((always_inline));
static inline errval_t virtio_req_response__tx(struct virtio_binding *_binding, struct event_closure _continuation, virtio_errval_t err, struct capref vring)
{
    return(((_binding->tx_vtbl).req_response)(_binding, _continuation, err, vring));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/virtio_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/virtio_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/virtio_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/virtio_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __virtio_IF_H
