#ifndef __mem_RPC_CLIENT_H
#define __mem_RPC_CLIENT_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: mem
 * INTEFACE FILE: ../if/mem.if
 * INTERFACE DESCRIPTION: Memory allocation RPC interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

/*
 * RPC client
 */

#include <if/mem_defs.h>

/*
 * Forward declaration of binding type
 */
struct mem_rpc_client;

/*
 * Function signatures
 */
typedef  errval_t mem_allocate__rpc_method_fn(struct mem_rpc_client *_rpc, uint8_t bits, mem_genpaddr_t minbase, mem_genpaddr_t maxlimit, mem_errval_t *ret, struct capref *mem_cap);
typedef  errval_t mem_steal__rpc_method_fn(struct mem_rpc_client *_rpc, uint8_t bits, mem_genpaddr_t minbase, mem_genpaddr_t maxlimit, mem_errval_t *ret, struct capref *mem_cap);
typedef  errval_t mem_available__rpc_method_fn(struct mem_rpc_client *_rpc, mem_genpaddr_t *mem_avail, mem_genpaddr_t *mem_total);
typedef  errval_t mem_free_monitor__rpc_method_fn(struct mem_rpc_client *_rpc, struct capref mem_cap, mem_genpaddr_t base, uint8_t bits, mem_errval_t *err);

/*
 * VTable struct definition for the interface
 */
struct mem_rpc_vtbl {
    mem_allocate__rpc_method_fn *allocate;
    mem_steal__rpc_method_fn *steal;
    mem_available__rpc_method_fn *available;
    mem_free_monitor__rpc_method_fn *free_monitor;
};

/*
 * The Binding structure
 */
struct mem_rpc_client {
    struct mem_binding *b;
    struct mem_rpc_vtbl vtbl;
    bool rpc_in_progress;
    bool reply_present;
    errval_t async_error;
    struct waitset rpc_waitset;
    struct waitset_chanstate dummy_chanstate;
};

/*
 * Function to initialise an RPC client
 */
extern  errval_t mem_rpc_client_init(struct mem_rpc_client *rpc, struct mem_binding *binding);

#endif // __mem_RPC_CLIENT_H
