#ifndef __usb_manager_IF_H
#define __usb_manager_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: usb_manager
 * INTEFACE FILE: ../if/usb_manager.if
 * INTERFACE DESCRIPTION: USB Manager Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t usb_manager_genpaddr_t;
typedef uint64_t usb_manager_genvaddr_t;
typedef uint32_t usb_manager_rsrcid_t;
typedef uint64_t usb_manager_errval_t;
typedef uint64_t usb_manager_cycles_t;
typedef uint32_t usb_manager_iref_t;
typedef uint8_t usb_manager_coreid_t;
typedef uint32_t usb_manager_domainid_t;
struct _usb_manager_setup_param__struct {
    uint32_t max_bytes;
    uint32_t max_frames;
    uint32_t interval;
    uint32_t timeout;
    uint16_t flags;
    uint8_t type;
    uint8_t direction;
    uint8_t endpoint;
    uint8_t iface;
};
typedef struct _usb_manager_setup_param__struct usb_manager_setup_param_t;

/*
 * Forward declaration of binding type
 */
struct usb_manager_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void usb_manager_bind_continuation_fn(void *st, errval_t err, struct usb_manager_binding *_binding);
typedef  bool usb_manager_can_send_fn(struct usb_manager_binding *_binding);
typedef  errval_t usb_manager_register_send_fn(struct usb_manager_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t usb_manager_change_waitset_fn(struct usb_manager_binding *_binding, struct waitset *ws);
typedef  errval_t usb_manager_control_fn(struct usb_manager_binding *_binding, idc_control_t control);
typedef  void usb_manager_error_handler_fn(struct usb_manager_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum usb_manager_msg_enum {
    usb_manager___dummy__msgnum = 0,
    usb_manager___bind__msgnum = 1,
    usb_manager___bind_reply__msgnum = 2,
    usb_manager_connect_call__msgnum = 3,
    usb_manager_connect_response__msgnum = 4,
    usb_manager_device_disconnect_notify_call__msgnum = 5,
    usb_manager_device_disconnect_notify_response__msgnum = 6,
    usb_manager_request_read_call__msgnum = 7,
    usb_manager_request_read_response__msgnum = 8,
    usb_manager_request_write_call__msgnum = 9,
    usb_manager_request_write_response__msgnum = 10,
    usb_manager_request_call__msgnum = 11,
    usb_manager_request_response__msgnum = 12,
    usb_manager_transfer_setup_call__msgnum = 13,
    usb_manager_transfer_setup_response__msgnum = 14,
    usb_manager_transfer_unsetup_call__msgnum = 15,
    usb_manager_transfer_unsetup_response__msgnum = 16,
    usb_manager_transfer_start_call__msgnum = 17,
    usb_manager_transfer_start_response__msgnum = 18,
    usb_manager_transfer_stop_call__msgnum = 19,
    usb_manager_transfer_stop_response__msgnum = 20,
    usb_manager_transfer_status_call__msgnum = 21,
    usb_manager_transfer_status_response__msgnum = 22,
    usb_manager_transfer_state_call__msgnum = 23,
    usb_manager_transfer_state_response__msgnum = 24,
    usb_manager_transfer_clear_stall_call__msgnum = 25,
    usb_manager_transfer_clear_stall_response__msgnum = 26,
    usb_manager_transfer_done_notify_call__msgnum = 27,
    usb_manager_transfer_done_notify_response__msgnum = 28,
    usb_manager_device_get_speed_call__msgnum = 29,
    usb_manager_device_get_speed_response__msgnum = 30,
    usb_manager_device_get_state_call__msgnum = 31,
    usb_manager_device_get_state_response__msgnum = 32,
    usb_manager_device_suspend_call__msgnum = 33,
    usb_manager_device_suspend_response__msgnum = 34,
    usb_manager_device_resume_call__msgnum = 35,
    usb_manager_device_resume_response__msgnum = 36,
    usb_manager_device_powersave_call__msgnum = 37,
    usb_manager_device_powersave_response__msgnum = 38
} usb_manager_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t usb_manager_connect_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, iref_t driver_iref, uint16_t init_config);
typedef  errval_t usb_manager_connect_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error, const uint8_t *ret_desc, size_t length);
typedef  errval_t usb_manager_device_disconnect_notify_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation);
typedef  errval_t usb_manager_device_disconnect_notify_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation);
typedef  errval_t usb_manager_request_read_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, const uint8_t *request, size_t req_length);
typedef  errval_t usb_manager_request_read_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, const uint8_t *data, size_t data_length, uint32_t ret_status);
typedef  errval_t usb_manager_request_write_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, const uint8_t *request, size_t req_length, const uint8_t *data, size_t data_length);
typedef  errval_t usb_manager_request_write_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_status);
typedef  errval_t usb_manager_request_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, const uint8_t *request, size_t req_length);
typedef  errval_t usb_manager_request_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_status);
typedef  errval_t usb_manager_transfer_setup_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint8_t type, usb_manager_setup_param_t params);
typedef  errval_t usb_manager_transfer_setup_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error, uint32_t ret_tid);
typedef  errval_t usb_manager_transfer_unsetup_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid);
typedef  errval_t usb_manager_transfer_unsetup_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error);
typedef  errval_t usb_manager_transfer_start_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid);
typedef  errval_t usb_manager_transfer_start_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error);
typedef  errval_t usb_manager_transfer_stop_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid);
typedef  errval_t usb_manager_transfer_stop_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error);
typedef  errval_t usb_manager_transfer_status_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid);
typedef  errval_t usb_manager_transfer_status_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error, uint32_t ret_actlen, uint32_t ret_length, uint32_t ret_actframes, uint32_t ret_numframes);
typedef  errval_t usb_manager_transfer_state_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid);
typedef  errval_t usb_manager_transfer_state_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error, uint32_t ret_state);
typedef  errval_t usb_manager_transfer_clear_stall_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid);
typedef  errval_t usb_manager_transfer_clear_stall_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error);
typedef  errval_t usb_manager_transfer_done_notify_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation);
typedef  errval_t usb_manager_transfer_done_notify_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid, uint32_t error, const uint8_t *data, size_t length);
typedef  errval_t usb_manager_device_get_speed_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation);
typedef  errval_t usb_manager_device_get_speed_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint8_t ret_speed);
typedef  errval_t usb_manager_device_get_state_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation);
typedef  errval_t usb_manager_device_get_state_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint8_t ret_state);
typedef  errval_t usb_manager_device_suspend_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation);
typedef  errval_t usb_manager_device_suspend_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error);
typedef  errval_t usb_manager_device_resume_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation);
typedef  errval_t usb_manager_device_resume_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error);
typedef  errval_t usb_manager_device_powersave_call__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint8_t powerstate);
typedef  errval_t usb_manager_device_powersave_response__tx_method_fn(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error);

/*
 * Message type signatures (receive)
 */
typedef  void usb_manager_connect_call__rx_method_fn(struct usb_manager_binding *_binding, iref_t driver_iref, uint16_t init_config);
typedef  void usb_manager_connect_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_error, uint8_t *ret_desc, size_t length);
typedef  void usb_manager_device_disconnect_notify_call__rx_method_fn(struct usb_manager_binding *_binding);
typedef  void usb_manager_device_disconnect_notify_response__rx_method_fn(struct usb_manager_binding *_binding);
typedef  void usb_manager_request_read_call__rx_method_fn(struct usb_manager_binding *_binding, uint8_t *request, size_t req_length);
typedef  void usb_manager_request_read_response__rx_method_fn(struct usb_manager_binding *_binding, uint8_t *data, size_t data_length, uint32_t ret_status);
typedef  void usb_manager_request_write_call__rx_method_fn(struct usb_manager_binding *_binding, uint8_t *request, size_t req_length, uint8_t *data, size_t data_length);
typedef  void usb_manager_request_write_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_status);
typedef  void usb_manager_request_call__rx_method_fn(struct usb_manager_binding *_binding, uint8_t *request, size_t req_length);
typedef  void usb_manager_request_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_status);
typedef  void usb_manager_transfer_setup_call__rx_method_fn(struct usb_manager_binding *_binding, uint8_t type, usb_manager_setup_param_t params);
typedef  void usb_manager_transfer_setup_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_error, uint32_t ret_tid);
typedef  void usb_manager_transfer_unsetup_call__rx_method_fn(struct usb_manager_binding *_binding, uint32_t tid);
typedef  void usb_manager_transfer_unsetup_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_error);
typedef  void usb_manager_transfer_start_call__rx_method_fn(struct usb_manager_binding *_binding, uint32_t tid);
typedef  void usb_manager_transfer_start_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_error);
typedef  void usb_manager_transfer_stop_call__rx_method_fn(struct usb_manager_binding *_binding, uint32_t tid);
typedef  void usb_manager_transfer_stop_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_error);
typedef  void usb_manager_transfer_status_call__rx_method_fn(struct usb_manager_binding *_binding, uint32_t tid);
typedef  void usb_manager_transfer_status_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_error, uint32_t ret_actlen, uint32_t ret_length, uint32_t ret_actframes, uint32_t ret_numframes);
typedef  void usb_manager_transfer_state_call__rx_method_fn(struct usb_manager_binding *_binding, uint32_t tid);
typedef  void usb_manager_transfer_state_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_error, uint32_t ret_state);
typedef  void usb_manager_transfer_clear_stall_call__rx_method_fn(struct usb_manager_binding *_binding, uint32_t tid);
typedef  void usb_manager_transfer_clear_stall_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_error);
typedef  void usb_manager_transfer_done_notify_call__rx_method_fn(struct usb_manager_binding *_binding);
typedef  void usb_manager_transfer_done_notify_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t tid, uint32_t error, uint8_t *data, size_t length);
typedef  void usb_manager_device_get_speed_call__rx_method_fn(struct usb_manager_binding *_binding);
typedef  void usb_manager_device_get_speed_response__rx_method_fn(struct usb_manager_binding *_binding, uint8_t ret_speed);
typedef  void usb_manager_device_get_state_call__rx_method_fn(struct usb_manager_binding *_binding);
typedef  void usb_manager_device_get_state_response__rx_method_fn(struct usb_manager_binding *_binding, uint8_t ret_state);
typedef  void usb_manager_device_suspend_call__rx_method_fn(struct usb_manager_binding *_binding);
typedef  void usb_manager_device_suspend_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_error);
typedef  void usb_manager_device_resume_call__rx_method_fn(struct usb_manager_binding *_binding);
typedef  void usb_manager_device_resume_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_error);
typedef  void usb_manager_device_powersave_call__rx_method_fn(struct usb_manager_binding *_binding, uint8_t powerstate);
typedef  void usb_manager_device_powersave_response__rx_method_fn(struct usb_manager_binding *_binding, uint32_t ret_error);

/*
 * Struct type for holding the args for each msg
 */
struct usb_manager_connect_call__args {
    iref_t driver_iref;
    uint16_t init_config;
};
struct usb_manager_connect_response__args {
    uint32_t ret_error;
    uint8_t *ret_desc;
    size_t length;
};
struct usb_manager_request_read_call__args {
    uint8_t *request;
    size_t req_length;
};
struct usb_manager_request_read_response__args {
    uint8_t *data;
    size_t data_length;
    uint32_t ret_status;
};
struct usb_manager_request_write_call__args {
    uint8_t *request;
    size_t req_length;
    uint8_t *data;
    size_t data_length;
};
struct usb_manager_request_write_response__args {
    uint32_t ret_status;
};
struct usb_manager_request_call__args {
    uint8_t *request;
    size_t req_length;
};
struct usb_manager_request_response__args {
    uint32_t ret_status;
};
struct usb_manager_transfer_setup_call__args {
    uint8_t type;
    usb_manager_setup_param_t params;
};
struct usb_manager_transfer_setup_response__args {
    uint32_t ret_error;
    uint32_t ret_tid;
};
struct usb_manager_transfer_unsetup_call__args {
    uint32_t tid;
};
struct usb_manager_transfer_unsetup_response__args {
    uint32_t ret_error;
};
struct usb_manager_transfer_start_call__args {
    uint32_t tid;
};
struct usb_manager_transfer_start_response__args {
    uint32_t ret_error;
};
struct usb_manager_transfer_stop_call__args {
    uint32_t tid;
};
struct usb_manager_transfer_stop_response__args {
    uint32_t ret_error;
};
struct usb_manager_transfer_status_call__args {
    uint32_t tid;
};
struct usb_manager_transfer_status_response__args {
    uint32_t ret_error;
    uint32_t ret_actlen;
    uint32_t ret_length;
    uint32_t ret_actframes;
    uint32_t ret_numframes;
};
struct usb_manager_transfer_state_call__args {
    uint32_t tid;
};
struct usb_manager_transfer_state_response__args {
    uint32_t ret_error;
    uint32_t ret_state;
};
struct usb_manager_transfer_clear_stall_call__args {
    uint32_t tid;
};
struct usb_manager_transfer_clear_stall_response__args {
    uint32_t ret_error;
};
struct usb_manager_transfer_done_notify_response__args {
    uint32_t tid;
    uint32_t error;
    uint8_t *data;
    size_t length;
};
struct usb_manager_device_get_speed_response__args {
    uint8_t ret_speed;
};
struct usb_manager_device_get_state_response__args {
    uint8_t ret_state;
};
struct usb_manager_device_suspend_response__args {
    uint32_t ret_error;
};
struct usb_manager_device_resume_response__args {
    uint32_t ret_error;
};
struct usb_manager_device_powersave_call__args {
    uint8_t powerstate;
};
struct usb_manager_device_powersave_response__args {
    uint32_t ret_error;
};

/*
 * Union type for all message arguments
 */
union usb_manager_arg_union {
    struct usb_manager_connect_call__args connect_call;
    struct usb_manager_connect_response__args connect_response;
    struct usb_manager_request_read_call__args request_read_call;
    struct usb_manager_request_read_response__args request_read_response;
    struct usb_manager_request_write_call__args request_write_call;
    struct usb_manager_request_write_response__args request_write_response;
    struct usb_manager_request_call__args request_call;
    struct usb_manager_request_response__args request_response;
    struct usb_manager_transfer_setup_call__args transfer_setup_call;
    struct usb_manager_transfer_setup_response__args transfer_setup_response;
    struct usb_manager_transfer_unsetup_call__args transfer_unsetup_call;
    struct usb_manager_transfer_unsetup_response__args transfer_unsetup_response;
    struct usb_manager_transfer_start_call__args transfer_start_call;
    struct usb_manager_transfer_start_response__args transfer_start_response;
    struct usb_manager_transfer_stop_call__args transfer_stop_call;
    struct usb_manager_transfer_stop_response__args transfer_stop_response;
    struct usb_manager_transfer_status_call__args transfer_status_call;
    struct usb_manager_transfer_status_response__args transfer_status_response;
    struct usb_manager_transfer_state_call__args transfer_state_call;
    struct usb_manager_transfer_state_response__args transfer_state_response;
    struct usb_manager_transfer_clear_stall_call__args transfer_clear_stall_call;
    struct usb_manager_transfer_clear_stall_response__args transfer_clear_stall_response;
    struct usb_manager_transfer_done_notify_response__args transfer_done_notify_response;
    struct usb_manager_device_get_speed_response__args device_get_speed_response;
    struct usb_manager_device_get_state_response__args device_get_state_response;
    struct usb_manager_device_suspend_response__args device_suspend_response;
    struct usb_manager_device_resume_response__args device_resume_response;
    struct usb_manager_device_powersave_call__args device_powersave_call;
    struct usb_manager_device_powersave_response__args device_powersave_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct usb_manager_tx_vtbl {
    usb_manager_connect_call__tx_method_fn *connect_call;
    usb_manager_connect_response__tx_method_fn *connect_response;
    usb_manager_device_disconnect_notify_call__tx_method_fn *device_disconnect_notify_call;
    usb_manager_device_disconnect_notify_response__tx_method_fn *device_disconnect_notify_response;
    usb_manager_request_read_call__tx_method_fn *request_read_call;
    usb_manager_request_read_response__tx_method_fn *request_read_response;
    usb_manager_request_write_call__tx_method_fn *request_write_call;
    usb_manager_request_write_response__tx_method_fn *request_write_response;
    usb_manager_request_call__tx_method_fn *request_call;
    usb_manager_request_response__tx_method_fn *request_response;
    usb_manager_transfer_setup_call__tx_method_fn *transfer_setup_call;
    usb_manager_transfer_setup_response__tx_method_fn *transfer_setup_response;
    usb_manager_transfer_unsetup_call__tx_method_fn *transfer_unsetup_call;
    usb_manager_transfer_unsetup_response__tx_method_fn *transfer_unsetup_response;
    usb_manager_transfer_start_call__tx_method_fn *transfer_start_call;
    usb_manager_transfer_start_response__tx_method_fn *transfer_start_response;
    usb_manager_transfer_stop_call__tx_method_fn *transfer_stop_call;
    usb_manager_transfer_stop_response__tx_method_fn *transfer_stop_response;
    usb_manager_transfer_status_call__tx_method_fn *transfer_status_call;
    usb_manager_transfer_status_response__tx_method_fn *transfer_status_response;
    usb_manager_transfer_state_call__tx_method_fn *transfer_state_call;
    usb_manager_transfer_state_response__tx_method_fn *transfer_state_response;
    usb_manager_transfer_clear_stall_call__tx_method_fn *transfer_clear_stall_call;
    usb_manager_transfer_clear_stall_response__tx_method_fn *transfer_clear_stall_response;
    usb_manager_transfer_done_notify_call__tx_method_fn *transfer_done_notify_call;
    usb_manager_transfer_done_notify_response__tx_method_fn *transfer_done_notify_response;
    usb_manager_device_get_speed_call__tx_method_fn *device_get_speed_call;
    usb_manager_device_get_speed_response__tx_method_fn *device_get_speed_response;
    usb_manager_device_get_state_call__tx_method_fn *device_get_state_call;
    usb_manager_device_get_state_response__tx_method_fn *device_get_state_response;
    usb_manager_device_suspend_call__tx_method_fn *device_suspend_call;
    usb_manager_device_suspend_response__tx_method_fn *device_suspend_response;
    usb_manager_device_resume_call__tx_method_fn *device_resume_call;
    usb_manager_device_resume_response__tx_method_fn *device_resume_response;
    usb_manager_device_powersave_call__tx_method_fn *device_powersave_call;
    usb_manager_device_powersave_response__tx_method_fn *device_powersave_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct usb_manager_rx_vtbl {
    usb_manager_connect_call__rx_method_fn *connect_call;
    usb_manager_connect_response__rx_method_fn *connect_response;
    usb_manager_device_disconnect_notify_call__rx_method_fn *device_disconnect_notify_call;
    usb_manager_device_disconnect_notify_response__rx_method_fn *device_disconnect_notify_response;
    usb_manager_request_read_call__rx_method_fn *request_read_call;
    usb_manager_request_read_response__rx_method_fn *request_read_response;
    usb_manager_request_write_call__rx_method_fn *request_write_call;
    usb_manager_request_write_response__rx_method_fn *request_write_response;
    usb_manager_request_call__rx_method_fn *request_call;
    usb_manager_request_response__rx_method_fn *request_response;
    usb_manager_transfer_setup_call__rx_method_fn *transfer_setup_call;
    usb_manager_transfer_setup_response__rx_method_fn *transfer_setup_response;
    usb_manager_transfer_unsetup_call__rx_method_fn *transfer_unsetup_call;
    usb_manager_transfer_unsetup_response__rx_method_fn *transfer_unsetup_response;
    usb_manager_transfer_start_call__rx_method_fn *transfer_start_call;
    usb_manager_transfer_start_response__rx_method_fn *transfer_start_response;
    usb_manager_transfer_stop_call__rx_method_fn *transfer_stop_call;
    usb_manager_transfer_stop_response__rx_method_fn *transfer_stop_response;
    usb_manager_transfer_status_call__rx_method_fn *transfer_status_call;
    usb_manager_transfer_status_response__rx_method_fn *transfer_status_response;
    usb_manager_transfer_state_call__rx_method_fn *transfer_state_call;
    usb_manager_transfer_state_response__rx_method_fn *transfer_state_response;
    usb_manager_transfer_clear_stall_call__rx_method_fn *transfer_clear_stall_call;
    usb_manager_transfer_clear_stall_response__rx_method_fn *transfer_clear_stall_response;
    usb_manager_transfer_done_notify_call__rx_method_fn *transfer_done_notify_call;
    usb_manager_transfer_done_notify_response__rx_method_fn *transfer_done_notify_response;
    usb_manager_device_get_speed_call__rx_method_fn *device_get_speed_call;
    usb_manager_device_get_speed_response__rx_method_fn *device_get_speed_response;
    usb_manager_device_get_state_call__rx_method_fn *device_get_state_call;
    usb_manager_device_get_state_response__rx_method_fn *device_get_state_response;
    usb_manager_device_suspend_call__rx_method_fn *device_suspend_call;
    usb_manager_device_suspend_response__rx_method_fn *device_suspend_response;
    usb_manager_device_resume_call__rx_method_fn *device_resume_call;
    usb_manager_device_resume_response__rx_method_fn *device_resume_response;
    usb_manager_device_powersave_call__rx_method_fn *device_powersave_call;
    usb_manager_device_powersave_response__rx_method_fn *device_powersave_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t usb_manager_connect_fn(void *st, struct usb_manager_binding *binding);

/*
 * Export state struct
 */
struct usb_manager_export {
    struct idc_export common;
    usb_manager_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t usb_manager_export(void *st, idc_export_callback_fn *export_cb, usb_manager_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct usb_manager_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t usb_manager_accept(struct usb_manager_frameinfo *_frameinfo, void *st, usb_manager_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct usb_manager_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    usb_manager_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    usb_manager_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    usb_manager_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    usb_manager_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    usb_manager_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct usb_manager_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct usb_manager_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union usb_manager_arg_union tx_union;
    union usb_manager_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum usb_manager_msg_enum tx_msgnum;
    enum usb_manager_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    usb_manager_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t usb_manager_bind(iref_t i, usb_manager_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t usb_manager_connect(struct usb_manager_frameinfo *_frameinfo, usb_manager_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t usb_manager_connect_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, iref_t driver_iref, uint16_t init_config) __attribute__ ((always_inline));
static inline errval_t usb_manager_connect_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, iref_t driver_iref, uint16_t init_config)
{
    return(((_binding->tx_vtbl).connect_call)(_binding, _continuation, driver_iref, init_config));
}

static inline errval_t usb_manager_connect_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error, const uint8_t *ret_desc, size_t length) __attribute__ ((always_inline));
static inline errval_t usb_manager_connect_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error, const uint8_t *ret_desc, size_t length)
{
    return(((_binding->tx_vtbl).connect_response)(_binding, _continuation, ret_error, ret_desc, length));
}

static inline errval_t usb_manager_device_disconnect_notify_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t usb_manager_device_disconnect_notify_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).device_disconnect_notify_call)(_binding, _continuation));
}

static inline errval_t usb_manager_device_disconnect_notify_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t usb_manager_device_disconnect_notify_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).device_disconnect_notify_response)(_binding, _continuation));
}

static inline errval_t usb_manager_request_read_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, const uint8_t *request, size_t req_length) __attribute__ ((always_inline));
static inline errval_t usb_manager_request_read_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, const uint8_t *request, size_t req_length)
{
    return(((_binding->tx_vtbl).request_read_call)(_binding, _continuation, request, req_length));
}

static inline errval_t usb_manager_request_read_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, const uint8_t *data, size_t data_length, uint32_t ret_status) __attribute__ ((always_inline));
static inline errval_t usb_manager_request_read_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, const uint8_t *data, size_t data_length, uint32_t ret_status)
{
    return(((_binding->tx_vtbl).request_read_response)(_binding, _continuation, data, data_length, ret_status));
}

static inline errval_t usb_manager_request_write_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, const uint8_t *request, size_t req_length, const uint8_t *data, size_t data_length) __attribute__ ((always_inline));
static inline errval_t usb_manager_request_write_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, const uint8_t *request, size_t req_length, const uint8_t *data, size_t data_length)
{
    return(((_binding->tx_vtbl).request_write_call)(_binding, _continuation, request, req_length, data, data_length));
}

static inline errval_t usb_manager_request_write_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_status) __attribute__ ((always_inline));
static inline errval_t usb_manager_request_write_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_status)
{
    return(((_binding->tx_vtbl).request_write_response)(_binding, _continuation, ret_status));
}

static inline errval_t usb_manager_request_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, const uint8_t *request, size_t req_length) __attribute__ ((always_inline));
static inline errval_t usb_manager_request_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, const uint8_t *request, size_t req_length)
{
    return(((_binding->tx_vtbl).request_call)(_binding, _continuation, request, req_length));
}

static inline errval_t usb_manager_request_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_status) __attribute__ ((always_inline));
static inline errval_t usb_manager_request_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_status)
{
    return(((_binding->tx_vtbl).request_response)(_binding, _continuation, ret_status));
}

static inline errval_t usb_manager_transfer_setup_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint8_t type, usb_manager_setup_param_t params) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_setup_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint8_t type, usb_manager_setup_param_t params)
{
    return(((_binding->tx_vtbl).transfer_setup_call)(_binding, _continuation, type, params));
}

static inline errval_t usb_manager_transfer_setup_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error, uint32_t ret_tid) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_setup_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error, uint32_t ret_tid)
{
    return(((_binding->tx_vtbl).transfer_setup_response)(_binding, _continuation, ret_error, ret_tid));
}

static inline errval_t usb_manager_transfer_unsetup_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_unsetup_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid)
{
    return(((_binding->tx_vtbl).transfer_unsetup_call)(_binding, _continuation, tid));
}

static inline errval_t usb_manager_transfer_unsetup_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_unsetup_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error)
{
    return(((_binding->tx_vtbl).transfer_unsetup_response)(_binding, _continuation, ret_error));
}

static inline errval_t usb_manager_transfer_start_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_start_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid)
{
    return(((_binding->tx_vtbl).transfer_start_call)(_binding, _continuation, tid));
}

static inline errval_t usb_manager_transfer_start_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_start_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error)
{
    return(((_binding->tx_vtbl).transfer_start_response)(_binding, _continuation, ret_error));
}

static inline errval_t usb_manager_transfer_stop_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_stop_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid)
{
    return(((_binding->tx_vtbl).transfer_stop_call)(_binding, _continuation, tid));
}

static inline errval_t usb_manager_transfer_stop_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_stop_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error)
{
    return(((_binding->tx_vtbl).transfer_stop_response)(_binding, _continuation, ret_error));
}

static inline errval_t usb_manager_transfer_status_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_status_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid)
{
    return(((_binding->tx_vtbl).transfer_status_call)(_binding, _continuation, tid));
}

static inline errval_t usb_manager_transfer_status_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error, uint32_t ret_actlen, uint32_t ret_length, uint32_t ret_actframes, uint32_t ret_numframes) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_status_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error, uint32_t ret_actlen, uint32_t ret_length, uint32_t ret_actframes, uint32_t ret_numframes)
{
    return(((_binding->tx_vtbl).transfer_status_response)(_binding, _continuation, ret_error, ret_actlen, ret_length, ret_actframes, ret_numframes));
}

static inline errval_t usb_manager_transfer_state_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_state_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid)
{
    return(((_binding->tx_vtbl).transfer_state_call)(_binding, _continuation, tid));
}

static inline errval_t usb_manager_transfer_state_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error, uint32_t ret_state) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_state_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error, uint32_t ret_state)
{
    return(((_binding->tx_vtbl).transfer_state_response)(_binding, _continuation, ret_error, ret_state));
}

static inline errval_t usb_manager_transfer_clear_stall_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_clear_stall_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid)
{
    return(((_binding->tx_vtbl).transfer_clear_stall_call)(_binding, _continuation, tid));
}

static inline errval_t usb_manager_transfer_clear_stall_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_clear_stall_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error)
{
    return(((_binding->tx_vtbl).transfer_clear_stall_response)(_binding, _continuation, ret_error));
}

static inline errval_t usb_manager_transfer_done_notify_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_done_notify_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).transfer_done_notify_call)(_binding, _continuation));
}

static inline errval_t usb_manager_transfer_done_notify_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid, uint32_t error, const uint8_t *data, size_t length) __attribute__ ((always_inline));
static inline errval_t usb_manager_transfer_done_notify_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t tid, uint32_t error, const uint8_t *data, size_t length)
{
    return(((_binding->tx_vtbl).transfer_done_notify_response)(_binding, _continuation, tid, error, data, length));
}

static inline errval_t usb_manager_device_get_speed_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t usb_manager_device_get_speed_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).device_get_speed_call)(_binding, _continuation));
}

static inline errval_t usb_manager_device_get_speed_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint8_t ret_speed) __attribute__ ((always_inline));
static inline errval_t usb_manager_device_get_speed_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint8_t ret_speed)
{
    return(((_binding->tx_vtbl).device_get_speed_response)(_binding, _continuation, ret_speed));
}

static inline errval_t usb_manager_device_get_state_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t usb_manager_device_get_state_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).device_get_state_call)(_binding, _continuation));
}

static inline errval_t usb_manager_device_get_state_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint8_t ret_state) __attribute__ ((always_inline));
static inline errval_t usb_manager_device_get_state_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint8_t ret_state)
{
    return(((_binding->tx_vtbl).device_get_state_response)(_binding, _continuation, ret_state));
}

static inline errval_t usb_manager_device_suspend_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t usb_manager_device_suspend_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).device_suspend_call)(_binding, _continuation));
}

static inline errval_t usb_manager_device_suspend_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error) __attribute__ ((always_inline));
static inline errval_t usb_manager_device_suspend_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error)
{
    return(((_binding->tx_vtbl).device_suspend_response)(_binding, _continuation, ret_error));
}

static inline errval_t usb_manager_device_resume_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t usb_manager_device_resume_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).device_resume_call)(_binding, _continuation));
}

static inline errval_t usb_manager_device_resume_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error) __attribute__ ((always_inline));
static inline errval_t usb_manager_device_resume_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error)
{
    return(((_binding->tx_vtbl).device_resume_response)(_binding, _continuation, ret_error));
}

static inline errval_t usb_manager_device_powersave_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint8_t powerstate) __attribute__ ((always_inline));
static inline errval_t usb_manager_device_powersave_call__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint8_t powerstate)
{
    return(((_binding->tx_vtbl).device_powersave_call)(_binding, _continuation, powerstate));
}

static inline errval_t usb_manager_device_powersave_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error) __attribute__ ((always_inline));
static inline errval_t usb_manager_device_powersave_response__tx(struct usb_manager_binding *_binding, struct event_closure _continuation, uint32_t ret_error)
{
    return(((_binding->tx_vtbl).device_powersave_response)(_binding, _continuation, ret_error));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/usb_manager_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/usb_manager_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/usb_manager_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/usb_manager_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __usb_manager_IF_H
