#ifndef __bench_IF_H
#define __bench_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: bench
 * INTEFACE FILE: ../if/bench.if
 * INTERFACE DESCRIPTION: The bench Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t bench_genpaddr_t;
typedef uint64_t bench_genvaddr_t;
typedef uint32_t bench_rsrcid_t;
typedef uint64_t bench_errval_t;
typedef uint64_t bench_cycles_t;
typedef uint32_t bench_iref_t;
typedef uint8_t bench_coreid_t;
typedef uint32_t bench_domainid_t;

/*
 * Forward declaration of binding type
 */
struct bench_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void bench_bind_continuation_fn(void *st, errval_t err, struct bench_binding *_binding);
typedef  bool bench_can_send_fn(struct bench_binding *_binding);
typedef  errval_t bench_register_send_fn(struct bench_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t bench_change_waitset_fn(struct bench_binding *_binding, struct waitset *ws);
typedef  errval_t bench_control_fn(struct bench_binding *_binding, idc_control_t control);
typedef  void bench_error_handler_fn(struct bench_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum bench_msg_enum {
    bench___dummy__msgnum = 0,
    bench___bind__msgnum = 1,
    bench___bind_reply__msgnum = 2,
    bench_init_request__msgnum = 3,
    bench_init_reply__msgnum = 4,
    bench_token_request__msgnum = 5,
    bench_token_reply__msgnum = 6,
    bench_busy_init_request__msgnum = 7,
    bench_busy_init_reply__msgnum = 8,
    bench_busy_ping__msgnum = 9,
    bench_ump_init_msg__msgnum = 10,
    bench_fsb_init_msg__msgnum = 11,
    bench_fsb_empty_request__msgnum = 12,
    bench_fsb_empty_reply__msgnum = 13,
    bench_fsb_buffer_request__msgnum = 14,
    bench_fsb_buffer_reply__msgnum = 15,
    bench_fsb_payload_request__msgnum = 16,
    bench_fsb_payload_reply__msgnum = 17,
    bench_fsb_payload1_request__msgnum = 18,
    bench_fsb_payload1_reply__msgnum = 19,
    bench_fsb_payload2_request__msgnum = 20,
    bench_fsb_payload2_reply__msgnum = 21,
    bench_fsb_payload8_request__msgnum = 22,
    bench_fsb_payload8_reply__msgnum = 23,
    bench_fsb_payload16_request__msgnum = 24,
    bench_fsb_payload16_reply__msgnum = 25,
    bench_fsb_payload32_1_request__msgnum = 26,
    bench_fsb_payload32_1_reply__msgnum = 27,
    bench_fsb_payload64_1_request__msgnum = 28,
    bench_fsb_payload64_1_reply__msgnum = 29,
    bench_fsb_payload32_2_request__msgnum = 30,
    bench_fsb_payload32_2_reply__msgnum = 31,
    bench_fsb_payload64_2_request__msgnum = 32,
    bench_fsb_payload64_2_reply__msgnum = 33,
    bench_fsb_payload32_4_request__msgnum = 34,
    bench_fsb_payload32_4_reply__msgnum = 35,
    bench_fsb_payload64_4_request__msgnum = 36,
    bench_fsb_payload64_4_reply__msgnum = 37,
    bench_fsb_payload32_8_request__msgnum = 38,
    bench_fsb_payload32_8_reply__msgnum = 39,
    bench_fsb_payload64_8_request__msgnum = 40,
    bench_fsb_payload64_8_reply__msgnum = 41,
    bench_fsb_payload32_16_request__msgnum = 42,
    bench_fsb_payload32_16_reply__msgnum = 43,
    bench_fsb_payload64_16_request__msgnum = 44,
    bench_fsb_payload64_16_reply__msgnum = 45,
    bench_lrpc_init__msgnum = 46,
    bench_lrpc_init_reply__msgnum = 47,
    bench_lrpc_bench_reply__msgnum = 48,
    bench_shmc_init_request__msgnum = 49,
    bench_shmc_init_reply__msgnum = 50,
    bench_shmc_start__msgnum = 51,
    bench_shmc_done__msgnum = 52
} bench_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t bench_init_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, uint8_t coreid);
typedef  errval_t bench_init_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation);
typedef  errval_t bench_token_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation);
typedef  errval_t bench_token_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation);
typedef  errval_t bench_busy_init_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation);
typedef  errval_t bench_busy_init_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation);
typedef  errval_t bench_busy_ping__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation);
typedef  errval_t bench_ump_init_msg__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, uint8_t coreid);
typedef  errval_t bench_fsb_init_msg__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, uint8_t coreid);
typedef  errval_t bench_fsb_empty_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation);
typedef  errval_t bench_fsb_empty_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation);
typedef  errval_t bench_fsb_buffer_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, const uint8_t *buf, size_t size);
typedef  errval_t bench_fsb_buffer_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, const uint8_t *buf, size_t size);
typedef  errval_t bench_fsb_payload_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3);
typedef  errval_t bench_fsb_payload_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3);
typedef  errval_t bench_fsb_payload1_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0);
typedef  errval_t bench_fsb_payload1_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0);
typedef  errval_t bench_fsb_payload2_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1);
typedef  errval_t bench_fsb_payload2_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1);
typedef  errval_t bench_fsb_payload8_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7);
typedef  errval_t bench_fsb_payload8_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7);
typedef  errval_t bench_fsb_payload16_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15);
typedef  errval_t bench_fsb_payload16_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15);
typedef  errval_t bench_fsb_payload32_1_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0);
typedef  errval_t bench_fsb_payload32_1_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0);
typedef  errval_t bench_fsb_payload64_1_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0);
typedef  errval_t bench_fsb_payload64_1_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0);
typedef  errval_t bench_fsb_payload32_2_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1);
typedef  errval_t bench_fsb_payload32_2_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1);
typedef  errval_t bench_fsb_payload64_2_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1);
typedef  errval_t bench_fsb_payload64_2_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1);
typedef  errval_t bench_fsb_payload32_4_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3);
typedef  errval_t bench_fsb_payload32_4_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3);
typedef  errval_t bench_fsb_payload64_4_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3);
typedef  errval_t bench_fsb_payload64_4_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3);
typedef  errval_t bench_fsb_payload32_8_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7);
typedef  errval_t bench_fsb_payload32_8_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7);
typedef  errval_t bench_fsb_payload64_8_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7);
typedef  errval_t bench_fsb_payload64_8_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7);
typedef  errval_t bench_fsb_payload32_16_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15);
typedef  errval_t bench_fsb_payload32_16_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15);
typedef  errval_t bench_fsb_payload64_16_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7, int64_t word8, int64_t word9, int64_t word10, int64_t word11, int64_t word12, int64_t word13, int64_t word14, int64_t word15);
typedef  errval_t bench_fsb_payload64_16_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7, int64_t word8, int64_t word9, int64_t word10, int64_t word11, int64_t word12, int64_t word13, int64_t word14, int64_t word15);
typedef  errval_t bench_lrpc_init__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation);
typedef  errval_t bench_lrpc_init_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation);
typedef  errval_t bench_lrpc_bench_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, uint64_t value);
typedef  errval_t bench_shmc_init_request__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, uint8_t coreid);
typedef  errval_t bench_shmc_init_reply__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation, struct capref cap);
typedef  errval_t bench_shmc_start__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation);
typedef  errval_t bench_shmc_done__tx_method_fn(struct bench_binding *_binding, struct event_closure _continuation);

/*
 * Message type signatures (receive)
 */
typedef  void bench_init_request__rx_method_fn(struct bench_binding *_binding, uint8_t coreid);
typedef  void bench_init_reply__rx_method_fn(struct bench_binding *_binding);
typedef  void bench_token_request__rx_method_fn(struct bench_binding *_binding);
typedef  void bench_token_reply__rx_method_fn(struct bench_binding *_binding);
typedef  void bench_busy_init_request__rx_method_fn(struct bench_binding *_binding);
typedef  void bench_busy_init_reply__rx_method_fn(struct bench_binding *_binding);
typedef  void bench_busy_ping__rx_method_fn(struct bench_binding *_binding);
typedef  void bench_ump_init_msg__rx_method_fn(struct bench_binding *_binding, uint8_t coreid);
typedef  void bench_fsb_init_msg__rx_method_fn(struct bench_binding *_binding, uint8_t coreid);
typedef  void bench_fsb_empty_request__rx_method_fn(struct bench_binding *_binding);
typedef  void bench_fsb_empty_reply__rx_method_fn(struct bench_binding *_binding);
typedef  void bench_fsb_buffer_request__rx_method_fn(struct bench_binding *_binding, uint8_t *buf, size_t size);
typedef  void bench_fsb_buffer_reply__rx_method_fn(struct bench_binding *_binding, uint8_t *buf, size_t size);
typedef  void bench_fsb_payload_request__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1, int32_t word2, int32_t word3);
typedef  void bench_fsb_payload_reply__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1, int32_t word2, int32_t word3);
typedef  void bench_fsb_payload1_request__rx_method_fn(struct bench_binding *_binding, int32_t word0);
typedef  void bench_fsb_payload1_reply__rx_method_fn(struct bench_binding *_binding, int32_t word0);
typedef  void bench_fsb_payload2_request__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1);
typedef  void bench_fsb_payload2_reply__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1);
typedef  void bench_fsb_payload8_request__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7);
typedef  void bench_fsb_payload8_reply__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7);
typedef  void bench_fsb_payload16_request__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15);
typedef  void bench_fsb_payload16_reply__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15);
typedef  void bench_fsb_payload32_1_request__rx_method_fn(struct bench_binding *_binding, int32_t word0);
typedef  void bench_fsb_payload32_1_reply__rx_method_fn(struct bench_binding *_binding, int32_t word0);
typedef  void bench_fsb_payload64_1_request__rx_method_fn(struct bench_binding *_binding, int64_t word0);
typedef  void bench_fsb_payload64_1_reply__rx_method_fn(struct bench_binding *_binding, int64_t word0);
typedef  void bench_fsb_payload32_2_request__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1);
typedef  void bench_fsb_payload32_2_reply__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1);
typedef  void bench_fsb_payload64_2_request__rx_method_fn(struct bench_binding *_binding, int64_t word0, int64_t word1);
typedef  void bench_fsb_payload64_2_reply__rx_method_fn(struct bench_binding *_binding, int64_t word0, int64_t word1);
typedef  void bench_fsb_payload32_4_request__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1, int32_t word2, int32_t word3);
typedef  void bench_fsb_payload32_4_reply__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1, int32_t word2, int32_t word3);
typedef  void bench_fsb_payload64_4_request__rx_method_fn(struct bench_binding *_binding, int64_t word0, int64_t word1, int64_t word2, int64_t word3);
typedef  void bench_fsb_payload64_4_reply__rx_method_fn(struct bench_binding *_binding, int64_t word0, int64_t word1, int64_t word2, int64_t word3);
typedef  void bench_fsb_payload32_8_request__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7);
typedef  void bench_fsb_payload32_8_reply__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7);
typedef  void bench_fsb_payload64_8_request__rx_method_fn(struct bench_binding *_binding, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7);
typedef  void bench_fsb_payload64_8_reply__rx_method_fn(struct bench_binding *_binding, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7);
typedef  void bench_fsb_payload32_16_request__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15);
typedef  void bench_fsb_payload32_16_reply__rx_method_fn(struct bench_binding *_binding, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15);
typedef  void bench_fsb_payload64_16_request__rx_method_fn(struct bench_binding *_binding, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7, int64_t word8, int64_t word9, int64_t word10, int64_t word11, int64_t word12, int64_t word13, int64_t word14, int64_t word15);
typedef  void bench_fsb_payload64_16_reply__rx_method_fn(struct bench_binding *_binding, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7, int64_t word8, int64_t word9, int64_t word10, int64_t word11, int64_t word12, int64_t word13, int64_t word14, int64_t word15);
typedef  void bench_lrpc_init__rx_method_fn(struct bench_binding *_binding);
typedef  void bench_lrpc_init_reply__rx_method_fn(struct bench_binding *_binding);
typedef  void bench_lrpc_bench_reply__rx_method_fn(struct bench_binding *_binding, uint64_t value);
typedef  void bench_shmc_init_request__rx_method_fn(struct bench_binding *_binding, uint8_t coreid);
typedef  void bench_shmc_init_reply__rx_method_fn(struct bench_binding *_binding, struct capref cap);
typedef  void bench_shmc_start__rx_method_fn(struct bench_binding *_binding);
typedef  void bench_shmc_done__rx_method_fn(struct bench_binding *_binding);

/*
 * Struct type for holding the args for each msg
 */
struct bench_init_request__args {
    uint8_t coreid;
};
struct bench_ump_init_msg__args {
    uint8_t coreid;
};
struct bench_fsb_init_msg__args {
    uint8_t coreid;
};
struct bench_fsb_buffer_request__args {
    uint8_t *buf;
    size_t size;
};
struct bench_fsb_buffer_reply__args {
    uint8_t *buf;
    size_t size;
};
struct bench_fsb_payload_request__args {
    int32_t word0;
    int32_t word1;
    int32_t word2;
    int32_t word3;
};
struct bench_fsb_payload_reply__args {
    int32_t word0;
    int32_t word1;
    int32_t word2;
    int32_t word3;
};
struct bench_fsb_payload1_request__args {
    int32_t word0;
};
struct bench_fsb_payload1_reply__args {
    int32_t word0;
};
struct bench_fsb_payload2_request__args {
    int32_t word0;
    int32_t word1;
};
struct bench_fsb_payload2_reply__args {
    int32_t word0;
    int32_t word1;
};
struct bench_fsb_payload8_request__args {
    int32_t word0;
    int32_t word1;
    int32_t word2;
    int32_t word3;
    int32_t word4;
    int32_t word5;
    int32_t word6;
    int32_t word7;
};
struct bench_fsb_payload8_reply__args {
    int32_t word0;
    int32_t word1;
    int32_t word2;
    int32_t word3;
    int32_t word4;
    int32_t word5;
    int32_t word6;
    int32_t word7;
};
struct bench_fsb_payload16_request__args {
    int32_t word0;
    int32_t word1;
    int32_t word2;
    int32_t word3;
    int32_t word4;
    int32_t word5;
    int32_t word6;
    int32_t word7;
    int32_t word8;
    int32_t word9;
    int32_t word10;
    int32_t word11;
    int32_t word12;
    int32_t word13;
    int32_t word14;
    int32_t word15;
};
struct bench_fsb_payload16_reply__args {
    int32_t word0;
    int32_t word1;
    int32_t word2;
    int32_t word3;
    int32_t word4;
    int32_t word5;
    int32_t word6;
    int32_t word7;
    int32_t word8;
    int32_t word9;
    int32_t word10;
    int32_t word11;
    int32_t word12;
    int32_t word13;
    int32_t word14;
    int32_t word15;
};
struct bench_fsb_payload32_1_request__args {
    int32_t word0;
};
struct bench_fsb_payload32_1_reply__args {
    int32_t word0;
};
struct bench_fsb_payload64_1_request__args {
    int64_t word0;
};
struct bench_fsb_payload64_1_reply__args {
    int64_t word0;
};
struct bench_fsb_payload32_2_request__args {
    int32_t word0;
    int32_t word1;
};
struct bench_fsb_payload32_2_reply__args {
    int32_t word0;
    int32_t word1;
};
struct bench_fsb_payload64_2_request__args {
    int64_t word0;
    int64_t word1;
};
struct bench_fsb_payload64_2_reply__args {
    int64_t word0;
    int64_t word1;
};
struct bench_fsb_payload32_4_request__args {
    int32_t word0;
    int32_t word1;
    int32_t word2;
    int32_t word3;
};
struct bench_fsb_payload32_4_reply__args {
    int32_t word0;
    int32_t word1;
    int32_t word2;
    int32_t word3;
};
struct bench_fsb_payload64_4_request__args {
    int64_t word0;
    int64_t word1;
    int64_t word2;
    int64_t word3;
};
struct bench_fsb_payload64_4_reply__args {
    int64_t word0;
    int64_t word1;
    int64_t word2;
    int64_t word3;
};
struct bench_fsb_payload32_8_request__args {
    int32_t word0;
    int32_t word1;
    int32_t word2;
    int32_t word3;
    int32_t word4;
    int32_t word5;
    int32_t word6;
    int32_t word7;
};
struct bench_fsb_payload32_8_reply__args {
    int32_t word0;
    int32_t word1;
    int32_t word2;
    int32_t word3;
    int32_t word4;
    int32_t word5;
    int32_t word6;
    int32_t word7;
};
struct bench_fsb_payload64_8_request__args {
    int64_t word0;
    int64_t word1;
    int64_t word2;
    int64_t word3;
    int64_t word4;
    int64_t word5;
    int64_t word6;
    int64_t word7;
};
struct bench_fsb_payload64_8_reply__args {
    int64_t word0;
    int64_t word1;
    int64_t word2;
    int64_t word3;
    int64_t word4;
    int64_t word5;
    int64_t word6;
    int64_t word7;
};
struct bench_fsb_payload32_16_request__args {
    int32_t word0;
    int32_t word1;
    int32_t word2;
    int32_t word3;
    int32_t word4;
    int32_t word5;
    int32_t word6;
    int32_t word7;
    int32_t word8;
    int32_t word9;
    int32_t word10;
    int32_t word11;
    int32_t word12;
    int32_t word13;
    int32_t word14;
    int32_t word15;
};
struct bench_fsb_payload32_16_reply__args {
    int32_t word0;
    int32_t word1;
    int32_t word2;
    int32_t word3;
    int32_t word4;
    int32_t word5;
    int32_t word6;
    int32_t word7;
    int32_t word8;
    int32_t word9;
    int32_t word10;
    int32_t word11;
    int32_t word12;
    int32_t word13;
    int32_t word14;
    int32_t word15;
};
struct bench_fsb_payload64_16_request__args {
    int64_t word0;
    int64_t word1;
    int64_t word2;
    int64_t word3;
    int64_t word4;
    int64_t word5;
    int64_t word6;
    int64_t word7;
    int64_t word8;
    int64_t word9;
    int64_t word10;
    int64_t word11;
    int64_t word12;
    int64_t word13;
    int64_t word14;
    int64_t word15;
};
struct bench_fsb_payload64_16_reply__args {
    int64_t word0;
    int64_t word1;
    int64_t word2;
    int64_t word3;
    int64_t word4;
    int64_t word5;
    int64_t word6;
    int64_t word7;
    int64_t word8;
    int64_t word9;
    int64_t word10;
    int64_t word11;
    int64_t word12;
    int64_t word13;
    int64_t word14;
    int64_t word15;
};
struct bench_lrpc_bench_reply__args {
    uint64_t value;
};
struct bench_shmc_init_request__args {
    uint8_t coreid;
};
struct bench_shmc_init_reply__args {
    struct capref cap;
};

/*
 * Union type for all message arguments
 */
union bench_arg_union {
    struct bench_init_request__args init_request;
    struct bench_ump_init_msg__args ump_init_msg;
    struct bench_fsb_init_msg__args fsb_init_msg;
    struct bench_fsb_buffer_request__args fsb_buffer_request;
    struct bench_fsb_buffer_reply__args fsb_buffer_reply;
    struct bench_fsb_payload_request__args fsb_payload_request;
    struct bench_fsb_payload_reply__args fsb_payload_reply;
    struct bench_fsb_payload1_request__args fsb_payload1_request;
    struct bench_fsb_payload1_reply__args fsb_payload1_reply;
    struct bench_fsb_payload2_request__args fsb_payload2_request;
    struct bench_fsb_payload2_reply__args fsb_payload2_reply;
    struct bench_fsb_payload8_request__args fsb_payload8_request;
    struct bench_fsb_payload8_reply__args fsb_payload8_reply;
    struct bench_fsb_payload16_request__args fsb_payload16_request;
    struct bench_fsb_payload16_reply__args fsb_payload16_reply;
    struct bench_fsb_payload32_1_request__args fsb_payload32_1_request;
    struct bench_fsb_payload32_1_reply__args fsb_payload32_1_reply;
    struct bench_fsb_payload64_1_request__args fsb_payload64_1_request;
    struct bench_fsb_payload64_1_reply__args fsb_payload64_1_reply;
    struct bench_fsb_payload32_2_request__args fsb_payload32_2_request;
    struct bench_fsb_payload32_2_reply__args fsb_payload32_2_reply;
    struct bench_fsb_payload64_2_request__args fsb_payload64_2_request;
    struct bench_fsb_payload64_2_reply__args fsb_payload64_2_reply;
    struct bench_fsb_payload32_4_request__args fsb_payload32_4_request;
    struct bench_fsb_payload32_4_reply__args fsb_payload32_4_reply;
    struct bench_fsb_payload64_4_request__args fsb_payload64_4_request;
    struct bench_fsb_payload64_4_reply__args fsb_payload64_4_reply;
    struct bench_fsb_payload32_8_request__args fsb_payload32_8_request;
    struct bench_fsb_payload32_8_reply__args fsb_payload32_8_reply;
    struct bench_fsb_payload64_8_request__args fsb_payload64_8_request;
    struct bench_fsb_payload64_8_reply__args fsb_payload64_8_reply;
    struct bench_fsb_payload32_16_request__args fsb_payload32_16_request;
    struct bench_fsb_payload32_16_reply__args fsb_payload32_16_reply;
    struct bench_fsb_payload64_16_request__args fsb_payload64_16_request;
    struct bench_fsb_payload64_16_reply__args fsb_payload64_16_reply;
    struct bench_lrpc_bench_reply__args lrpc_bench_reply;
    struct bench_shmc_init_request__args shmc_init_request;
    struct bench_shmc_init_reply__args shmc_init_reply;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct bench_tx_vtbl {
    bench_init_request__tx_method_fn *init_request;
    bench_init_reply__tx_method_fn *init_reply;
    bench_token_request__tx_method_fn *token_request;
    bench_token_reply__tx_method_fn *token_reply;
    bench_busy_init_request__tx_method_fn *busy_init_request;
    bench_busy_init_reply__tx_method_fn *busy_init_reply;
    bench_busy_ping__tx_method_fn *busy_ping;
    bench_ump_init_msg__tx_method_fn *ump_init_msg;
    bench_fsb_init_msg__tx_method_fn *fsb_init_msg;
    bench_fsb_empty_request__tx_method_fn *fsb_empty_request;
    bench_fsb_empty_reply__tx_method_fn *fsb_empty_reply;
    bench_fsb_buffer_request__tx_method_fn *fsb_buffer_request;
    bench_fsb_buffer_reply__tx_method_fn *fsb_buffer_reply;
    bench_fsb_payload_request__tx_method_fn *fsb_payload_request;
    bench_fsb_payload_reply__tx_method_fn *fsb_payload_reply;
    bench_fsb_payload1_request__tx_method_fn *fsb_payload1_request;
    bench_fsb_payload1_reply__tx_method_fn *fsb_payload1_reply;
    bench_fsb_payload2_request__tx_method_fn *fsb_payload2_request;
    bench_fsb_payload2_reply__tx_method_fn *fsb_payload2_reply;
    bench_fsb_payload8_request__tx_method_fn *fsb_payload8_request;
    bench_fsb_payload8_reply__tx_method_fn *fsb_payload8_reply;
    bench_fsb_payload16_request__tx_method_fn *fsb_payload16_request;
    bench_fsb_payload16_reply__tx_method_fn *fsb_payload16_reply;
    bench_fsb_payload32_1_request__tx_method_fn *fsb_payload32_1_request;
    bench_fsb_payload32_1_reply__tx_method_fn *fsb_payload32_1_reply;
    bench_fsb_payload64_1_request__tx_method_fn *fsb_payload64_1_request;
    bench_fsb_payload64_1_reply__tx_method_fn *fsb_payload64_1_reply;
    bench_fsb_payload32_2_request__tx_method_fn *fsb_payload32_2_request;
    bench_fsb_payload32_2_reply__tx_method_fn *fsb_payload32_2_reply;
    bench_fsb_payload64_2_request__tx_method_fn *fsb_payload64_2_request;
    bench_fsb_payload64_2_reply__tx_method_fn *fsb_payload64_2_reply;
    bench_fsb_payload32_4_request__tx_method_fn *fsb_payload32_4_request;
    bench_fsb_payload32_4_reply__tx_method_fn *fsb_payload32_4_reply;
    bench_fsb_payload64_4_request__tx_method_fn *fsb_payload64_4_request;
    bench_fsb_payload64_4_reply__tx_method_fn *fsb_payload64_4_reply;
    bench_fsb_payload32_8_request__tx_method_fn *fsb_payload32_8_request;
    bench_fsb_payload32_8_reply__tx_method_fn *fsb_payload32_8_reply;
    bench_fsb_payload64_8_request__tx_method_fn *fsb_payload64_8_request;
    bench_fsb_payload64_8_reply__tx_method_fn *fsb_payload64_8_reply;
    bench_fsb_payload32_16_request__tx_method_fn *fsb_payload32_16_request;
    bench_fsb_payload32_16_reply__tx_method_fn *fsb_payload32_16_reply;
    bench_fsb_payload64_16_request__tx_method_fn *fsb_payload64_16_request;
    bench_fsb_payload64_16_reply__tx_method_fn *fsb_payload64_16_reply;
    bench_lrpc_init__tx_method_fn *lrpc_init;
    bench_lrpc_init_reply__tx_method_fn *lrpc_init_reply;
    bench_lrpc_bench_reply__tx_method_fn *lrpc_bench_reply;
    bench_shmc_init_request__tx_method_fn *shmc_init_request;
    bench_shmc_init_reply__tx_method_fn *shmc_init_reply;
    bench_shmc_start__tx_method_fn *shmc_start;
    bench_shmc_done__tx_method_fn *shmc_done;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct bench_rx_vtbl {
    bench_init_request__rx_method_fn *init_request;
    bench_init_reply__rx_method_fn *init_reply;
    bench_token_request__rx_method_fn *token_request;
    bench_token_reply__rx_method_fn *token_reply;
    bench_busy_init_request__rx_method_fn *busy_init_request;
    bench_busy_init_reply__rx_method_fn *busy_init_reply;
    bench_busy_ping__rx_method_fn *busy_ping;
    bench_ump_init_msg__rx_method_fn *ump_init_msg;
    bench_fsb_init_msg__rx_method_fn *fsb_init_msg;
    bench_fsb_empty_request__rx_method_fn *fsb_empty_request;
    bench_fsb_empty_reply__rx_method_fn *fsb_empty_reply;
    bench_fsb_buffer_request__rx_method_fn *fsb_buffer_request;
    bench_fsb_buffer_reply__rx_method_fn *fsb_buffer_reply;
    bench_fsb_payload_request__rx_method_fn *fsb_payload_request;
    bench_fsb_payload_reply__rx_method_fn *fsb_payload_reply;
    bench_fsb_payload1_request__rx_method_fn *fsb_payload1_request;
    bench_fsb_payload1_reply__rx_method_fn *fsb_payload1_reply;
    bench_fsb_payload2_request__rx_method_fn *fsb_payload2_request;
    bench_fsb_payload2_reply__rx_method_fn *fsb_payload2_reply;
    bench_fsb_payload8_request__rx_method_fn *fsb_payload8_request;
    bench_fsb_payload8_reply__rx_method_fn *fsb_payload8_reply;
    bench_fsb_payload16_request__rx_method_fn *fsb_payload16_request;
    bench_fsb_payload16_reply__rx_method_fn *fsb_payload16_reply;
    bench_fsb_payload32_1_request__rx_method_fn *fsb_payload32_1_request;
    bench_fsb_payload32_1_reply__rx_method_fn *fsb_payload32_1_reply;
    bench_fsb_payload64_1_request__rx_method_fn *fsb_payload64_1_request;
    bench_fsb_payload64_1_reply__rx_method_fn *fsb_payload64_1_reply;
    bench_fsb_payload32_2_request__rx_method_fn *fsb_payload32_2_request;
    bench_fsb_payload32_2_reply__rx_method_fn *fsb_payload32_2_reply;
    bench_fsb_payload64_2_request__rx_method_fn *fsb_payload64_2_request;
    bench_fsb_payload64_2_reply__rx_method_fn *fsb_payload64_2_reply;
    bench_fsb_payload32_4_request__rx_method_fn *fsb_payload32_4_request;
    bench_fsb_payload32_4_reply__rx_method_fn *fsb_payload32_4_reply;
    bench_fsb_payload64_4_request__rx_method_fn *fsb_payload64_4_request;
    bench_fsb_payload64_4_reply__rx_method_fn *fsb_payload64_4_reply;
    bench_fsb_payload32_8_request__rx_method_fn *fsb_payload32_8_request;
    bench_fsb_payload32_8_reply__rx_method_fn *fsb_payload32_8_reply;
    bench_fsb_payload64_8_request__rx_method_fn *fsb_payload64_8_request;
    bench_fsb_payload64_8_reply__rx_method_fn *fsb_payload64_8_reply;
    bench_fsb_payload32_16_request__rx_method_fn *fsb_payload32_16_request;
    bench_fsb_payload32_16_reply__rx_method_fn *fsb_payload32_16_reply;
    bench_fsb_payload64_16_request__rx_method_fn *fsb_payload64_16_request;
    bench_fsb_payload64_16_reply__rx_method_fn *fsb_payload64_16_reply;
    bench_lrpc_init__rx_method_fn *lrpc_init;
    bench_lrpc_init_reply__rx_method_fn *lrpc_init_reply;
    bench_lrpc_bench_reply__rx_method_fn *lrpc_bench_reply;
    bench_shmc_init_request__rx_method_fn *shmc_init_request;
    bench_shmc_init_reply__rx_method_fn *shmc_init_reply;
    bench_shmc_start__rx_method_fn *shmc_start;
    bench_shmc_done__rx_method_fn *shmc_done;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t bench_connect_fn(void *st, struct bench_binding *binding);

/*
 * Export state struct
 */
struct bench_export {
    struct idc_export common;
    bench_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t bench_export(void *st, idc_export_callback_fn *export_cb, bench_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct bench_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t bench_accept(struct bench_frameinfo *_frameinfo, void *st, bench_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct bench_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    bench_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    bench_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    bench_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    bench_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    bench_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct bench_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct bench_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union bench_arg_union tx_union;
    union bench_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum bench_msg_enum tx_msgnum;
    enum bench_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    bench_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t bench_bind(iref_t i, bench_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t bench_connect(struct bench_frameinfo *_frameinfo, bench_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t bench_init_request__tx(struct bench_binding *_binding, struct event_closure _continuation, uint8_t coreid) __attribute__ ((always_inline));
static inline errval_t bench_init_request__tx(struct bench_binding *_binding, struct event_closure _continuation, uint8_t coreid)
{
    return(((_binding->tx_vtbl).init_request)(_binding, _continuation, coreid));
}

static inline errval_t bench_init_reply__tx(struct bench_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bench_init_reply__tx(struct bench_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).init_reply)(_binding, _continuation));
}

static inline errval_t bench_token_request__tx(struct bench_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bench_token_request__tx(struct bench_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).token_request)(_binding, _continuation));
}

static inline errval_t bench_token_reply__tx(struct bench_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bench_token_reply__tx(struct bench_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).token_reply)(_binding, _continuation));
}

static inline errval_t bench_busy_init_request__tx(struct bench_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bench_busy_init_request__tx(struct bench_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).busy_init_request)(_binding, _continuation));
}

static inline errval_t bench_busy_init_reply__tx(struct bench_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bench_busy_init_reply__tx(struct bench_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).busy_init_reply)(_binding, _continuation));
}

static inline errval_t bench_busy_ping__tx(struct bench_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bench_busy_ping__tx(struct bench_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).busy_ping)(_binding, _continuation));
}

static inline errval_t bench_ump_init_msg__tx(struct bench_binding *_binding, struct event_closure _continuation, uint8_t coreid) __attribute__ ((always_inline));
static inline errval_t bench_ump_init_msg__tx(struct bench_binding *_binding, struct event_closure _continuation, uint8_t coreid)
{
    return(((_binding->tx_vtbl).ump_init_msg)(_binding, _continuation, coreid));
}

static inline errval_t bench_fsb_init_msg__tx(struct bench_binding *_binding, struct event_closure _continuation, uint8_t coreid) __attribute__ ((always_inline));
static inline errval_t bench_fsb_init_msg__tx(struct bench_binding *_binding, struct event_closure _continuation, uint8_t coreid)
{
    return(((_binding->tx_vtbl).fsb_init_msg)(_binding, _continuation, coreid));
}

static inline errval_t bench_fsb_empty_request__tx(struct bench_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bench_fsb_empty_request__tx(struct bench_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).fsb_empty_request)(_binding, _continuation));
}

static inline errval_t bench_fsb_empty_reply__tx(struct bench_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bench_fsb_empty_reply__tx(struct bench_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).fsb_empty_reply)(_binding, _continuation));
}

static inline errval_t bench_fsb_buffer_request__tx(struct bench_binding *_binding, struct event_closure _continuation, const uint8_t *buf, size_t size) __attribute__ ((always_inline));
static inline errval_t bench_fsb_buffer_request__tx(struct bench_binding *_binding, struct event_closure _continuation, const uint8_t *buf, size_t size)
{
    return(((_binding->tx_vtbl).fsb_buffer_request)(_binding, _continuation, buf, size));
}

static inline errval_t bench_fsb_buffer_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, const uint8_t *buf, size_t size) __attribute__ ((always_inline));
static inline errval_t bench_fsb_buffer_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, const uint8_t *buf, size_t size)
{
    return(((_binding->tx_vtbl).fsb_buffer_reply)(_binding, _continuation, buf, size));
}

static inline errval_t bench_fsb_payload_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3)
{
    return(((_binding->tx_vtbl).fsb_payload_request)(_binding, _continuation, word0, word1, word2, word3));
}

static inline errval_t bench_fsb_payload_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3)
{
    return(((_binding->tx_vtbl).fsb_payload_reply)(_binding, _continuation, word0, word1, word2, word3));
}

static inline errval_t bench_fsb_payload1_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload1_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0)
{
    return(((_binding->tx_vtbl).fsb_payload1_request)(_binding, _continuation, word0));
}

static inline errval_t bench_fsb_payload1_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload1_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0)
{
    return(((_binding->tx_vtbl).fsb_payload1_reply)(_binding, _continuation, word0));
}

static inline errval_t bench_fsb_payload2_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload2_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1)
{
    return(((_binding->tx_vtbl).fsb_payload2_request)(_binding, _continuation, word0, word1));
}

static inline errval_t bench_fsb_payload2_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload2_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1)
{
    return(((_binding->tx_vtbl).fsb_payload2_reply)(_binding, _continuation, word0, word1));
}

static inline errval_t bench_fsb_payload8_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload8_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7)
{
    return(((_binding->tx_vtbl).fsb_payload8_request)(_binding, _continuation, word0, word1, word2, word3, word4, word5, word6, word7));
}

static inline errval_t bench_fsb_payload8_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload8_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7)
{
    return(((_binding->tx_vtbl).fsb_payload8_reply)(_binding, _continuation, word0, word1, word2, word3, word4, word5, word6, word7));
}

static inline errval_t bench_fsb_payload16_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload16_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15)
{
    return(((_binding->tx_vtbl).fsb_payload16_request)(_binding, _continuation, word0, word1, word2, word3, word4, word5, word6, word7, word8, word9, word10, word11, word12, word13, word14, word15));
}

static inline errval_t bench_fsb_payload16_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload16_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15)
{
    return(((_binding->tx_vtbl).fsb_payload16_reply)(_binding, _continuation, word0, word1, word2, word3, word4, word5, word6, word7, word8, word9, word10, word11, word12, word13, word14, word15));
}

static inline errval_t bench_fsb_payload32_1_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload32_1_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0)
{
    return(((_binding->tx_vtbl).fsb_payload32_1_request)(_binding, _continuation, word0));
}

static inline errval_t bench_fsb_payload32_1_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload32_1_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0)
{
    return(((_binding->tx_vtbl).fsb_payload32_1_reply)(_binding, _continuation, word0));
}

static inline errval_t bench_fsb_payload64_1_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload64_1_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0)
{
    return(((_binding->tx_vtbl).fsb_payload64_1_request)(_binding, _continuation, word0));
}

static inline errval_t bench_fsb_payload64_1_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload64_1_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0)
{
    return(((_binding->tx_vtbl).fsb_payload64_1_reply)(_binding, _continuation, word0));
}

static inline errval_t bench_fsb_payload32_2_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload32_2_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1)
{
    return(((_binding->tx_vtbl).fsb_payload32_2_request)(_binding, _continuation, word0, word1));
}

static inline errval_t bench_fsb_payload32_2_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload32_2_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1)
{
    return(((_binding->tx_vtbl).fsb_payload32_2_reply)(_binding, _continuation, word0, word1));
}

static inline errval_t bench_fsb_payload64_2_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload64_2_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1)
{
    return(((_binding->tx_vtbl).fsb_payload64_2_request)(_binding, _continuation, word0, word1));
}

static inline errval_t bench_fsb_payload64_2_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload64_2_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1)
{
    return(((_binding->tx_vtbl).fsb_payload64_2_reply)(_binding, _continuation, word0, word1));
}

static inline errval_t bench_fsb_payload32_4_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload32_4_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3)
{
    return(((_binding->tx_vtbl).fsb_payload32_4_request)(_binding, _continuation, word0, word1, word2, word3));
}

static inline errval_t bench_fsb_payload32_4_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload32_4_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3)
{
    return(((_binding->tx_vtbl).fsb_payload32_4_reply)(_binding, _continuation, word0, word1, word2, word3));
}

static inline errval_t bench_fsb_payload64_4_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload64_4_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3)
{
    return(((_binding->tx_vtbl).fsb_payload64_4_request)(_binding, _continuation, word0, word1, word2, word3));
}

static inline errval_t bench_fsb_payload64_4_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload64_4_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3)
{
    return(((_binding->tx_vtbl).fsb_payload64_4_reply)(_binding, _continuation, word0, word1, word2, word3));
}

static inline errval_t bench_fsb_payload32_8_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload32_8_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7)
{
    return(((_binding->tx_vtbl).fsb_payload32_8_request)(_binding, _continuation, word0, word1, word2, word3, word4, word5, word6, word7));
}

static inline errval_t bench_fsb_payload32_8_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload32_8_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7)
{
    return(((_binding->tx_vtbl).fsb_payload32_8_reply)(_binding, _continuation, word0, word1, word2, word3, word4, word5, word6, word7));
}

static inline errval_t bench_fsb_payload64_8_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload64_8_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7)
{
    return(((_binding->tx_vtbl).fsb_payload64_8_request)(_binding, _continuation, word0, word1, word2, word3, word4, word5, word6, word7));
}

static inline errval_t bench_fsb_payload64_8_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload64_8_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7)
{
    return(((_binding->tx_vtbl).fsb_payload64_8_reply)(_binding, _continuation, word0, word1, word2, word3, word4, word5, word6, word7));
}

static inline errval_t bench_fsb_payload32_16_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload32_16_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15)
{
    return(((_binding->tx_vtbl).fsb_payload32_16_request)(_binding, _continuation, word0, word1, word2, word3, word4, word5, word6, word7, word8, word9, word10, word11, word12, word13, word14, word15));
}

static inline errval_t bench_fsb_payload32_16_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload32_16_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int32_t word0, int32_t word1, int32_t word2, int32_t word3, int32_t word4, int32_t word5, int32_t word6, int32_t word7, int32_t word8, int32_t word9, int32_t word10, int32_t word11, int32_t word12, int32_t word13, int32_t word14, int32_t word15)
{
    return(((_binding->tx_vtbl).fsb_payload32_16_reply)(_binding, _continuation, word0, word1, word2, word3, word4, word5, word6, word7, word8, word9, word10, word11, word12, word13, word14, word15));
}

static inline errval_t bench_fsb_payload64_16_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7, int64_t word8, int64_t word9, int64_t word10, int64_t word11, int64_t word12, int64_t word13, int64_t word14, int64_t word15) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload64_16_request__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7, int64_t word8, int64_t word9, int64_t word10, int64_t word11, int64_t word12, int64_t word13, int64_t word14, int64_t word15)
{
    return(((_binding->tx_vtbl).fsb_payload64_16_request)(_binding, _continuation, word0, word1, word2, word3, word4, word5, word6, word7, word8, word9, word10, word11, word12, word13, word14, word15));
}

static inline errval_t bench_fsb_payload64_16_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7, int64_t word8, int64_t word9, int64_t word10, int64_t word11, int64_t word12, int64_t word13, int64_t word14, int64_t word15) __attribute__ ((always_inline));
static inline errval_t bench_fsb_payload64_16_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, int64_t word0, int64_t word1, int64_t word2, int64_t word3, int64_t word4, int64_t word5, int64_t word6, int64_t word7, int64_t word8, int64_t word9, int64_t word10, int64_t word11, int64_t word12, int64_t word13, int64_t word14, int64_t word15)
{
    return(((_binding->tx_vtbl).fsb_payload64_16_reply)(_binding, _continuation, word0, word1, word2, word3, word4, word5, word6, word7, word8, word9, word10, word11, word12, word13, word14, word15));
}

static inline errval_t bench_lrpc_init__tx(struct bench_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bench_lrpc_init__tx(struct bench_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).lrpc_init)(_binding, _continuation));
}

static inline errval_t bench_lrpc_init_reply__tx(struct bench_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bench_lrpc_init_reply__tx(struct bench_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).lrpc_init_reply)(_binding, _continuation));
}

static inline errval_t bench_lrpc_bench_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, uint64_t value) __attribute__ ((always_inline));
static inline errval_t bench_lrpc_bench_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, uint64_t value)
{
    return(((_binding->tx_vtbl).lrpc_bench_reply)(_binding, _continuation, value));
}

static inline errval_t bench_shmc_init_request__tx(struct bench_binding *_binding, struct event_closure _continuation, uint8_t coreid) __attribute__ ((always_inline));
static inline errval_t bench_shmc_init_request__tx(struct bench_binding *_binding, struct event_closure _continuation, uint8_t coreid)
{
    return(((_binding->tx_vtbl).shmc_init_request)(_binding, _continuation, coreid));
}

static inline errval_t bench_shmc_init_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, struct capref cap) __attribute__ ((always_inline));
static inline errval_t bench_shmc_init_reply__tx(struct bench_binding *_binding, struct event_closure _continuation, struct capref cap)
{
    return(((_binding->tx_vtbl).shmc_init_reply)(_binding, _continuation, cap));
}

static inline errval_t bench_shmc_start__tx(struct bench_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bench_shmc_start__tx(struct bench_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).shmc_start)(_binding, _continuation));
}

static inline errval_t bench_shmc_done__tx(struct bench_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t bench_shmc_done__tx(struct bench_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).shmc_done)(_binding, _continuation));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/bench_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/bench_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/bench_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/bench_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __bench_IF_H
