#ifndef __octopus_THC_IF_H
#define __octopus_THC_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: octopus
 * INTEFACE FILE: ../if/octopus.if
 * INTERFACE DESCRIPTION: octopus RPC Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */
#ifdef BARRELFISH
#include "thc/thcstubs.h"
#include "if/octopus_defs.h"
#else
#include "thcstubs.h"
#include "octopus.h"
#endif // BARRELFISH

/*
 * Typedefs for binding structures
 */

typedef struct octopus_thc_client_binding_t octopus_thc_client_binding_t;
typedef struct octopus_thc_service_binding_t octopus_thc_service_binding_t;

/*
 * Struct type for holding the args for each msg
 */
struct octopus_get_identifier__in_args_t {
};
struct octopus_get_identifier__out_args_t {
    uint64_t id;
};
union octopus_get_identifier___union_t {
    struct octopus_get_identifier__in_args_t in;
    struct octopus_get_identifier__out_args_t out;
};
struct octopus_identify__in_args_t {
    uint64_t id;
    octopus_binding_type_t type;
};
struct octopus_identify__out_args_t {
};
union octopus_identify___union_t {
    struct octopus_identify__in_args_t in;
    struct octopus_identify__out_args_t out;
};
struct octopus_get_names__in_args_t {
    char *query;
    octopus_trigger_t t;
};
struct octopus_get_names__out_args_t {
    char *output;
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
union octopus_get_names___union_t {
    struct octopus_get_names__in_args_t in;
    struct octopus_get_names__out_args_t out;
};
struct octopus_get__in_args_t {
    char *query;
    octopus_trigger_t t;
};
struct octopus_get__out_args_t {
    char *output;
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
union octopus_get___union_t {
    struct octopus_get__in_args_t in;
    struct octopus_get__out_args_t out;
};
struct octopus_set__in_args_t {
    char *query;
    uint64_t mode;
    octopus_trigger_t t;
    bool get;
};
struct octopus_set__out_args_t {
    char *record;
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
union octopus_set___union_t {
    struct octopus_set__in_args_t in;
    struct octopus_set__out_args_t out;
};
struct octopus_get_with_idcap__in_args_t {
    struct capref idcap;
    octopus_trigger_t t;
};
struct octopus_get_with_idcap__out_args_t {
    char *output;
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
union octopus_get_with_idcap___union_t {
    struct octopus_get_with_idcap__in_args_t in;
    struct octopus_get_with_idcap__out_args_t out;
};
struct octopus_set_with_idcap__in_args_t {
    struct capref idcap;
    char *attributes;
    uint64_t mode;
    octopus_trigger_t t;
    bool get;
};
struct octopus_set_with_idcap__out_args_t {
    char *record;
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
union octopus_set_with_idcap___union_t {
    struct octopus_set_with_idcap__in_args_t in;
    struct octopus_set_with_idcap__out_args_t out;
};
struct octopus_del__in_args_t {
    char *query;
    octopus_trigger_t t;
};
struct octopus_del__out_args_t {
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
union octopus_del___union_t {
    struct octopus_del__in_args_t in;
    struct octopus_del__out_args_t out;
};
struct octopus_exists__in_args_t {
    char *query;
    octopus_trigger_t t;
};
struct octopus_exists__out_args_t {
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
union octopus_exists___union_t {
    struct octopus_exists__in_args_t in;
    struct octopus_exists__out_args_t out;
};
struct octopus_wait_for__in_args_t {
    char *query;
};
struct octopus_wait_for__out_args_t {
    char *record;
    octopus_errval_t error_code;
};
union octopus_wait_for___union_t {
    struct octopus_wait_for__in_args_t in;
    struct octopus_wait_for__out_args_t out;
};
struct octopus_remove_trigger__in_args_t {
    uint64_t id;
};
struct octopus_remove_trigger__out_args_t {
    octopus_errval_t error_code;
};
union octopus_remove_trigger___union_t {
    struct octopus_remove_trigger__in_args_t in;
    struct octopus_remove_trigger__out_args_t out;
};
struct octopus_subscribe__in_args_t {
    char *query;
    uint64_t trigger_fn;
    uint64_t state;
};
struct octopus_subscribe__out_args_t {
    uint64_t id;
    octopus_errval_t error_code;
};
union octopus_subscribe___union_t {
    struct octopus_subscribe__in_args_t in;
    struct octopus_subscribe__out_args_t out;
};
struct octopus_unsubscribe__in_args_t {
    uint64_t id;
};
struct octopus_unsubscribe__out_args_t {
    octopus_errval_t error_code;
};
union octopus_unsubscribe___union_t {
    struct octopus_unsubscribe__in_args_t in;
    struct octopus_unsubscribe__out_args_t out;
};
struct octopus_publish__in_args_t {
    char *record;
};
struct octopus_publish__out_args_t {
    octopus_errval_t error_code;
};
union octopus_publish___union_t {
    struct octopus_publish__in_args_t in;
    struct octopus_publish__out_args_t out;
};
struct octopus_trigger__args_t {
    octopus_trigger_id_t id;
    uint64_t trigger_fn;
    octopus_mode_t m;
    char *record;
    uint64_t state;
};
struct octopus_subscription__args_t {
    octopus_trigger_id_t id;
    uint64_t trigger_fn;
    octopus_mode_t m;
    char *record;
    uint64_t state;
};
struct octopus_get_cap__in_args_t {
    char *key;
};
struct octopus_get_cap__out_args_t {
    struct capref retcap;
    octopus_errval_t reterr;
};
union octopus_get_cap___union_t {
    struct octopus_get_cap__in_args_t in;
    struct octopus_get_cap__out_args_t out;
};
struct octopus_put_cap__in_args_t {
    char *key;
    struct capref storecap;
};
struct octopus_put_cap__out_args_t {
    octopus_errval_t reterr;
};
union octopus_put_cap___union_t {
    struct octopus_put_cap__in_args_t in;
    struct octopus_put_cap__out_args_t out;
};
struct octopus_remove_cap__in_args_t {
    char *key;
};
struct octopus_remove_cap__out_args_t {
    octopus_errval_t reterr;
};
union octopus_remove_cap___union_t {
    struct octopus_remove_cap__in_args_t in;
    struct octopus_remove_cap__out_args_t out;
};

/*
 * Union type for all message arguments
 */
union octopus_thc_arg_union {
    struct octopus_trigger__args_t trigger;
    struct octopus_subscription__args_t subscription;
    union octopus_get_identifier___union_t get_identifier;
    union octopus_identify___union_t identify;
    union octopus_get_names___union_t get_names;
    union octopus_get___union_t get;
    union octopus_set___union_t set;
    union octopus_get_with_idcap___union_t get_with_idcap;
    union octopus_set_with_idcap___union_t set_with_idcap;
    union octopus_del___union_t del;
    union octopus_exists___union_t exists;
    union octopus_wait_for___union_t wait_for;
    union octopus_remove_trigger___union_t remove_trigger;
    union octopus_subscribe___union_t subscribe;
    union octopus_unsubscribe___union_t unsubscribe;
    union octopus_publish___union_t publish;
    union octopus_get_cap___union_t get_cap;
    union octopus_put_cap___union_t put_cap;
    union octopus_remove_cap___union_t remove_cap;
};

/*
 * Enumerations for message numbers
 */
typedef enum octopus_msg_enum_t {
    octopus_trigger,
    octopus_subscription,
    octopus_get_identifier,
    octopus_identify,
    octopus_get_names,
    octopus_get,
    octopus_set,
    octopus_get_with_idcap,
    octopus_set_with_idcap,
    octopus_del,
    octopus_exists,
    octopus_wait_for,
    octopus_remove_trigger,
    octopus_subscribe,
    octopus_unsubscribe,
    octopus_publish,
    octopus_get_cap,
    octopus_put_cap,
    octopus_remove_cap
} octopus_msg_enum_t;
typedef enum octopus_call_msg_enum_t {
    octopus__call_trigger,
    octopus__call_subscription,
    octopus__call_get_identifier,
    octopus__call_identify,
    octopus__call_get_names,
    octopus__call_get,
    octopus__call_set,
    octopus__call_get_with_idcap,
    octopus__call_set_with_idcap,
    octopus__call_del,
    octopus__call_exists,
    octopus__call_wait_for,
    octopus__call_remove_trigger,
    octopus__call_subscribe,
    octopus__call_unsubscribe,
    octopus__call_publish,
    octopus__call_get_cap,
    octopus__call_put_cap,
    octopus__call_remove_cap
} octopus_call_msg_enum_t;
typedef enum octopus_resp_msg_enum_t {
    octopus__resp_trigger,
    octopus__resp_subscription,
    octopus__resp_get_identifier,
    octopus__resp_identify,
    octopus__resp_get_names,
    octopus__resp_get,
    octopus__resp_set,
    octopus__resp_get_with_idcap,
    octopus__resp_set_with_idcap,
    octopus__resp_del,
    octopus__resp_exists,
    octopus__resp_wait_for,
    octopus__resp_remove_trigger,
    octopus__resp_subscribe,
    octopus__resp_unsubscribe,
    octopus__resp_publish,
    octopus__resp_get_cap,
    octopus__resp_put_cap,
    octopus__resp_remove_cap
} octopus_resp_msg_enum_t;


/*
 * Signatures for individual send/receive operations
 */

typedef  errval_t (*octopus_get_identifier__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding);
typedef  errval_t (*octopus_identify__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, uint64_t id, octopus_binding_type_t type);
typedef  errval_t (*octopus_get_names__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t);
typedef  errval_t (*octopus_get__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t);
typedef  errval_t (*octopus_set__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, const char *query, uint64_t mode, octopus_trigger_t t, bool get);
typedef  errval_t (*octopus_get_with_idcap__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, struct capref idcap, octopus_trigger_t t);
typedef  errval_t (*octopus_set_with_idcap__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, struct capref idcap, const char *attributes, uint64_t mode, octopus_trigger_t t, bool get);
typedef  errval_t (*octopus_del__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t);
typedef  errval_t (*octopus_exists__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t);
typedef  errval_t (*octopus_wait_for__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, const char *query);
typedef  errval_t (*octopus_remove_trigger__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, uint64_t id);
typedef  errval_t (*octopus_subscribe__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, const char *query, uint64_t trigger_fn, uint64_t state);
typedef  errval_t (*octopus_unsubscribe__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, uint64_t id);
typedef  errval_t (*octopus_publish__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, const char *record);
typedef  errval_t (*octopus_trigger__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state);
typedef  errval_t (*octopus_subscription__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state);
typedef  errval_t (*octopus_get_cap__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, const char *key);
typedef  errval_t (*octopus_put_cap__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, const char *key, struct capref storecap);
typedef  errval_t (*octopus_remove_cap__thc_client_send_t)(octopus_thc_client_binding_t *_thc_binding, const char *key);
typedef  errval_t (*octopus_get_identifier__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding);
typedef  errval_t (*octopus_identify__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, uint64_t id, octopus_binding_type_t type);
typedef  errval_t (*octopus_get_names__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t);
typedef  errval_t (*octopus_get__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t);
typedef  errval_t (*octopus_set__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, uint64_t mode, octopus_trigger_t t, bool get);
typedef  errval_t (*octopus_get_with_idcap__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, struct capref idcap, octopus_trigger_t t);
typedef  errval_t (*octopus_set_with_idcap__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, struct capref idcap, const char *attributes, uint64_t mode, octopus_trigger_t t, bool get);
typedef  errval_t (*octopus_del__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t);
typedef  errval_t (*octopus_exists__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t);
typedef  errval_t (*octopus_wait_for__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query);
typedef  errval_t (*octopus_remove_trigger__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, uint64_t id);
typedef  errval_t (*octopus_subscribe__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, uint64_t trigger_fn, uint64_t state);
typedef  errval_t (*octopus_unsubscribe__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, uint64_t id);
typedef  errval_t (*octopus_publish__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, const char *record);
typedef  errval_t (*octopus_trigger__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state);
typedef  errval_t (*octopus_subscription__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state);
typedef  errval_t (*octopus_get_cap__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, const char *key);
typedef  errval_t (*octopus_put_cap__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, const char *key, struct capref storecap);
typedef  errval_t (*octopus_remove_cap__thc_client_send_t_x)(octopus_thc_client_binding_t *_thc_binding, const char *key);
typedef  errval_t (*octopus_get_identifier__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding);
typedef  errval_t (*octopus_identify__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, uint64_t *id, octopus_binding_type_t *type);
typedef  errval_t (*octopus_get_names__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, char **query, octopus_trigger_t *t);
typedef  errval_t (*octopus_get__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, char **query, octopus_trigger_t *t);
typedef  errval_t (*octopus_set__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, char **query, uint64_t *mode, octopus_trigger_t *t, bool *get);
typedef  errval_t (*octopus_get_with_idcap__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, struct capref *idcap, octopus_trigger_t *t);
typedef  errval_t (*octopus_set_with_idcap__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, struct capref *idcap, char **attributes, uint64_t *mode, octopus_trigger_t *t, bool *get);
typedef  errval_t (*octopus_del__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, char **query, octopus_trigger_t *t);
typedef  errval_t (*octopus_exists__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, char **query, octopus_trigger_t *t);
typedef  errval_t (*octopus_wait_for__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, char **query);
typedef  errval_t (*octopus_remove_trigger__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, uint64_t *id);
typedef  errval_t (*octopus_subscribe__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, char **query, uint64_t *trigger_fn, uint64_t *state);
typedef  errval_t (*octopus_unsubscribe__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, uint64_t *id);
typedef  errval_t (*octopus_publish__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, char **record);
typedef  errval_t (*octopus_trigger__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, octopus_trigger_id_t *id, uint64_t *trigger_fn, octopus_mode_t *m, char **record, uint64_t *state);
typedef  errval_t (*octopus_subscription__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, octopus_trigger_id_t *id, uint64_t *trigger_fn, octopus_mode_t *m, char **record, uint64_t *state);
typedef  errval_t (*octopus_get_cap__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, char **key);
typedef  errval_t (*octopus_put_cap__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, char **key, struct capref *storecap);
typedef  errval_t (*octopus_remove_cap__thc_service_recv_t)(octopus_thc_service_binding_t *_thc_binding, char **key);
typedef  errval_t (*octopus_get_identifier__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding);
typedef  errval_t (*octopus_identify__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, uint64_t *id, octopus_binding_type_t *type);
typedef  errval_t (*octopus_get_names__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, char **query, octopus_trigger_t *t);
typedef  errval_t (*octopus_get__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, char **query, octopus_trigger_t *t);
typedef  errval_t (*octopus_set__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, char **query, uint64_t *mode, octopus_trigger_t *t, bool *get);
typedef  errval_t (*octopus_get_with_idcap__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, struct capref *idcap, octopus_trigger_t *t);
typedef  errval_t (*octopus_set_with_idcap__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, struct capref *idcap, char **attributes, uint64_t *mode, octopus_trigger_t *t, bool *get);
typedef  errval_t (*octopus_del__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, char **query, octopus_trigger_t *t);
typedef  errval_t (*octopus_exists__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, char **query, octopus_trigger_t *t);
typedef  errval_t (*octopus_wait_for__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, char **query);
typedef  errval_t (*octopus_remove_trigger__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, uint64_t *id);
typedef  errval_t (*octopus_subscribe__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, char **query, uint64_t *trigger_fn, uint64_t *state);
typedef  errval_t (*octopus_unsubscribe__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, uint64_t *id);
typedef  errval_t (*octopus_publish__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, char **record);
typedef  errval_t (*octopus_trigger__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, octopus_trigger_id_t *id, uint64_t *trigger_fn, octopus_mode_t *m, char **record, uint64_t *state);
typedef  errval_t (*octopus_subscription__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, octopus_trigger_id_t *id, uint64_t *trigger_fn, octopus_mode_t *m, char **record, uint64_t *state);
typedef  errval_t (*octopus_get_cap__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, char **key);
typedef  errval_t (*octopus_put_cap__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, char **key, struct capref *storecap);
typedef  errval_t (*octopus_remove_cap__thc_service_recv_t_x)(octopus_thc_service_binding_t *_thc_binding, char **key);
typedef  errval_t (*octopus_get_identifier__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, uint64_t id);
typedef  errval_t (*octopus_identify__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding);
typedef  errval_t (*octopus_get_names__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_get__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_set__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, const char *record, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_get_with_idcap__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_set_with_idcap__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, const char *record, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_del__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_exists__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_wait_for__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, const char *record, octopus_errval_t error_code);
typedef  errval_t (*octopus_remove_trigger__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, octopus_errval_t error_code);
typedef  errval_t (*octopus_subscribe__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, uint64_t id, octopus_errval_t error_code);
typedef  errval_t (*octopus_unsubscribe__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, octopus_errval_t error_code);
typedef  errval_t (*octopus_publish__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, octopus_errval_t error_code);
typedef  errval_t (*octopus_trigger__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state);
typedef  errval_t (*octopus_subscription__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state);
typedef  errval_t (*octopus_get_cap__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, struct capref retcap, octopus_errval_t reterr);
typedef  errval_t (*octopus_put_cap__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, octopus_errval_t reterr);
typedef  errval_t (*octopus_remove_cap__thc_service_send_t)(octopus_thc_service_binding_t *_thc_binding, octopus_errval_t reterr);
typedef  errval_t (*octopus_get_identifier__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, uint64_t id);
typedef  errval_t (*octopus_identify__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding);
typedef  errval_t (*octopus_get_names__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_get__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_set__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, const char *record, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_get_with_idcap__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_set_with_idcap__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, const char *record, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_del__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_exists__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t (*octopus_wait_for__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, const char *record, octopus_errval_t error_code);
typedef  errval_t (*octopus_remove_trigger__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, octopus_errval_t error_code);
typedef  errval_t (*octopus_subscribe__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, uint64_t id, octopus_errval_t error_code);
typedef  errval_t (*octopus_unsubscribe__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, octopus_errval_t error_code);
typedef  errval_t (*octopus_publish__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, octopus_errval_t error_code);
typedef  errval_t (*octopus_trigger__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state);
typedef  errval_t (*octopus_subscription__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state);
typedef  errval_t (*octopus_get_cap__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, struct capref retcap, octopus_errval_t reterr);
typedef  errval_t (*octopus_put_cap__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, octopus_errval_t reterr);
typedef  errval_t (*octopus_remove_cap__thc_service_send_t_x)(octopus_thc_service_binding_t *_thc_binding, octopus_errval_t reterr);
typedef  errval_t (*octopus_get_identifier__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, uint64_t *id);
typedef  errval_t (*octopus_identify__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding);
typedef  errval_t (*octopus_get_names__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_get__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_set__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, char **record, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_get_with_idcap__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_set_with_idcap__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, char **record, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_del__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_exists__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_wait_for__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, char **record, octopus_errval_t *error_code);
typedef  errval_t (*octopus_remove_trigger__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, octopus_errval_t *error_code);
typedef  errval_t (*octopus_subscribe__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, uint64_t *id, octopus_errval_t *error_code);
typedef  errval_t (*octopus_unsubscribe__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, octopus_errval_t *error_code);
typedef  errval_t (*octopus_publish__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, octopus_errval_t *error_code);
typedef  errval_t (*octopus_trigger__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, octopus_trigger_id_t *id, uint64_t *trigger_fn, octopus_mode_t *m, char **record, uint64_t *state);
typedef  errval_t (*octopus_subscription__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, octopus_trigger_id_t *id, uint64_t *trigger_fn, octopus_mode_t *m, char **record, uint64_t *state);
typedef  errval_t (*octopus_get_cap__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, struct capref *retcap, octopus_errval_t *reterr);
typedef  errval_t (*octopus_put_cap__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, octopus_errval_t *reterr);
typedef  errval_t (*octopus_remove_cap__thc_client_recv_t)(octopus_thc_client_binding_t *_thc_binding, octopus_errval_t *reterr);
typedef  errval_t (*octopus_get_identifier__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, uint64_t *id);
typedef  errval_t (*octopus_identify__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding);
typedef  errval_t (*octopus_get_names__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_get__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_set__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, char **record, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_get_with_idcap__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_set_with_idcap__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, char **record, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_del__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_exists__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_wait_for__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, char **record, octopus_errval_t *error_code);
typedef  errval_t (*octopus_remove_trigger__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, octopus_errval_t *error_code);
typedef  errval_t (*octopus_subscribe__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, uint64_t *id, octopus_errval_t *error_code);
typedef  errval_t (*octopus_unsubscribe__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, octopus_errval_t *error_code);
typedef  errval_t (*octopus_publish__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, octopus_errval_t *error_code);
typedef  errval_t (*octopus_trigger__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, octopus_trigger_id_t *id, uint64_t *trigger_fn, octopus_mode_t *m, char **record, uint64_t *state);
typedef  errval_t (*octopus_subscription__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, octopus_trigger_id_t *id, uint64_t *trigger_fn, octopus_mode_t *m, char **record, uint64_t *state);
typedef  errval_t (*octopus_get_cap__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, struct capref *retcap, octopus_errval_t *reterr);
typedef  errval_t (*octopus_put_cap__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, octopus_errval_t *reterr);
typedef  errval_t (*octopus_remove_cap__thc_client_recv_t_x)(octopus_thc_client_binding_t *_thc_binding, octopus_errval_t *reterr);
typedef  errval_t (*octopus_get_identifier__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, uint64_t *id);
typedef  errval_t (*octopus_identify__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, uint64_t id, octopus_binding_type_t type);
typedef  errval_t (*octopus_get_names__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_get__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_set__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, const char *query, uint64_t mode, octopus_trigger_t t, bool get, char **record, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_get_with_idcap__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, struct capref idcap, octopus_trigger_t t, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_set_with_idcap__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, struct capref idcap, const char *attributes, uint64_t mode, octopus_trigger_t t, bool get, char **record, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_del__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_exists__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_wait_for__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, const char *query, char **record, octopus_errval_t *error_code);
typedef  errval_t (*octopus_remove_trigger__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, uint64_t id, octopus_errval_t *error_code);
typedef  errval_t (*octopus_subscribe__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, const char *query, uint64_t trigger_fn, uint64_t state, uint64_t *id, octopus_errval_t *error_code);
typedef  errval_t (*octopus_unsubscribe__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, uint64_t id, octopus_errval_t *error_code);
typedef  errval_t (*octopus_publish__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, const char *record, octopus_errval_t *error_code);
typedef  errval_t (*octopus_get_cap__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, const char *key, struct capref *retcap, octopus_errval_t *reterr);
typedef  errval_t (*octopus_put_cap__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, const char *key, struct capref storecap, octopus_errval_t *reterr);
typedef  errval_t (*octopus_remove_cap__thc_call__t)(octopus_thc_client_binding_t *_thc_binding, const char *key, octopus_errval_t *reterr);
typedef  errval_t (*octopus_get_identifier__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, uint64_t *id);
typedef  errval_t (*octopus_identify__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, uint64_t id, octopus_binding_type_t type);
typedef  errval_t (*octopus_get_names__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_get__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_set__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, uint64_t mode, octopus_trigger_t t, bool get, char **record, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_get_with_idcap__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, struct capref idcap, octopus_trigger_t t, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_set_with_idcap__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, struct capref idcap, const char *attributes, uint64_t mode, octopus_trigger_t t, bool get, char **record, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_del__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_exists__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, octopus_trigger_t t, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t (*octopus_wait_for__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, char **record, octopus_errval_t *error_code);
typedef  errval_t (*octopus_remove_trigger__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, uint64_t id, octopus_errval_t *error_code);
typedef  errval_t (*octopus_subscribe__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, const char *query, uint64_t trigger_fn, uint64_t state, uint64_t *id, octopus_errval_t *error_code);
typedef  errval_t (*octopus_unsubscribe__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, uint64_t id, octopus_errval_t *error_code);
typedef  errval_t (*octopus_publish__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, const char *record, octopus_errval_t *error_code);
typedef  errval_t (*octopus_get_cap__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, const char *key, struct capref *retcap, octopus_errval_t *reterr);
typedef  errval_t (*octopus_put_cap__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, const char *key, struct capref storecap, octopus_errval_t *reterr);
typedef  errval_t (*octopus_remove_cap__thc_call__t_x)(octopus_thc_client_binding_t *_thc_binding, const char *key, octopus_errval_t *reterr);

/*
 * VTables of send/receive operations
 */

struct octopus_thc_client_send_vtbl {
    octopus_get_identifier__thc_client_send_t get_identifier;
    octopus_identify__thc_client_send_t identify;
    octopus_get_names__thc_client_send_t get_names;
    octopus_get__thc_client_send_t get;
    octopus_set__thc_client_send_t set;
    octopus_get_with_idcap__thc_client_send_t get_with_idcap;
    octopus_set_with_idcap__thc_client_send_t set_with_idcap;
    octopus_del__thc_client_send_t del;
    octopus_exists__thc_client_send_t exists;
    octopus_wait_for__thc_client_send_t wait_for;
    octopus_remove_trigger__thc_client_send_t remove_trigger;
    octopus_subscribe__thc_client_send_t subscribe;
    octopus_unsubscribe__thc_client_send_t unsubscribe;
    octopus_publish__thc_client_send_t publish;
    octopus_trigger__thc_client_send_t trigger;
    octopus_subscription__thc_client_send_t subscription;
    octopus_get_cap__thc_client_send_t get_cap;
    octopus_put_cap__thc_client_send_t put_cap;
    octopus_remove_cap__thc_client_send_t remove_cap;
};
struct octopus_thc_client_send_vtbl_x {
    octopus_get_identifier__thc_client_send_t_x get_identifier;
    octopus_identify__thc_client_send_t_x identify;
    octopus_get_names__thc_client_send_t_x get_names;
    octopus_get__thc_client_send_t_x get;
    octopus_set__thc_client_send_t_x set;
    octopus_get_with_idcap__thc_client_send_t_x get_with_idcap;
    octopus_set_with_idcap__thc_client_send_t_x set_with_idcap;
    octopus_del__thc_client_send_t_x del;
    octopus_exists__thc_client_send_t_x exists;
    octopus_wait_for__thc_client_send_t_x wait_for;
    octopus_remove_trigger__thc_client_send_t_x remove_trigger;
    octopus_subscribe__thc_client_send_t_x subscribe;
    octopus_unsubscribe__thc_client_send_t_x unsubscribe;
    octopus_publish__thc_client_send_t_x publish;
    octopus_trigger__thc_client_send_t_x trigger;
    octopus_subscription__thc_client_send_t_x subscription;
    octopus_get_cap__thc_client_send_t_x get_cap;
    octopus_put_cap__thc_client_send_t_x put_cap;
    octopus_remove_cap__thc_client_send_t_x remove_cap;
};
struct octopus_thc_service_receive_vtbl {
    octopus_get_identifier__thc_service_recv_t get_identifier;
    octopus_identify__thc_service_recv_t identify;
    octopus_get_names__thc_service_recv_t get_names;
    octopus_get__thc_service_recv_t get;
    octopus_set__thc_service_recv_t set;
    octopus_get_with_idcap__thc_service_recv_t get_with_idcap;
    octopus_set_with_idcap__thc_service_recv_t set_with_idcap;
    octopus_del__thc_service_recv_t del;
    octopus_exists__thc_service_recv_t exists;
    octopus_wait_for__thc_service_recv_t wait_for;
    octopus_remove_trigger__thc_service_recv_t remove_trigger;
    octopus_subscribe__thc_service_recv_t subscribe;
    octopus_unsubscribe__thc_service_recv_t unsubscribe;
    octopus_publish__thc_service_recv_t publish;
    octopus_trigger__thc_service_recv_t trigger;
    octopus_subscription__thc_service_recv_t subscription;
    octopus_get_cap__thc_service_recv_t get_cap;
    octopus_put_cap__thc_service_recv_t put_cap;
    octopus_remove_cap__thc_service_recv_t remove_cap;
};
struct octopus_thc_service_receive_vtbl_x {
    octopus_get_identifier__thc_service_recv_t_x get_identifier;
    octopus_identify__thc_service_recv_t_x identify;
    octopus_get_names__thc_service_recv_t_x get_names;
    octopus_get__thc_service_recv_t_x get;
    octopus_set__thc_service_recv_t_x set;
    octopus_get_with_idcap__thc_service_recv_t_x get_with_idcap;
    octopus_set_with_idcap__thc_service_recv_t_x set_with_idcap;
    octopus_del__thc_service_recv_t_x del;
    octopus_exists__thc_service_recv_t_x exists;
    octopus_wait_for__thc_service_recv_t_x wait_for;
    octopus_remove_trigger__thc_service_recv_t_x remove_trigger;
    octopus_subscribe__thc_service_recv_t_x subscribe;
    octopus_unsubscribe__thc_service_recv_t_x unsubscribe;
    octopus_publish__thc_service_recv_t_x publish;
    octopus_trigger__thc_service_recv_t_x trigger;
    octopus_subscription__thc_service_recv_t_x subscription;
    octopus_get_cap__thc_service_recv_t_x get_cap;
    octopus_put_cap__thc_service_recv_t_x put_cap;
    octopus_remove_cap__thc_service_recv_t_x remove_cap;
};
struct octopus_service_selector {
    int get_identifier;
    int identify;
    int get_names;
    int get;
    int set;
    int get_with_idcap;
    int set_with_idcap;
    int del;
    int exists;
    int wait_for;
    int remove_trigger;
    int subscribe;
    int unsubscribe;
    int publish;
    int trigger;
    int subscription;
    int get_cap;
    int put_cap;
    int remove_cap;
};
struct octopus_thc_service_send_vtbl {
    octopus_get_identifier__thc_service_send_t get_identifier;
    octopus_identify__thc_service_send_t identify;
    octopus_get_names__thc_service_send_t get_names;
    octopus_get__thc_service_send_t get;
    octopus_set__thc_service_send_t set;
    octopus_get_with_idcap__thc_service_send_t get_with_idcap;
    octopus_set_with_idcap__thc_service_send_t set_with_idcap;
    octopus_del__thc_service_send_t del;
    octopus_exists__thc_service_send_t exists;
    octopus_wait_for__thc_service_send_t wait_for;
    octopus_remove_trigger__thc_service_send_t remove_trigger;
    octopus_subscribe__thc_service_send_t subscribe;
    octopus_unsubscribe__thc_service_send_t unsubscribe;
    octopus_publish__thc_service_send_t publish;
    octopus_trigger__thc_service_send_t trigger;
    octopus_subscription__thc_service_send_t subscription;
    octopus_get_cap__thc_service_send_t get_cap;
    octopus_put_cap__thc_service_send_t put_cap;
    octopus_remove_cap__thc_service_send_t remove_cap;
};
struct octopus_thc_service_send_vtbl_x {
    octopus_get_identifier__thc_service_send_t_x get_identifier;
    octopus_identify__thc_service_send_t_x identify;
    octopus_get_names__thc_service_send_t_x get_names;
    octopus_get__thc_service_send_t_x get;
    octopus_set__thc_service_send_t_x set;
    octopus_get_with_idcap__thc_service_send_t_x get_with_idcap;
    octopus_set_with_idcap__thc_service_send_t_x set_with_idcap;
    octopus_del__thc_service_send_t_x del;
    octopus_exists__thc_service_send_t_x exists;
    octopus_wait_for__thc_service_send_t_x wait_for;
    octopus_remove_trigger__thc_service_send_t_x remove_trigger;
    octopus_subscribe__thc_service_send_t_x subscribe;
    octopus_unsubscribe__thc_service_send_t_x unsubscribe;
    octopus_publish__thc_service_send_t_x publish;
    octopus_trigger__thc_service_send_t_x trigger;
    octopus_subscription__thc_service_send_t_x subscription;
    octopus_get_cap__thc_service_send_t_x get_cap;
    octopus_put_cap__thc_service_send_t_x put_cap;
    octopus_remove_cap__thc_service_send_t_x remove_cap;
};
struct octopus_thc_client_receive_vtbl {
    octopus_get_identifier__thc_client_recv_t get_identifier;
    octopus_identify__thc_client_recv_t identify;
    octopus_get_names__thc_client_recv_t get_names;
    octopus_get__thc_client_recv_t get;
    octopus_set__thc_client_recv_t set;
    octopus_get_with_idcap__thc_client_recv_t get_with_idcap;
    octopus_set_with_idcap__thc_client_recv_t set_with_idcap;
    octopus_del__thc_client_recv_t del;
    octopus_exists__thc_client_recv_t exists;
    octopus_wait_for__thc_client_recv_t wait_for;
    octopus_remove_trigger__thc_client_recv_t remove_trigger;
    octopus_subscribe__thc_client_recv_t subscribe;
    octopus_unsubscribe__thc_client_recv_t unsubscribe;
    octopus_publish__thc_client_recv_t publish;
    octopus_trigger__thc_client_recv_t trigger;
    octopus_subscription__thc_client_recv_t subscription;
    octopus_get_cap__thc_client_recv_t get_cap;
    octopus_put_cap__thc_client_recv_t put_cap;
    octopus_remove_cap__thc_client_recv_t remove_cap;
};
struct octopus_thc_client_receive_vtbl_x {
    octopus_get_identifier__thc_client_recv_t_x get_identifier;
    octopus_identify__thc_client_recv_t_x identify;
    octopus_get_names__thc_client_recv_t_x get_names;
    octopus_get__thc_client_recv_t_x get;
    octopus_set__thc_client_recv_t_x set;
    octopus_get_with_idcap__thc_client_recv_t_x get_with_idcap;
    octopus_set_with_idcap__thc_client_recv_t_x set_with_idcap;
    octopus_del__thc_client_recv_t_x del;
    octopus_exists__thc_client_recv_t_x exists;
    octopus_wait_for__thc_client_recv_t_x wait_for;
    octopus_remove_trigger__thc_client_recv_t_x remove_trigger;
    octopus_subscribe__thc_client_recv_t_x subscribe;
    octopus_unsubscribe__thc_client_recv_t_x unsubscribe;
    octopus_publish__thc_client_recv_t_x publish;
    octopus_trigger__thc_client_recv_t_x trigger;
    octopus_subscription__thc_client_recv_t_x subscription;
    octopus_get_cap__thc_client_recv_t_x get_cap;
    octopus_put_cap__thc_client_recv_t_x put_cap;
    octopus_remove_cap__thc_client_recv_t_x remove_cap;
};
struct octopus_client_selector {
    int get_identifier;
    int identify;
    int get_names;
    int get;
    int set;
    int get_with_idcap;
    int set_with_idcap;
    int del;
    int exists;
    int wait_for;
    int remove_trigger;
    int subscribe;
    int unsubscribe;
    int publish;
    int trigger;
    int subscription;
    int get_cap;
    int put_cap;
    int remove_cap;
};

/*
 * VTables of RPC operations
 */

struct octopus_thc_rpc_seq {
    octopus_get_identifier__thc_call__t get_identifier;
    octopus_identify__thc_call__t identify;
    octopus_get_names__thc_call__t get_names;
    octopus_get__thc_call__t get;
    octopus_set__thc_call__t set;
    octopus_get_with_idcap__thc_call__t get_with_idcap;
    octopus_set_with_idcap__thc_call__t set_with_idcap;
    octopus_del__thc_call__t del;
    octopus_exists__thc_call__t exists;
    octopus_wait_for__thc_call__t wait_for;
    octopus_remove_trigger__thc_call__t remove_trigger;
    octopus_subscribe__thc_call__t subscribe;
    octopus_unsubscribe__thc_call__t unsubscribe;
    octopus_publish__thc_call__t publish;
    octopus_get_cap__thc_call__t get_cap;
    octopus_put_cap__thc_call__t put_cap;
    octopus_remove_cap__thc_call__t remove_cap;
};
struct octopus_thc_rpc_seq_x {
    octopus_get_identifier__thc_call__t_x get_identifier;
    octopus_identify__thc_call__t_x identify;
    octopus_get_names__thc_call__t_x get_names;
    octopus_get__thc_call__t_x get;
    octopus_set__thc_call__t_x set;
    octopus_get_with_idcap__thc_call__t_x get_with_idcap;
    octopus_set_with_idcap__thc_call__t_x set_with_idcap;
    octopus_del__thc_call__t_x del;
    octopus_exists__thc_call__t_x exists;
    octopus_wait_for__thc_call__t_x wait_for;
    octopus_remove_trigger__thc_call__t_x remove_trigger;
    octopus_subscribe__thc_call__t_x subscribe;
    octopus_unsubscribe__thc_call__t_x unsubscribe;
    octopus_publish__thc_call__t_x publish;
    octopus_get_cap__thc_call__t_x get_cap;
    octopus_put_cap__thc_call__t_x put_cap;
    octopus_remove_cap__thc_call__t_x remove_cap;
};
struct octopus_thc_rpc_fifo {
    octopus_get_identifier__thc_call__t get_identifier;
    octopus_identify__thc_call__t identify;
    octopus_get_names__thc_call__t get_names;
    octopus_get__thc_call__t get;
    octopus_set__thc_call__t set;
    octopus_get_with_idcap__thc_call__t get_with_idcap;
    octopus_set_with_idcap__thc_call__t set_with_idcap;
    octopus_del__thc_call__t del;
    octopus_exists__thc_call__t exists;
    octopus_wait_for__thc_call__t wait_for;
    octopus_remove_trigger__thc_call__t remove_trigger;
    octopus_subscribe__thc_call__t subscribe;
    octopus_unsubscribe__thc_call__t unsubscribe;
    octopus_publish__thc_call__t publish;
    octopus_get_cap__thc_call__t get_cap;
    octopus_put_cap__thc_call__t put_cap;
    octopus_remove_cap__thc_call__t remove_cap;
};
struct octopus_thc_rpc_fifo_x {
    octopus_get_identifier__thc_call__t_x get_identifier;
    octopus_identify__thc_call__t_x identify;
    octopus_get_names__thc_call__t_x get_names;
    octopus_get__thc_call__t_x get;
    octopus_set__thc_call__t_x set;
    octopus_get_with_idcap__thc_call__t_x get_with_idcap;
    octopus_set_with_idcap__thc_call__t_x set_with_idcap;
    octopus_del__thc_call__t_x del;
    octopus_exists__thc_call__t_x exists;
    octopus_wait_for__thc_call__t_x wait_for;
    octopus_remove_trigger__thc_call__t_x remove_trigger;
    octopus_subscribe__thc_call__t_x subscribe;
    octopus_unsubscribe__thc_call__t_x unsubscribe;
    octopus_publish__thc_call__t_x publish;
    octopus_get_cap__thc_call__t_x get_cap;
    octopus_put_cap__thc_call__t_x put_cap;
    octopus_remove_cap__thc_call__t_x remove_cap;
};
struct octopus_thc_rpc_ooo {
};
struct octopus_thc_rpc_ooo_x {
};

/*
 * Types for recv_any operations
 */

struct octopus_client_msg {
    enum octopus_msg_enum_t msg;
    union octopus_thc_arg_union args;
};
typedef struct octopus_client_msg octopus_client_msg_t;
typedef  errval_t (*octopus_recv_any__thc_client_t)(octopus_thc_client_binding_t *_thc_binding, struct octopus_client_msg *msg, struct octopus_client_selector ops);
typedef  errval_t (*octopus_recv_any__thc_client_t_x)(octopus_thc_client_binding_t *_thc_binding, struct octopus_client_msg *msg, struct octopus_client_selector ops);
struct octopus_service_msg {
    enum octopus_msg_enum_t msg;
    union octopus_thc_arg_union args;
};
typedef struct octopus_service_msg octopus_service_msg_t;
typedef  errval_t (*octopus_recv_any__thc_service_t)(octopus_thc_service_binding_t *_thc_binding, struct octopus_service_msg *msg, struct octopus_service_selector ops);
typedef  errval_t (*octopus_recv_any__thc_service_t_x)(octopus_thc_service_binding_t *_thc_binding, struct octopus_service_msg *msg, struct octopus_service_selector ops);

/*
 * Binding structures
 */

struct octopus_thc_client_binding_t {
    struct thc_per_binding_state_t thc_per_binding;
    struct octopus_thc_client_send_vtbl send;
    struct octopus_thc_client_send_vtbl_x send_x;
    struct octopus_thc_client_receive_vtbl recv;
    struct octopus_thc_client_receive_vtbl_x recv_x;
    octopus_recv_any__thc_client_t recv_any;
    octopus_recv_any__thc_client_t_x recv_any_x;
    struct octopus_thc_rpc_seq call_seq;
    struct octopus_thc_rpc_fifo call_fifo;
    struct octopus_thc_rpc_ooo call;
    struct octopus_thc_rpc_seq_x call_seq_x;
    struct octopus_thc_rpc_fifo_x call_fifo_x;
    struct octopus_thc_rpc_ooo_x call_x;
    thc_seq_t ooo_rpc_seq;
    struct thc_per_recv_t thc_per_recv[19];
    void *_c2s_st;
    void *_s2c_st;
};
struct octopus_thc_service_binding_t {
    struct thc_per_binding_state_t thc_per_binding;
    struct octopus_thc_service_send_vtbl send;
    struct octopus_thc_service_send_vtbl_x send_x;
    struct octopus_thc_service_receive_vtbl recv;
    struct octopus_thc_service_receive_vtbl_x recv_x;
    octopus_recv_any__thc_service_t recv_any;
    octopus_recv_any__thc_service_t_x recv_any_x;
    struct thc_per_recv_t thc_per_recv[19];
    void *_c2s_st;
    void *_s2c_st;
};

/*
 * Initialize a THC binding over an IDC binding
 * (defined in THC-stubs backend)
 */

extern  errval_t octopus_thc_init_client(octopus_thc_client_binding_t *thc, struct octopus_binding *idc_c2s, struct octopus_binding *idc_s2c);
extern  errval_t octopus_thc_init_service(octopus_thc_service_binding_t *thc, struct octopus_binding *idc_c2s, struct octopus_binding *idc_s2c);

/*
 * THC helper functions for establishing connections
 */
struct octopus_thc_export_info {
    thc_sem_t export_cb_done_sem;
    thc_sem_t connect_cb_done_sem;
    thc_sem_t accept_call_present_sem;
    thc_lock_t next_accept_lock;
    struct octopus_binding **b;
    thc_lock_t info_lock;
    errval_t err;
    const char *service_name;
    iref_t iref;
    iref_t *iref_ptr;
};
struct octopus_thc_connect_info {
    thc_sem_t bind_cb_done_sem;
    errval_t err;
    struct octopus_binding *b;
};
extern  errval_t octopus_thc_export(struct octopus_thc_export_info *info, const char *service_name, struct waitset *ws, idc_export_flags_t flags, iref_t *iref);
extern  errval_t octopus_thc_accept(struct octopus_thc_export_info *info, struct octopus_binding **b);
extern  errval_t octopus_thc_connect(iref_t iref, struct waitset *ws, idc_bind_flags_t flags, struct octopus_binding **b);
extern  errval_t octopus_thc_connect_by_name(const char *service_name, struct waitset *ws, idc_bind_flags_t flags, struct octopus_binding **b);
#endif // __octopus_THC_IF_H
