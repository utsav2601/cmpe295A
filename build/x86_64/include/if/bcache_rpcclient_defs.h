#ifndef __bcache_RPC_CLIENT_H
#define __bcache_RPC_CLIENT_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: bcache
 * INTEFACE FILE: ../if/bcache.if
 * INTERFACE DESCRIPTION: Buffer cache
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

/*
 * RPC client
 */

#include <if/bcache_defs.h>

/*
 * Forward declaration of binding type
 */
struct bcache_rpc_client;

/*
 * Function signatures
 */
typedef  errval_t bcache_new_client__rpc_method_fn(struct bcache_rpc_client *_rpc, struct capref *bulk);
typedef  errval_t bcache_get_start__rpc_method_fn(struct bcache_rpc_client *_rpc, const char *key, size_t key_len, uint64_t *idx, bool *haveit, uint64_t *transid, uint64_t *size);
typedef  errval_t bcache_get_stop__rpc_method_fn(struct bcache_rpc_client *_rpc, uint64_t transid, uint64_t idx, uint64_t length);
typedef  errval_t bcache_print_stats__rpc_method_fn(struct bcache_rpc_client *_rpc);

/*
 * VTable struct definition for the interface
 */
struct bcache_rpc_vtbl {
    bcache_new_client__rpc_method_fn *new_client;
    bcache_get_start__rpc_method_fn *get_start;
    bcache_get_stop__rpc_method_fn *get_stop;
    bcache_print_stats__rpc_method_fn *print_stats;
};

/*
 * The Binding structure
 */
struct bcache_rpc_client {
    struct bcache_binding *b;
    struct bcache_rpc_vtbl vtbl;
    bool rpc_in_progress;
    bool reply_present;
    errval_t async_error;
    struct waitset rpc_waitset;
    struct waitset_chanstate dummy_chanstate;
};

/*
 * Function to initialise an RPC client
 */
extern  errval_t bcache_rpc_client_init(struct bcache_rpc_client *rpc, struct bcache_binding *binding);

#endif // __bcache_RPC_CLIENT_H
