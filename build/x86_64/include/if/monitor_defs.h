#ifndef __monitor_IF_H
#define __monitor_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: monitor
 * INTEFACE FILE: ../if/monitor.if
 * INTERFACE DESCRIPTION: The monitor to client Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t monitor_genpaddr_t;
typedef uint64_t monitor_genvaddr_t;
typedef uint32_t monitor_rsrcid_t;
typedef uint64_t monitor_errval_t;
typedef uint64_t monitor_cycles_t;
typedef uint32_t monitor_iref_t;
typedef uint8_t monitor_coreid_t;
typedef uint32_t monitor_domainid_t;
typedef uint64_t monitor_vci_t_t;
typedef uint32_t monitor_capid_t_t;

/*
 * Forward declaration of binding type
 */
struct monitor_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void monitor_bind_continuation_fn(void *st, errval_t err, struct monitor_binding *_binding);
typedef  bool monitor_can_send_fn(struct monitor_binding *_binding);
typedef  errval_t monitor_register_send_fn(struct monitor_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t monitor_change_waitset_fn(struct monitor_binding *_binding, struct waitset *ws);
typedef  errval_t monitor_control_fn(struct monitor_binding *_binding, idc_control_t control);
typedef  void monitor_error_handler_fn(struct monitor_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum monitor_msg_enum {
    monitor___dummy__msgnum = 0,
    monitor___bind__msgnum = 1,
    monitor___bind_reply__msgnum = 2,
    monitor_alloc_iref_request__msgnum = 3,
    monitor_alloc_iref_reply__msgnum = 4,
    monitor_boot_core_request__msgnum = 5,
    monitor_boot_core_reply__msgnum = 6,
    monitor_new_monitor_binding_request__msgnum = 7,
    monitor_new_monitor_binding_reply__msgnum = 8,
    monitor_bind_lmp_client_request__msgnum = 9,
    monitor_multiboot_cap_request__msgnum = 10,
    monitor_multiboot_cap_reply__msgnum = 11,
    monitor_bind_lmp_service_request__msgnum = 12,
    monitor_bind_lmp_reply_monitor__msgnum = 13,
    monitor_bind_lmp_reply_client__msgnum = 14,
    monitor_bind_ump_client_request__msgnum = 15,
    monitor_bind_ump_service_request__msgnum = 16,
    monitor_bind_ump_reply_monitor__msgnum = 17,
    monitor_bind_ump_reply_client__msgnum = 18,
    monitor_ipi_alloc_notify_request__msgnum = 19,
    monitor_ipi_alloc_notify_reply__msgnum = 20,
    monitor_get_mem_iref_request__msgnum = 21,
    monitor_get_mem_iref_reply__msgnum = 22,
    monitor_get_name_iref_request__msgnum = 23,
    monitor_get_name_iref_reply__msgnum = 24,
    monitor_get_ramfs_iref_request__msgnum = 25,
    monitor_get_ramfs_iref_reply__msgnum = 26,
    monitor_set_ramfs_iref_request__msgnum = 27,
    monitor_set_mem_iref_request__msgnum = 28,
    monitor_set_name_iref_request__msgnum = 29,
    monitor_set_name_iref_reply__msgnum = 30,
    monitor_get_monitor_rpc_iref_request__msgnum = 31,
    monitor_get_monitor_rpc_iref_reply__msgnum = 32,
    monitor_cap_send_request__msgnum = 33,
    monitor_cap_move_request__msgnum = 34,
    monitor_cap_receive_request__msgnum = 35,
    monitor_span_domain_request__msgnum = 36,
    monitor_span_domain_reply__msgnum = 37,
    monitor_migrate_dispatcher_request__msgnum = 38,
    monitor_multihop_routing_table_new__msgnum = 39,
    monitor_multihop_routing_table_set__msgnum = 40,
    monitor_multihop_bind_client_request__msgnum = 41,
    monitor_multihop_bind_client_reply__msgnum = 42,
    monitor_multihop_bind_service_request__msgnum = 43,
    monitor_multihop_bind_service_reply__msgnum = 44,
    monitor_multihop_message__msgnum = 45,
    monitor_multihop_cap_send__msgnum = 46,
    monitor_trace_prepare__msgnum = 47,
    monitor_trace_prepare_finished__msgnum = 48,
    monitor_bfscope_flush_send__msgnum = 49,
    monitor_bfscope_flush_ack__msgnum = 50,
    monitor_migrate_dispatcher__msgnum = 51
} monitor_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t monitor_alloc_iref_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id);
typedef  errval_t monitor_alloc_iref_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id, iref_t iref, monitor_errval_t err);
typedef  errval_t monitor_boot_core_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uint8_t id, struct capref frame);
typedef  errval_t monitor_boot_core_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err);
typedef  errval_t monitor_new_monitor_binding_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t st);
typedef  errval_t monitor_new_monitor_binding_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err, struct capref ep, uintptr_t st);
typedef  errval_t monitor_bind_lmp_client_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t conn_id, size_t buflen, struct capref ep);
typedef  errval_t monitor_multiboot_cap_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uint32_t slot);
typedef  errval_t monitor_multiboot_cap_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, struct capref cap, monitor_errval_t err);
typedef  errval_t monitor_bind_lmp_service_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id, uintptr_t mon_id, size_t buflen, struct capref ep);
typedef  errval_t monitor_bind_lmp_reply_monitor__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err, uintptr_t mon_id, uintptr_t conn_id, struct capref ep);
typedef  errval_t monitor_bind_lmp_reply_client__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err, uintptr_t mon_id, uintptr_t conn_id, struct capref ep);
typedef  errval_t monitor_bind_ump_client_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t conn_id, struct capref frame, size_t channel_length_in, size_t channel_length_out, struct capref notify);
typedef  errval_t monitor_bind_ump_service_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id, uintptr_t mon_id, struct capref frame, size_t channel_length_in, size_t channel_length_out, struct capref notify);
typedef  errval_t monitor_bind_ump_reply_monitor__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t mon_id, uintptr_t conn_id, monitor_errval_t err, struct capref notify);
typedef  errval_t monitor_bind_ump_reply_client__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t mon_id, uintptr_t conn_id, monitor_errval_t err, struct capref notify);
typedef  errval_t monitor_ipi_alloc_notify_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, struct capref ep, uintptr_t state);
typedef  errval_t monitor_ipi_alloc_notify_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t state, struct capref notify, monitor_errval_t err);
typedef  errval_t monitor_get_mem_iref_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation);
typedef  errval_t monitor_get_mem_iref_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref);
typedef  errval_t monitor_get_name_iref_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t st);
typedef  errval_t monitor_get_name_iref_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t st);
typedef  errval_t monitor_get_ramfs_iref_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t st);
typedef  errval_t monitor_get_ramfs_iref_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t st);
typedef  errval_t monitor_set_ramfs_iref_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref);
typedef  errval_t monitor_set_mem_iref_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref);
typedef  errval_t monitor_set_name_iref_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref);
typedef  errval_t monitor_set_name_iref_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err);
typedef  errval_t monitor_get_monitor_rpc_iref_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t st);
typedef  errval_t monitor_get_monitor_rpc_iref_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t st);
typedef  errval_t monitor_cap_send_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t mon_id, struct capref cap, monitor_capid_t_t capid);
typedef  errval_t monitor_cap_move_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t mon_id, struct capref cap, monitor_capid_t_t capid);
typedef  errval_t monitor_cap_receive_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t conn_id, monitor_errval_t err, struct capref cap, monitor_capid_t_t capid);
typedef  errval_t monitor_span_domain_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t domain_id, uint8_t core_id, struct capref vroot, struct capref disp);
typedef  errval_t monitor_span_domain_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err, uintptr_t domain_id);
typedef  errval_t monitor_migrate_dispatcher_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uint8_t core_id, struct capref vroot, struct capref disp);
typedef  errval_t monitor_multihop_routing_table_new__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_coreid_t max_coreid, monitor_coreid_t nentries);
typedef  errval_t monitor_multihop_routing_table_set__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_coreid_t from, const monitor_coreid_t *to, size_t len);
typedef  errval_t monitor_multihop_bind_client_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, monitor_vci_t_t sender_vci);
typedef  errval_t monitor_multihop_bind_client_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_vci_t_t receiver_vci, monitor_vci_t_t sender_vci, monitor_errval_t err);
typedef  errval_t monitor_multihop_bind_service_request__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id, monitor_vci_t_t sender_vci);
typedef  errval_t monitor_multihop_bind_service_reply__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_vci_t_t receiver_vci, monitor_vci_t_t sender_vci, monitor_errval_t err);
typedef  errval_t monitor_multihop_message__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_vci_t_t vci, uint8_t direction, uint8_t flags, uint32_t ack, const uint8_t *payload, size_t size);
typedef  errval_t monitor_multihop_cap_send__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_vci_t_t vci, uint8_t direction, monitor_errval_t err, struct capref cap, monitor_capid_t_t capid);
typedef  errval_t monitor_trace_prepare__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, monitor_coreid_t origin_core);
typedef  errval_t monitor_trace_prepare_finished__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation);
typedef  errval_t monitor_bfscope_flush_send__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref);
typedef  errval_t monitor_bfscope_flush_ack__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation);
typedef  errval_t monitor_migrate_dispatcher__tx_method_fn(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t domain_id);

/*
 * Message type signatures (receive)
 */
typedef  void monitor_alloc_iref_request__rx_method_fn(struct monitor_binding *_binding, uintptr_t service_id);
typedef  void monitor_alloc_iref_reply__rx_method_fn(struct monitor_binding *_binding, uintptr_t service_id, iref_t iref, monitor_errval_t err);
typedef  void monitor_boot_core_request__rx_method_fn(struct monitor_binding *_binding, uint8_t id, struct capref frame);
typedef  void monitor_boot_core_reply__rx_method_fn(struct monitor_binding *_binding, monitor_errval_t err);
typedef  void monitor_new_monitor_binding_request__rx_method_fn(struct monitor_binding *_binding, uintptr_t st);
typedef  void monitor_new_monitor_binding_reply__rx_method_fn(struct monitor_binding *_binding, monitor_errval_t err, struct capref ep, uintptr_t st);
typedef  void monitor_bind_lmp_client_request__rx_method_fn(struct monitor_binding *_binding, iref_t iref, uintptr_t conn_id, size_t buflen, struct capref ep);
typedef  void monitor_multiboot_cap_request__rx_method_fn(struct monitor_binding *_binding, uint32_t slot);
typedef  void monitor_multiboot_cap_reply__rx_method_fn(struct monitor_binding *_binding, struct capref cap, monitor_errval_t err);
typedef  void monitor_bind_lmp_service_request__rx_method_fn(struct monitor_binding *_binding, uintptr_t service_id, uintptr_t mon_id, size_t buflen, struct capref ep);
typedef  void monitor_bind_lmp_reply_monitor__rx_method_fn(struct monitor_binding *_binding, monitor_errval_t err, uintptr_t mon_id, uintptr_t conn_id, struct capref ep);
typedef  void monitor_bind_lmp_reply_client__rx_method_fn(struct monitor_binding *_binding, monitor_errval_t err, uintptr_t mon_id, uintptr_t conn_id, struct capref ep);
typedef  void monitor_bind_ump_client_request__rx_method_fn(struct monitor_binding *_binding, iref_t iref, uintptr_t conn_id, struct capref frame, size_t channel_length_in, size_t channel_length_out, struct capref notify);
typedef  void monitor_bind_ump_service_request__rx_method_fn(struct monitor_binding *_binding, uintptr_t service_id, uintptr_t mon_id, struct capref frame, size_t channel_length_in, size_t channel_length_out, struct capref notify);
typedef  void monitor_bind_ump_reply_monitor__rx_method_fn(struct monitor_binding *_binding, uintptr_t mon_id, uintptr_t conn_id, monitor_errval_t err, struct capref notify);
typedef  void monitor_bind_ump_reply_client__rx_method_fn(struct monitor_binding *_binding, uintptr_t mon_id, uintptr_t conn_id, monitor_errval_t err, struct capref notify);
typedef  void monitor_ipi_alloc_notify_request__rx_method_fn(struct monitor_binding *_binding, struct capref ep, uintptr_t state);
typedef  void monitor_ipi_alloc_notify_reply__rx_method_fn(struct monitor_binding *_binding, uintptr_t state, struct capref notify, monitor_errval_t err);
typedef  void monitor_get_mem_iref_request__rx_method_fn(struct monitor_binding *_binding);
typedef  void monitor_get_mem_iref_reply__rx_method_fn(struct monitor_binding *_binding, iref_t iref);
typedef  void monitor_get_name_iref_request__rx_method_fn(struct monitor_binding *_binding, uintptr_t st);
typedef  void monitor_get_name_iref_reply__rx_method_fn(struct monitor_binding *_binding, iref_t iref, uintptr_t st);
typedef  void monitor_get_ramfs_iref_request__rx_method_fn(struct monitor_binding *_binding, uintptr_t st);
typedef  void monitor_get_ramfs_iref_reply__rx_method_fn(struct monitor_binding *_binding, iref_t iref, uintptr_t st);
typedef  void monitor_set_ramfs_iref_request__rx_method_fn(struct monitor_binding *_binding, iref_t iref);
typedef  void monitor_set_mem_iref_request__rx_method_fn(struct monitor_binding *_binding, iref_t iref);
typedef  void monitor_set_name_iref_request__rx_method_fn(struct monitor_binding *_binding, iref_t iref);
typedef  void monitor_set_name_iref_reply__rx_method_fn(struct monitor_binding *_binding, monitor_errval_t err);
typedef  void monitor_get_monitor_rpc_iref_request__rx_method_fn(struct monitor_binding *_binding, uintptr_t st);
typedef  void monitor_get_monitor_rpc_iref_reply__rx_method_fn(struct monitor_binding *_binding, iref_t iref, uintptr_t st);
typedef  void monitor_cap_send_request__rx_method_fn(struct monitor_binding *_binding, uintptr_t mon_id, struct capref cap, monitor_capid_t_t capid);
typedef  void monitor_cap_move_request__rx_method_fn(struct monitor_binding *_binding, uintptr_t mon_id, struct capref cap, monitor_capid_t_t capid);
typedef  void monitor_cap_receive_request__rx_method_fn(struct monitor_binding *_binding, uintptr_t conn_id, monitor_errval_t err, struct capref cap, monitor_capid_t_t capid);
typedef  void monitor_span_domain_request__rx_method_fn(struct monitor_binding *_binding, uintptr_t domain_id, uint8_t core_id, struct capref vroot, struct capref disp);
typedef  void monitor_span_domain_reply__rx_method_fn(struct monitor_binding *_binding, monitor_errval_t err, uintptr_t domain_id);
typedef  void monitor_migrate_dispatcher_request__rx_method_fn(struct monitor_binding *_binding, uint8_t core_id, struct capref vroot, struct capref disp);
typedef  void monitor_multihop_routing_table_new__rx_method_fn(struct monitor_binding *_binding, monitor_coreid_t max_coreid, monitor_coreid_t nentries);
typedef  void monitor_multihop_routing_table_set__rx_method_fn(struct monitor_binding *_binding, monitor_coreid_t from, monitor_coreid_t *to, size_t len);
typedef  void monitor_multihop_bind_client_request__rx_method_fn(struct monitor_binding *_binding, iref_t iref, monitor_vci_t_t sender_vci);
typedef  void monitor_multihop_bind_client_reply__rx_method_fn(struct monitor_binding *_binding, monitor_vci_t_t receiver_vci, monitor_vci_t_t sender_vci, monitor_errval_t err);
typedef  void monitor_multihop_bind_service_request__rx_method_fn(struct monitor_binding *_binding, uintptr_t service_id, monitor_vci_t_t sender_vci);
typedef  void monitor_multihop_bind_service_reply__rx_method_fn(struct monitor_binding *_binding, monitor_vci_t_t receiver_vci, monitor_vci_t_t sender_vci, monitor_errval_t err);
typedef  void monitor_multihop_message__rx_method_fn(struct monitor_binding *_binding, monitor_vci_t_t vci, uint8_t direction, uint8_t flags, uint32_t ack, uint8_t *payload, size_t size);
typedef  void monitor_multihop_cap_send__rx_method_fn(struct monitor_binding *_binding, monitor_vci_t_t vci, uint8_t direction, monitor_errval_t err, struct capref cap, monitor_capid_t_t capid);
typedef  void monitor_trace_prepare__rx_method_fn(struct monitor_binding *_binding, monitor_coreid_t origin_core);
typedef  void monitor_trace_prepare_finished__rx_method_fn(struct monitor_binding *_binding);
typedef  void monitor_bfscope_flush_send__rx_method_fn(struct monitor_binding *_binding, iref_t iref);
typedef  void monitor_bfscope_flush_ack__rx_method_fn(struct monitor_binding *_binding);
typedef  void monitor_migrate_dispatcher__rx_method_fn(struct monitor_binding *_binding, uintptr_t domain_id);

/*
 * Struct type for holding the args for each msg
 */
struct monitor_alloc_iref_request__args {
    uintptr_t service_id;
};
struct monitor_alloc_iref_reply__args {
    uintptr_t service_id;
    iref_t iref;
    monitor_errval_t err;
};
struct monitor_boot_core_request__args {
    uint8_t id;
    struct capref frame;
};
struct monitor_boot_core_reply__args {
    monitor_errval_t err;
};
struct monitor_new_monitor_binding_request__args {
    uintptr_t st;
};
struct monitor_new_monitor_binding_reply__args {
    monitor_errval_t err;
    struct capref ep;
    uintptr_t st;
};
struct monitor_bind_lmp_client_request__args {
    iref_t iref;
    uintptr_t conn_id;
    size_t buflen;
    struct capref ep;
};
struct monitor_multiboot_cap_request__args {
    uint32_t slot;
};
struct monitor_multiboot_cap_reply__args {
    struct capref cap;
    monitor_errval_t err;
};
struct monitor_bind_lmp_service_request__args {
    uintptr_t service_id;
    uintptr_t mon_id;
    size_t buflen;
    struct capref ep;
};
struct monitor_bind_lmp_reply_monitor__args {
    monitor_errval_t err;
    uintptr_t mon_id;
    uintptr_t conn_id;
    struct capref ep;
};
struct monitor_bind_lmp_reply_client__args {
    monitor_errval_t err;
    uintptr_t mon_id;
    uintptr_t conn_id;
    struct capref ep;
};
struct monitor_bind_ump_client_request__args {
    iref_t iref;
    uintptr_t conn_id;
    struct capref frame;
    size_t channel_length_in;
    size_t channel_length_out;
    struct capref notify;
};
struct monitor_bind_ump_service_request__args {
    uintptr_t service_id;
    uintptr_t mon_id;
    struct capref frame;
    size_t channel_length_in;
    size_t channel_length_out;
    struct capref notify;
};
struct monitor_bind_ump_reply_monitor__args {
    uintptr_t mon_id;
    uintptr_t conn_id;
    monitor_errval_t err;
    struct capref notify;
};
struct monitor_bind_ump_reply_client__args {
    uintptr_t mon_id;
    uintptr_t conn_id;
    monitor_errval_t err;
    struct capref notify;
};
struct monitor_ipi_alloc_notify_request__args {
    struct capref ep;
    uintptr_t state;
};
struct monitor_ipi_alloc_notify_reply__args {
    uintptr_t state;
    struct capref notify;
    monitor_errval_t err;
};
struct monitor_get_mem_iref_reply__args {
    iref_t iref;
};
struct monitor_get_name_iref_request__args {
    uintptr_t st;
};
struct monitor_get_name_iref_reply__args {
    iref_t iref;
    uintptr_t st;
};
struct monitor_get_ramfs_iref_request__args {
    uintptr_t st;
};
struct monitor_get_ramfs_iref_reply__args {
    iref_t iref;
    uintptr_t st;
};
struct monitor_set_ramfs_iref_request__args {
    iref_t iref;
};
struct monitor_set_mem_iref_request__args {
    iref_t iref;
};
struct monitor_set_name_iref_request__args {
    iref_t iref;
};
struct monitor_set_name_iref_reply__args {
    monitor_errval_t err;
};
struct monitor_get_monitor_rpc_iref_request__args {
    uintptr_t st;
};
struct monitor_get_monitor_rpc_iref_reply__args {
    iref_t iref;
    uintptr_t st;
};
struct monitor_cap_send_request__args {
    uintptr_t mon_id;
    struct capref cap;
    monitor_capid_t_t capid;
};
struct monitor_cap_move_request__args {
    uintptr_t mon_id;
    struct capref cap;
    monitor_capid_t_t capid;
};
struct monitor_cap_receive_request__args {
    uintptr_t conn_id;
    monitor_errval_t err;
    struct capref cap;
    monitor_capid_t_t capid;
};
struct monitor_span_domain_request__args {
    uintptr_t domain_id;
    uint8_t core_id;
    struct capref vroot;
    struct capref disp;
};
struct monitor_span_domain_reply__args {
    monitor_errval_t err;
    uintptr_t domain_id;
};
struct monitor_migrate_dispatcher_request__args {
    uint8_t core_id;
    struct capref vroot;
    struct capref disp;
};
struct monitor_multihop_routing_table_new__args {
    monitor_coreid_t max_coreid;
    monitor_coreid_t nentries;
};
struct monitor_multihop_routing_table_set__args {
    monitor_coreid_t from;
    monitor_coreid_t *to;
    size_t len;
};
struct monitor_multihop_bind_client_request__args {
    iref_t iref;
    monitor_vci_t_t sender_vci;
};
struct monitor_multihop_bind_client_reply__args {
    monitor_vci_t_t receiver_vci;
    monitor_vci_t_t sender_vci;
    monitor_errval_t err;
};
struct monitor_multihop_bind_service_request__args {
    uintptr_t service_id;
    monitor_vci_t_t sender_vci;
};
struct monitor_multihop_bind_service_reply__args {
    monitor_vci_t_t receiver_vci;
    monitor_vci_t_t sender_vci;
    monitor_errval_t err;
};
struct monitor_multihop_message__args {
    monitor_vci_t_t vci;
    uint8_t direction;
    uint8_t flags;
    uint32_t ack;
    uint8_t *payload;
    size_t size;
};
struct monitor_multihop_cap_send__args {
    monitor_vci_t_t vci;
    uint8_t direction;
    monitor_errval_t err;
    struct capref cap;
    monitor_capid_t_t capid;
};
struct monitor_trace_prepare__args {
    monitor_coreid_t origin_core;
};
struct monitor_bfscope_flush_send__args {
    iref_t iref;
};
struct monitor_migrate_dispatcher__args {
    uintptr_t domain_id;
};

/*
 * Union type for all message arguments
 */
union monitor_arg_union {
    struct monitor_alloc_iref_request__args alloc_iref_request;
    struct monitor_alloc_iref_reply__args alloc_iref_reply;
    struct monitor_boot_core_request__args boot_core_request;
    struct monitor_boot_core_reply__args boot_core_reply;
    struct monitor_new_monitor_binding_request__args new_monitor_binding_request;
    struct monitor_new_monitor_binding_reply__args new_monitor_binding_reply;
    struct monitor_bind_lmp_client_request__args bind_lmp_client_request;
    struct monitor_multiboot_cap_request__args multiboot_cap_request;
    struct monitor_multiboot_cap_reply__args multiboot_cap_reply;
    struct monitor_bind_lmp_service_request__args bind_lmp_service_request;
    struct monitor_bind_lmp_reply_monitor__args bind_lmp_reply_monitor;
    struct monitor_bind_lmp_reply_client__args bind_lmp_reply_client;
    struct monitor_bind_ump_client_request__args bind_ump_client_request;
    struct monitor_bind_ump_service_request__args bind_ump_service_request;
    struct monitor_bind_ump_reply_monitor__args bind_ump_reply_monitor;
    struct monitor_bind_ump_reply_client__args bind_ump_reply_client;
    struct monitor_ipi_alloc_notify_request__args ipi_alloc_notify_request;
    struct monitor_ipi_alloc_notify_reply__args ipi_alloc_notify_reply;
    struct monitor_get_mem_iref_reply__args get_mem_iref_reply;
    struct monitor_get_name_iref_request__args get_name_iref_request;
    struct monitor_get_name_iref_reply__args get_name_iref_reply;
    struct monitor_get_ramfs_iref_request__args get_ramfs_iref_request;
    struct monitor_get_ramfs_iref_reply__args get_ramfs_iref_reply;
    struct monitor_set_ramfs_iref_request__args set_ramfs_iref_request;
    struct monitor_set_mem_iref_request__args set_mem_iref_request;
    struct monitor_set_name_iref_request__args set_name_iref_request;
    struct monitor_set_name_iref_reply__args set_name_iref_reply;
    struct monitor_get_monitor_rpc_iref_request__args get_monitor_rpc_iref_request;
    struct monitor_get_monitor_rpc_iref_reply__args get_monitor_rpc_iref_reply;
    struct monitor_cap_send_request__args cap_send_request;
    struct monitor_cap_move_request__args cap_move_request;
    struct monitor_cap_receive_request__args cap_receive_request;
    struct monitor_span_domain_request__args span_domain_request;
    struct monitor_span_domain_reply__args span_domain_reply;
    struct monitor_migrate_dispatcher_request__args migrate_dispatcher_request;
    struct monitor_multihop_routing_table_new__args multihop_routing_table_new;
    struct monitor_multihop_routing_table_set__args multihop_routing_table_set;
    struct monitor_multihop_bind_client_request__args multihop_bind_client_request;
    struct monitor_multihop_bind_client_reply__args multihop_bind_client_reply;
    struct monitor_multihop_bind_service_request__args multihop_bind_service_request;
    struct monitor_multihop_bind_service_reply__args multihop_bind_service_reply;
    struct monitor_multihop_message__args multihop_message;
    struct monitor_multihop_cap_send__args multihop_cap_send;
    struct monitor_trace_prepare__args trace_prepare;
    struct monitor_bfscope_flush_send__args bfscope_flush_send;
    struct monitor_migrate_dispatcher__args migrate_dispatcher;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct monitor_tx_vtbl {
    monitor_alloc_iref_request__tx_method_fn *alloc_iref_request;
    monitor_alloc_iref_reply__tx_method_fn *alloc_iref_reply;
    monitor_boot_core_request__tx_method_fn *boot_core_request;
    monitor_boot_core_reply__tx_method_fn *boot_core_reply;
    monitor_new_monitor_binding_request__tx_method_fn *new_monitor_binding_request;
    monitor_new_monitor_binding_reply__tx_method_fn *new_monitor_binding_reply;
    monitor_bind_lmp_client_request__tx_method_fn *bind_lmp_client_request;
    monitor_multiboot_cap_request__tx_method_fn *multiboot_cap_request;
    monitor_multiboot_cap_reply__tx_method_fn *multiboot_cap_reply;
    monitor_bind_lmp_service_request__tx_method_fn *bind_lmp_service_request;
    monitor_bind_lmp_reply_monitor__tx_method_fn *bind_lmp_reply_monitor;
    monitor_bind_lmp_reply_client__tx_method_fn *bind_lmp_reply_client;
    monitor_bind_ump_client_request__tx_method_fn *bind_ump_client_request;
    monitor_bind_ump_service_request__tx_method_fn *bind_ump_service_request;
    monitor_bind_ump_reply_monitor__tx_method_fn *bind_ump_reply_monitor;
    monitor_bind_ump_reply_client__tx_method_fn *bind_ump_reply_client;
    monitor_ipi_alloc_notify_request__tx_method_fn *ipi_alloc_notify_request;
    monitor_ipi_alloc_notify_reply__tx_method_fn *ipi_alloc_notify_reply;
    monitor_get_mem_iref_request__tx_method_fn *get_mem_iref_request;
    monitor_get_mem_iref_reply__tx_method_fn *get_mem_iref_reply;
    monitor_get_name_iref_request__tx_method_fn *get_name_iref_request;
    monitor_get_name_iref_reply__tx_method_fn *get_name_iref_reply;
    monitor_get_ramfs_iref_request__tx_method_fn *get_ramfs_iref_request;
    monitor_get_ramfs_iref_reply__tx_method_fn *get_ramfs_iref_reply;
    monitor_set_ramfs_iref_request__tx_method_fn *set_ramfs_iref_request;
    monitor_set_mem_iref_request__tx_method_fn *set_mem_iref_request;
    monitor_set_name_iref_request__tx_method_fn *set_name_iref_request;
    monitor_set_name_iref_reply__tx_method_fn *set_name_iref_reply;
    monitor_get_monitor_rpc_iref_request__tx_method_fn *get_monitor_rpc_iref_request;
    monitor_get_monitor_rpc_iref_reply__tx_method_fn *get_monitor_rpc_iref_reply;
    monitor_cap_send_request__tx_method_fn *cap_send_request;
    monitor_cap_move_request__tx_method_fn *cap_move_request;
    monitor_cap_receive_request__tx_method_fn *cap_receive_request;
    monitor_span_domain_request__tx_method_fn *span_domain_request;
    monitor_span_domain_reply__tx_method_fn *span_domain_reply;
    monitor_migrate_dispatcher_request__tx_method_fn *migrate_dispatcher_request;
    monitor_multihop_routing_table_new__tx_method_fn *multihop_routing_table_new;
    monitor_multihop_routing_table_set__tx_method_fn *multihop_routing_table_set;
    monitor_multihop_bind_client_request__tx_method_fn *multihop_bind_client_request;
    monitor_multihop_bind_client_reply__tx_method_fn *multihop_bind_client_reply;
    monitor_multihop_bind_service_request__tx_method_fn *multihop_bind_service_request;
    monitor_multihop_bind_service_reply__tx_method_fn *multihop_bind_service_reply;
    monitor_multihop_message__tx_method_fn *multihop_message;
    monitor_multihop_cap_send__tx_method_fn *multihop_cap_send;
    monitor_trace_prepare__tx_method_fn *trace_prepare;
    monitor_trace_prepare_finished__tx_method_fn *trace_prepare_finished;
    monitor_bfscope_flush_send__tx_method_fn *bfscope_flush_send;
    monitor_bfscope_flush_ack__tx_method_fn *bfscope_flush_ack;
    monitor_migrate_dispatcher__tx_method_fn *migrate_dispatcher;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct monitor_rx_vtbl {
    monitor_alloc_iref_request__rx_method_fn *alloc_iref_request;
    monitor_alloc_iref_reply__rx_method_fn *alloc_iref_reply;
    monitor_boot_core_request__rx_method_fn *boot_core_request;
    monitor_boot_core_reply__rx_method_fn *boot_core_reply;
    monitor_new_monitor_binding_request__rx_method_fn *new_monitor_binding_request;
    monitor_new_monitor_binding_reply__rx_method_fn *new_monitor_binding_reply;
    monitor_bind_lmp_client_request__rx_method_fn *bind_lmp_client_request;
    monitor_multiboot_cap_request__rx_method_fn *multiboot_cap_request;
    monitor_multiboot_cap_reply__rx_method_fn *multiboot_cap_reply;
    monitor_bind_lmp_service_request__rx_method_fn *bind_lmp_service_request;
    monitor_bind_lmp_reply_monitor__rx_method_fn *bind_lmp_reply_monitor;
    monitor_bind_lmp_reply_client__rx_method_fn *bind_lmp_reply_client;
    monitor_bind_ump_client_request__rx_method_fn *bind_ump_client_request;
    monitor_bind_ump_service_request__rx_method_fn *bind_ump_service_request;
    monitor_bind_ump_reply_monitor__rx_method_fn *bind_ump_reply_monitor;
    monitor_bind_ump_reply_client__rx_method_fn *bind_ump_reply_client;
    monitor_ipi_alloc_notify_request__rx_method_fn *ipi_alloc_notify_request;
    monitor_ipi_alloc_notify_reply__rx_method_fn *ipi_alloc_notify_reply;
    monitor_get_mem_iref_request__rx_method_fn *get_mem_iref_request;
    monitor_get_mem_iref_reply__rx_method_fn *get_mem_iref_reply;
    monitor_get_name_iref_request__rx_method_fn *get_name_iref_request;
    monitor_get_name_iref_reply__rx_method_fn *get_name_iref_reply;
    monitor_get_ramfs_iref_request__rx_method_fn *get_ramfs_iref_request;
    monitor_get_ramfs_iref_reply__rx_method_fn *get_ramfs_iref_reply;
    monitor_set_ramfs_iref_request__rx_method_fn *set_ramfs_iref_request;
    monitor_set_mem_iref_request__rx_method_fn *set_mem_iref_request;
    monitor_set_name_iref_request__rx_method_fn *set_name_iref_request;
    monitor_set_name_iref_reply__rx_method_fn *set_name_iref_reply;
    monitor_get_monitor_rpc_iref_request__rx_method_fn *get_monitor_rpc_iref_request;
    monitor_get_monitor_rpc_iref_reply__rx_method_fn *get_monitor_rpc_iref_reply;
    monitor_cap_send_request__rx_method_fn *cap_send_request;
    monitor_cap_move_request__rx_method_fn *cap_move_request;
    monitor_cap_receive_request__rx_method_fn *cap_receive_request;
    monitor_span_domain_request__rx_method_fn *span_domain_request;
    monitor_span_domain_reply__rx_method_fn *span_domain_reply;
    monitor_migrate_dispatcher_request__rx_method_fn *migrate_dispatcher_request;
    monitor_multihop_routing_table_new__rx_method_fn *multihop_routing_table_new;
    monitor_multihop_routing_table_set__rx_method_fn *multihop_routing_table_set;
    monitor_multihop_bind_client_request__rx_method_fn *multihop_bind_client_request;
    monitor_multihop_bind_client_reply__rx_method_fn *multihop_bind_client_reply;
    monitor_multihop_bind_service_request__rx_method_fn *multihop_bind_service_request;
    monitor_multihop_bind_service_reply__rx_method_fn *multihop_bind_service_reply;
    monitor_multihop_message__rx_method_fn *multihop_message;
    monitor_multihop_cap_send__rx_method_fn *multihop_cap_send;
    monitor_trace_prepare__rx_method_fn *trace_prepare;
    monitor_trace_prepare_finished__rx_method_fn *trace_prepare_finished;
    monitor_bfscope_flush_send__rx_method_fn *bfscope_flush_send;
    monitor_bfscope_flush_ack__rx_method_fn *bfscope_flush_ack;
    monitor_migrate_dispatcher__rx_method_fn *migrate_dispatcher;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t monitor_connect_fn(void *st, struct monitor_binding *binding);

/*
 * Export state struct
 */
struct monitor_export {
    struct idc_export common;
    monitor_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t monitor_export(void *st, idc_export_callback_fn *export_cb, monitor_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct monitor_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t monitor_accept(struct monitor_frameinfo *_frameinfo, void *st, monitor_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct monitor_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    monitor_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    monitor_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    monitor_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    monitor_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    monitor_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct monitor_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct monitor_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union monitor_arg_union tx_union;
    union monitor_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum monitor_msg_enum tx_msgnum;
    enum monitor_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    monitor_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t monitor_bind(iref_t i, monitor_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t monitor_connect(struct monitor_frameinfo *_frameinfo, monitor_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t monitor_alloc_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id) __attribute__ ((always_inline));
static inline errval_t monitor_alloc_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id)
{
    return(((_binding->tx_vtbl).alloc_iref_request)(_binding, _continuation, service_id));
}

static inline errval_t monitor_alloc_iref_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id, iref_t iref, monitor_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_alloc_iref_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id, iref_t iref, monitor_errval_t err)
{
    return(((_binding->tx_vtbl).alloc_iref_reply)(_binding, _continuation, service_id, iref, err));
}

static inline errval_t monitor_boot_core_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uint8_t id, struct capref frame) __attribute__ ((always_inline));
static inline errval_t monitor_boot_core_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uint8_t id, struct capref frame)
{
    return(((_binding->tx_vtbl).boot_core_request)(_binding, _continuation, id, frame));
}

static inline errval_t monitor_boot_core_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_boot_core_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err)
{
    return(((_binding->tx_vtbl).boot_core_reply)(_binding, _continuation, err));
}

static inline errval_t monitor_new_monitor_binding_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t st) __attribute__ ((always_inline));
static inline errval_t monitor_new_monitor_binding_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t st)
{
    return(((_binding->tx_vtbl).new_monitor_binding_request)(_binding, _continuation, st));
}

static inline errval_t monitor_new_monitor_binding_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err, struct capref ep, uintptr_t st) __attribute__ ((always_inline));
static inline errval_t monitor_new_monitor_binding_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err, struct capref ep, uintptr_t st)
{
    return(((_binding->tx_vtbl).new_monitor_binding_reply)(_binding, _continuation, err, ep, st));
}

static inline errval_t monitor_bind_lmp_client_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t conn_id, size_t buflen, struct capref ep) __attribute__ ((always_inline));
static inline errval_t monitor_bind_lmp_client_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t conn_id, size_t buflen, struct capref ep)
{
    return(((_binding->tx_vtbl).bind_lmp_client_request)(_binding, _continuation, iref, conn_id, buflen, ep));
}

static inline errval_t monitor_multiboot_cap_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uint32_t slot) __attribute__ ((always_inline));
static inline errval_t monitor_multiboot_cap_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uint32_t slot)
{
    return(((_binding->tx_vtbl).multiboot_cap_request)(_binding, _continuation, slot));
}

static inline errval_t monitor_multiboot_cap_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, struct capref cap, monitor_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_multiboot_cap_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, struct capref cap, monitor_errval_t err)
{
    return(((_binding->tx_vtbl).multiboot_cap_reply)(_binding, _continuation, cap, err));
}

static inline errval_t monitor_bind_lmp_service_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id, uintptr_t mon_id, size_t buflen, struct capref ep) __attribute__ ((always_inline));
static inline errval_t monitor_bind_lmp_service_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id, uintptr_t mon_id, size_t buflen, struct capref ep)
{
    return(((_binding->tx_vtbl).bind_lmp_service_request)(_binding, _continuation, service_id, mon_id, buflen, ep));
}

static inline errval_t monitor_bind_lmp_reply_monitor__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err, uintptr_t mon_id, uintptr_t conn_id, struct capref ep) __attribute__ ((always_inline));
static inline errval_t monitor_bind_lmp_reply_monitor__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err, uintptr_t mon_id, uintptr_t conn_id, struct capref ep)
{
    return(((_binding->tx_vtbl).bind_lmp_reply_monitor)(_binding, _continuation, err, mon_id, conn_id, ep));
}

static inline errval_t monitor_bind_lmp_reply_client__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err, uintptr_t mon_id, uintptr_t conn_id, struct capref ep) __attribute__ ((always_inline));
static inline errval_t monitor_bind_lmp_reply_client__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err, uintptr_t mon_id, uintptr_t conn_id, struct capref ep)
{
    return(((_binding->tx_vtbl).bind_lmp_reply_client)(_binding, _continuation, err, mon_id, conn_id, ep));
}

static inline errval_t monitor_bind_ump_client_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t conn_id, struct capref frame, size_t channel_length_in, size_t channel_length_out, struct capref notify) __attribute__ ((always_inline));
static inline errval_t monitor_bind_ump_client_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t conn_id, struct capref frame, size_t channel_length_in, size_t channel_length_out, struct capref notify)
{
    return(((_binding->tx_vtbl).bind_ump_client_request)(_binding, _continuation, iref, conn_id, frame, channel_length_in, channel_length_out, notify));
}

static inline errval_t monitor_bind_ump_service_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id, uintptr_t mon_id, struct capref frame, size_t channel_length_in, size_t channel_length_out, struct capref notify) __attribute__ ((always_inline));
static inline errval_t monitor_bind_ump_service_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id, uintptr_t mon_id, struct capref frame, size_t channel_length_in, size_t channel_length_out, struct capref notify)
{
    return(((_binding->tx_vtbl).bind_ump_service_request)(_binding, _continuation, service_id, mon_id, frame, channel_length_in, channel_length_out, notify));
}

static inline errval_t monitor_bind_ump_reply_monitor__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t mon_id, uintptr_t conn_id, monitor_errval_t err, struct capref notify) __attribute__ ((always_inline));
static inline errval_t monitor_bind_ump_reply_monitor__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t mon_id, uintptr_t conn_id, monitor_errval_t err, struct capref notify)
{
    return(((_binding->tx_vtbl).bind_ump_reply_monitor)(_binding, _continuation, mon_id, conn_id, err, notify));
}

static inline errval_t monitor_bind_ump_reply_client__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t mon_id, uintptr_t conn_id, monitor_errval_t err, struct capref notify) __attribute__ ((always_inline));
static inline errval_t monitor_bind_ump_reply_client__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t mon_id, uintptr_t conn_id, monitor_errval_t err, struct capref notify)
{
    return(((_binding->tx_vtbl).bind_ump_reply_client)(_binding, _continuation, mon_id, conn_id, err, notify));
}

static inline errval_t monitor_ipi_alloc_notify_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, struct capref ep, uintptr_t state) __attribute__ ((always_inline));
static inline errval_t monitor_ipi_alloc_notify_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, struct capref ep, uintptr_t state)
{
    return(((_binding->tx_vtbl).ipi_alloc_notify_request)(_binding, _continuation, ep, state));
}

static inline errval_t monitor_ipi_alloc_notify_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t state, struct capref notify, monitor_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_ipi_alloc_notify_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t state, struct capref notify, monitor_errval_t err)
{
    return(((_binding->tx_vtbl).ipi_alloc_notify_reply)(_binding, _continuation, state, notify, err));
}

static inline errval_t monitor_get_mem_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t monitor_get_mem_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_mem_iref_request)(_binding, _continuation));
}

static inline errval_t monitor_get_mem_iref_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref) __attribute__ ((always_inline));
static inline errval_t monitor_get_mem_iref_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref)
{
    return(((_binding->tx_vtbl).get_mem_iref_reply)(_binding, _continuation, iref));
}

static inline errval_t monitor_get_name_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t st) __attribute__ ((always_inline));
static inline errval_t monitor_get_name_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t st)
{
    return(((_binding->tx_vtbl).get_name_iref_request)(_binding, _continuation, st));
}

static inline errval_t monitor_get_name_iref_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t st) __attribute__ ((always_inline));
static inline errval_t monitor_get_name_iref_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t st)
{
    return(((_binding->tx_vtbl).get_name_iref_reply)(_binding, _continuation, iref, st));
}

static inline errval_t monitor_get_ramfs_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t st) __attribute__ ((always_inline));
static inline errval_t monitor_get_ramfs_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t st)
{
    return(((_binding->tx_vtbl).get_ramfs_iref_request)(_binding, _continuation, st));
}

static inline errval_t monitor_get_ramfs_iref_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t st) __attribute__ ((always_inline));
static inline errval_t monitor_get_ramfs_iref_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t st)
{
    return(((_binding->tx_vtbl).get_ramfs_iref_reply)(_binding, _continuation, iref, st));
}

static inline errval_t monitor_set_ramfs_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref) __attribute__ ((always_inline));
static inline errval_t monitor_set_ramfs_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref)
{
    return(((_binding->tx_vtbl).set_ramfs_iref_request)(_binding, _continuation, iref));
}

static inline errval_t monitor_set_mem_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref) __attribute__ ((always_inline));
static inline errval_t monitor_set_mem_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref)
{
    return(((_binding->tx_vtbl).set_mem_iref_request)(_binding, _continuation, iref));
}

static inline errval_t monitor_set_name_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref) __attribute__ ((always_inline));
static inline errval_t monitor_set_name_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref)
{
    return(((_binding->tx_vtbl).set_name_iref_request)(_binding, _continuation, iref));
}

static inline errval_t monitor_set_name_iref_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_set_name_iref_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err)
{
    return(((_binding->tx_vtbl).set_name_iref_reply)(_binding, _continuation, err));
}

static inline errval_t monitor_get_monitor_rpc_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t st) __attribute__ ((always_inline));
static inline errval_t monitor_get_monitor_rpc_iref_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t st)
{
    return(((_binding->tx_vtbl).get_monitor_rpc_iref_request)(_binding, _continuation, st));
}

static inline errval_t monitor_get_monitor_rpc_iref_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t st) __attribute__ ((always_inline));
static inline errval_t monitor_get_monitor_rpc_iref_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, uintptr_t st)
{
    return(((_binding->tx_vtbl).get_monitor_rpc_iref_reply)(_binding, _continuation, iref, st));
}

static inline errval_t monitor_cap_send_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t mon_id, struct capref cap, monitor_capid_t_t capid) __attribute__ ((always_inline));
static inline errval_t monitor_cap_send_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t mon_id, struct capref cap, monitor_capid_t_t capid)
{
    return(((_binding->tx_vtbl).cap_send_request)(_binding, _continuation, mon_id, cap, capid));
}

static inline errval_t monitor_cap_move_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t mon_id, struct capref cap, monitor_capid_t_t capid) __attribute__ ((always_inline));
static inline errval_t monitor_cap_move_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t mon_id, struct capref cap, monitor_capid_t_t capid)
{
    return(((_binding->tx_vtbl).cap_move_request)(_binding, _continuation, mon_id, cap, capid));
}

static inline errval_t monitor_cap_receive_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t conn_id, monitor_errval_t err, struct capref cap, monitor_capid_t_t capid) __attribute__ ((always_inline));
static inline errval_t monitor_cap_receive_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t conn_id, monitor_errval_t err, struct capref cap, monitor_capid_t_t capid)
{
    return(((_binding->tx_vtbl).cap_receive_request)(_binding, _continuation, conn_id, err, cap, capid));
}

static inline errval_t monitor_span_domain_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t domain_id, uint8_t core_id, struct capref vroot, struct capref disp) __attribute__ ((always_inline));
static inline errval_t monitor_span_domain_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t domain_id, uint8_t core_id, struct capref vroot, struct capref disp)
{
    return(((_binding->tx_vtbl).span_domain_request)(_binding, _continuation, domain_id, core_id, vroot, disp));
}

static inline errval_t monitor_span_domain_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err, uintptr_t domain_id) __attribute__ ((always_inline));
static inline errval_t monitor_span_domain_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_errval_t err, uintptr_t domain_id)
{
    return(((_binding->tx_vtbl).span_domain_reply)(_binding, _continuation, err, domain_id));
}

static inline errval_t monitor_migrate_dispatcher_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uint8_t core_id, struct capref vroot, struct capref disp) __attribute__ ((always_inline));
static inline errval_t monitor_migrate_dispatcher_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uint8_t core_id, struct capref vroot, struct capref disp)
{
    return(((_binding->tx_vtbl).migrate_dispatcher_request)(_binding, _continuation, core_id, vroot, disp));
}

static inline errval_t monitor_multihop_routing_table_new__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_coreid_t max_coreid, monitor_coreid_t nentries) __attribute__ ((always_inline));
static inline errval_t monitor_multihop_routing_table_new__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_coreid_t max_coreid, monitor_coreid_t nentries)
{
    return(((_binding->tx_vtbl).multihop_routing_table_new)(_binding, _continuation, max_coreid, nentries));
}

static inline errval_t monitor_multihop_routing_table_set__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_coreid_t from, const monitor_coreid_t *to, size_t len) __attribute__ ((always_inline));
static inline errval_t monitor_multihop_routing_table_set__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_coreid_t from, const monitor_coreid_t *to, size_t len)
{
    return(((_binding->tx_vtbl).multihop_routing_table_set)(_binding, _continuation, from, to, len));
}

static inline errval_t monitor_multihop_bind_client_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, monitor_vci_t_t sender_vci) __attribute__ ((always_inline));
static inline errval_t monitor_multihop_bind_client_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref, monitor_vci_t_t sender_vci)
{
    return(((_binding->tx_vtbl).multihop_bind_client_request)(_binding, _continuation, iref, sender_vci));
}

static inline errval_t monitor_multihop_bind_client_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_vci_t_t receiver_vci, monitor_vci_t_t sender_vci, monitor_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_multihop_bind_client_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_vci_t_t receiver_vci, monitor_vci_t_t sender_vci, monitor_errval_t err)
{
    return(((_binding->tx_vtbl).multihop_bind_client_reply)(_binding, _continuation, receiver_vci, sender_vci, err));
}

static inline errval_t monitor_multihop_bind_service_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id, monitor_vci_t_t sender_vci) __attribute__ ((always_inline));
static inline errval_t monitor_multihop_bind_service_request__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t service_id, monitor_vci_t_t sender_vci)
{
    return(((_binding->tx_vtbl).multihop_bind_service_request)(_binding, _continuation, service_id, sender_vci));
}

static inline errval_t monitor_multihop_bind_service_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_vci_t_t receiver_vci, monitor_vci_t_t sender_vci, monitor_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_multihop_bind_service_reply__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_vci_t_t receiver_vci, monitor_vci_t_t sender_vci, monitor_errval_t err)
{
    return(((_binding->tx_vtbl).multihop_bind_service_reply)(_binding, _continuation, receiver_vci, sender_vci, err));
}

static inline errval_t monitor_multihop_message__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_vci_t_t vci, uint8_t direction, uint8_t flags, uint32_t ack, const uint8_t *payload, size_t size) __attribute__ ((always_inline));
static inline errval_t monitor_multihop_message__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_vci_t_t vci, uint8_t direction, uint8_t flags, uint32_t ack, const uint8_t *payload, size_t size)
{
    return(((_binding->tx_vtbl).multihop_message)(_binding, _continuation, vci, direction, flags, ack, payload, size));
}

static inline errval_t monitor_multihop_cap_send__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_vci_t_t vci, uint8_t direction, monitor_errval_t err, struct capref cap, monitor_capid_t_t capid) __attribute__ ((always_inline));
static inline errval_t monitor_multihop_cap_send__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_vci_t_t vci, uint8_t direction, monitor_errval_t err, struct capref cap, monitor_capid_t_t capid)
{
    return(((_binding->tx_vtbl).multihop_cap_send)(_binding, _continuation, vci, direction, err, cap, capid));
}

static inline errval_t monitor_trace_prepare__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_coreid_t origin_core) __attribute__ ((always_inline));
static inline errval_t monitor_trace_prepare__tx(struct monitor_binding *_binding, struct event_closure _continuation, monitor_coreid_t origin_core)
{
    return(((_binding->tx_vtbl).trace_prepare)(_binding, _continuation, origin_core));
}

static inline errval_t monitor_trace_prepare_finished__tx(struct monitor_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t monitor_trace_prepare_finished__tx(struct monitor_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).trace_prepare_finished)(_binding, _continuation));
}

static inline errval_t monitor_bfscope_flush_send__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref) __attribute__ ((always_inline));
static inline errval_t monitor_bfscope_flush_send__tx(struct monitor_binding *_binding, struct event_closure _continuation, iref_t iref)
{
    return(((_binding->tx_vtbl).bfscope_flush_send)(_binding, _continuation, iref));
}

static inline errval_t monitor_bfscope_flush_ack__tx(struct monitor_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t monitor_bfscope_flush_ack__tx(struct monitor_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).bfscope_flush_ack)(_binding, _continuation));
}

static inline errval_t monitor_migrate_dispatcher__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t domain_id) __attribute__ ((always_inline));
static inline errval_t monitor_migrate_dispatcher__tx(struct monitor_binding *_binding, struct event_closure _continuation, uintptr_t domain_id)
{
    return(((_binding->tx_vtbl).migrate_dispatcher)(_binding, _continuation, domain_id));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/monitor_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/monitor_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/monitor_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/monitor_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __monitor_IF_H
