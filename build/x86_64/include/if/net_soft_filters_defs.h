#ifndef __net_soft_filters_IF_H
#define __net_soft_filters_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: net_soft_filters
 * INTEFACE FILE: ../if/net_soft_filters.if
 * INTERFACE DESCRIPTION: Software based filter Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t net_soft_filters_genpaddr_t;
typedef uint64_t net_soft_filters_genvaddr_t;
typedef uint32_t net_soft_filters_rsrcid_t;
typedef uint64_t net_soft_filters_errval_t;
typedef uint64_t net_soft_filters_cycles_t;
typedef uint32_t net_soft_filters_iref_t;
typedef uint8_t net_soft_filters_coreid_t;
typedef uint32_t net_soft_filters_domainid_t;

/*
 * Forward declaration of binding type
 */
struct net_soft_filters_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void net_soft_filters_bind_continuation_fn(void *st, errval_t err, struct net_soft_filters_binding *_binding);
typedef  bool net_soft_filters_can_send_fn(struct net_soft_filters_binding *_binding);
typedef  errval_t net_soft_filters_register_send_fn(struct net_soft_filters_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t net_soft_filters_change_waitset_fn(struct net_soft_filters_binding *_binding, struct waitset *ws);
typedef  errval_t net_soft_filters_control_fn(struct net_soft_filters_binding *_binding, idc_control_t control);
typedef  void net_soft_filters_error_handler_fn(struct net_soft_filters_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum net_soft_filters_msg_enum {
    net_soft_filters___dummy__msgnum = 0,
    net_soft_filters___bind__msgnum = 1,
    net_soft_filters___bind_reply__msgnum = 2,
    net_soft_filters_register_filter_memory_request__msgnum = 3,
    net_soft_filters_register_filter_memory_response__msgnum = 4,
    net_soft_filters_register_filter_request__msgnum = 5,
    net_soft_filters_register_filter_response__msgnum = 6,
    net_soft_filters_re_register_filter_request__msgnum = 7,
    net_soft_filters_re_register_filter_response__msgnum = 8,
    net_soft_filters_deregister_filter_request__msgnum = 9,
    net_soft_filters_deregister_filter_response__msgnum = 10,
    net_soft_filters_register_arp_filter_request__msgnum = 11,
    net_soft_filters_register_arp_filter_response__msgnum = 12,
    net_soft_filters_pause__msgnum = 13,
    net_soft_filters_pause_response__msgnum = 14,
    net_soft_filters_unpause__msgnum = 15,
    net_soft_filters_unpause_response__msgnum = 16,
    net_soft_filters_mac_address_request__msgnum = 17,
    net_soft_filters_mac_address_response__msgnum = 18
} net_soft_filters_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t net_soft_filters_register_filter_memory_request__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, struct capref mem);
typedef  errval_t net_soft_filters_register_filter_memory_response__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, net_soft_filters_errval_t err);
typedef  errval_t net_soft_filters_register_filter_request__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t id, uint64_t len_rx, uint64_t len_tx, uint64_t buffer_id_rx, uint64_t buffer_id_tx, uint64_t filter_type, uint64_t paused);
typedef  errval_t net_soft_filters_register_filter_response__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t id, net_soft_filters_errval_t err, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx, uint64_t filter_type);
typedef  errval_t net_soft_filters_re_register_filter_request__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx);
typedef  errval_t net_soft_filters_re_register_filter_response__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, net_soft_filters_errval_t err, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx);
typedef  errval_t net_soft_filters_deregister_filter_request__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id);
typedef  errval_t net_soft_filters_deregister_filter_response__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, net_soft_filters_errval_t err, uint64_t filter_id);
typedef  errval_t net_soft_filters_register_arp_filter_request__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t id, uint64_t len_rx, uint64_t len_tx);
typedef  errval_t net_soft_filters_register_arp_filter_response__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t id, net_soft_filters_errval_t err);
typedef  errval_t net_soft_filters_pause__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx);
typedef  errval_t net_soft_filters_pause_response__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id, net_soft_filters_errval_t err);
typedef  errval_t net_soft_filters_unpause__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id);
typedef  errval_t net_soft_filters_unpause_response__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id, net_soft_filters_errval_t err);
typedef  errval_t net_soft_filters_mac_address_request__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation);
typedef  errval_t net_soft_filters_mac_address_response__tx_method_fn(struct net_soft_filters_binding *_binding, struct event_closure _continuation, net_soft_filters_errval_t err, uint64_t macaddr);

/*
 * Message type signatures (receive)
 */
typedef  void net_soft_filters_register_filter_memory_request__rx_method_fn(struct net_soft_filters_binding *_binding, struct capref mem);
typedef  void net_soft_filters_register_filter_memory_response__rx_method_fn(struct net_soft_filters_binding *_binding, net_soft_filters_errval_t err);
typedef  void net_soft_filters_register_filter_request__rx_method_fn(struct net_soft_filters_binding *_binding, uint64_t id, uint64_t len_rx, uint64_t len_tx, uint64_t buffer_id_rx, uint64_t buffer_id_tx, uint64_t filter_type, uint64_t paused);
typedef  void net_soft_filters_register_filter_response__rx_method_fn(struct net_soft_filters_binding *_binding, uint64_t id, net_soft_filters_errval_t err, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx, uint64_t filter_type);
typedef  void net_soft_filters_re_register_filter_request__rx_method_fn(struct net_soft_filters_binding *_binding, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx);
typedef  void net_soft_filters_re_register_filter_response__rx_method_fn(struct net_soft_filters_binding *_binding, net_soft_filters_errval_t err, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx);
typedef  void net_soft_filters_deregister_filter_request__rx_method_fn(struct net_soft_filters_binding *_binding, uint64_t filter_id);
typedef  void net_soft_filters_deregister_filter_response__rx_method_fn(struct net_soft_filters_binding *_binding, net_soft_filters_errval_t err, uint64_t filter_id);
typedef  void net_soft_filters_register_arp_filter_request__rx_method_fn(struct net_soft_filters_binding *_binding, uint64_t id, uint64_t len_rx, uint64_t len_tx);
typedef  void net_soft_filters_register_arp_filter_response__rx_method_fn(struct net_soft_filters_binding *_binding, uint64_t id, net_soft_filters_errval_t err);
typedef  void net_soft_filters_pause__rx_method_fn(struct net_soft_filters_binding *_binding, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx);
typedef  void net_soft_filters_pause_response__rx_method_fn(struct net_soft_filters_binding *_binding, uint64_t filter_id, net_soft_filters_errval_t err);
typedef  void net_soft_filters_unpause__rx_method_fn(struct net_soft_filters_binding *_binding, uint64_t filter_id);
typedef  void net_soft_filters_unpause_response__rx_method_fn(struct net_soft_filters_binding *_binding, uint64_t filter_id, net_soft_filters_errval_t err);
typedef  void net_soft_filters_mac_address_request__rx_method_fn(struct net_soft_filters_binding *_binding);
typedef  void net_soft_filters_mac_address_response__rx_method_fn(struct net_soft_filters_binding *_binding, net_soft_filters_errval_t err, uint64_t macaddr);

/*
 * Struct type for holding the args for each msg
 */
struct net_soft_filters_register_filter_memory_request__args {
    struct capref mem;
};
struct net_soft_filters_register_filter_memory_response__args {
    net_soft_filters_errval_t err;
};
struct net_soft_filters_register_filter_request__args {
    uint64_t id;
    uint64_t len_rx;
    uint64_t len_tx;
    uint64_t buffer_id_rx;
    uint64_t buffer_id_tx;
    uint64_t filter_type;
    uint64_t paused;
};
struct net_soft_filters_register_filter_response__args {
    uint64_t id;
    net_soft_filters_errval_t err;
    uint64_t filter_id;
    uint64_t buffer_id_rx;
    uint64_t buffer_id_tx;
    uint64_t filter_type;
};
struct net_soft_filters_re_register_filter_request__args {
    uint64_t filter_id;
    uint64_t buffer_id_rx;
    uint64_t buffer_id_tx;
};
struct net_soft_filters_re_register_filter_response__args {
    net_soft_filters_errval_t err;
    uint64_t filter_id;
    uint64_t buffer_id_rx;
    uint64_t buffer_id_tx;
};
struct net_soft_filters_deregister_filter_request__args {
    uint64_t filter_id;
};
struct net_soft_filters_deregister_filter_response__args {
    net_soft_filters_errval_t err;
    uint64_t filter_id;
};
struct net_soft_filters_register_arp_filter_request__args {
    uint64_t id;
    uint64_t len_rx;
    uint64_t len_tx;
};
struct net_soft_filters_register_arp_filter_response__args {
    uint64_t id;
    net_soft_filters_errval_t err;
};
struct net_soft_filters_pause__args {
    uint64_t filter_id;
    uint64_t buffer_id_rx;
    uint64_t buffer_id_tx;
};
struct net_soft_filters_pause_response__args {
    uint64_t filter_id;
    net_soft_filters_errval_t err;
};
struct net_soft_filters_unpause__args {
    uint64_t filter_id;
};
struct net_soft_filters_unpause_response__args {
    uint64_t filter_id;
    net_soft_filters_errval_t err;
};
struct net_soft_filters_mac_address_response__args {
    net_soft_filters_errval_t err;
    uint64_t macaddr;
};

/*
 * Union type for all message arguments
 */
union net_soft_filters_arg_union {
    struct net_soft_filters_register_filter_memory_request__args register_filter_memory_request;
    struct net_soft_filters_register_filter_memory_response__args register_filter_memory_response;
    struct net_soft_filters_register_filter_request__args register_filter_request;
    struct net_soft_filters_register_filter_response__args register_filter_response;
    struct net_soft_filters_re_register_filter_request__args re_register_filter_request;
    struct net_soft_filters_re_register_filter_response__args re_register_filter_response;
    struct net_soft_filters_deregister_filter_request__args deregister_filter_request;
    struct net_soft_filters_deregister_filter_response__args deregister_filter_response;
    struct net_soft_filters_register_arp_filter_request__args register_arp_filter_request;
    struct net_soft_filters_register_arp_filter_response__args register_arp_filter_response;
    struct net_soft_filters_pause__args pause;
    struct net_soft_filters_pause_response__args pause_response;
    struct net_soft_filters_unpause__args unpause;
    struct net_soft_filters_unpause_response__args unpause_response;
    struct net_soft_filters_mac_address_response__args mac_address_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct net_soft_filters_tx_vtbl {
    net_soft_filters_register_filter_memory_request__tx_method_fn *register_filter_memory_request;
    net_soft_filters_register_filter_memory_response__tx_method_fn *register_filter_memory_response;
    net_soft_filters_register_filter_request__tx_method_fn *register_filter_request;
    net_soft_filters_register_filter_response__tx_method_fn *register_filter_response;
    net_soft_filters_re_register_filter_request__tx_method_fn *re_register_filter_request;
    net_soft_filters_re_register_filter_response__tx_method_fn *re_register_filter_response;
    net_soft_filters_deregister_filter_request__tx_method_fn *deregister_filter_request;
    net_soft_filters_deregister_filter_response__tx_method_fn *deregister_filter_response;
    net_soft_filters_register_arp_filter_request__tx_method_fn *register_arp_filter_request;
    net_soft_filters_register_arp_filter_response__tx_method_fn *register_arp_filter_response;
    net_soft_filters_pause__tx_method_fn *pause;
    net_soft_filters_pause_response__tx_method_fn *pause_response;
    net_soft_filters_unpause__tx_method_fn *unpause;
    net_soft_filters_unpause_response__tx_method_fn *unpause_response;
    net_soft_filters_mac_address_request__tx_method_fn *mac_address_request;
    net_soft_filters_mac_address_response__tx_method_fn *mac_address_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct net_soft_filters_rx_vtbl {
    net_soft_filters_register_filter_memory_request__rx_method_fn *register_filter_memory_request;
    net_soft_filters_register_filter_memory_response__rx_method_fn *register_filter_memory_response;
    net_soft_filters_register_filter_request__rx_method_fn *register_filter_request;
    net_soft_filters_register_filter_response__rx_method_fn *register_filter_response;
    net_soft_filters_re_register_filter_request__rx_method_fn *re_register_filter_request;
    net_soft_filters_re_register_filter_response__rx_method_fn *re_register_filter_response;
    net_soft_filters_deregister_filter_request__rx_method_fn *deregister_filter_request;
    net_soft_filters_deregister_filter_response__rx_method_fn *deregister_filter_response;
    net_soft_filters_register_arp_filter_request__rx_method_fn *register_arp_filter_request;
    net_soft_filters_register_arp_filter_response__rx_method_fn *register_arp_filter_response;
    net_soft_filters_pause__rx_method_fn *pause;
    net_soft_filters_pause_response__rx_method_fn *pause_response;
    net_soft_filters_unpause__rx_method_fn *unpause;
    net_soft_filters_unpause_response__rx_method_fn *unpause_response;
    net_soft_filters_mac_address_request__rx_method_fn *mac_address_request;
    net_soft_filters_mac_address_response__rx_method_fn *mac_address_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t net_soft_filters_connect_fn(void *st, struct net_soft_filters_binding *binding);

/*
 * Export state struct
 */
struct net_soft_filters_export {
    struct idc_export common;
    net_soft_filters_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t net_soft_filters_export(void *st, idc_export_callback_fn *export_cb, net_soft_filters_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct net_soft_filters_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t net_soft_filters_accept(struct net_soft_filters_frameinfo *_frameinfo, void *st, net_soft_filters_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct net_soft_filters_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    net_soft_filters_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    net_soft_filters_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    net_soft_filters_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    net_soft_filters_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    net_soft_filters_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct net_soft_filters_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct net_soft_filters_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union net_soft_filters_arg_union tx_union;
    union net_soft_filters_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum net_soft_filters_msg_enum tx_msgnum;
    enum net_soft_filters_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    net_soft_filters_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t net_soft_filters_bind(iref_t i, net_soft_filters_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t net_soft_filters_connect(struct net_soft_filters_frameinfo *_frameinfo, net_soft_filters_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t net_soft_filters_register_filter_memory_request__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, struct capref mem) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_register_filter_memory_request__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, struct capref mem)
{
    return(((_binding->tx_vtbl).register_filter_memory_request)(_binding, _continuation, mem));
}

static inline errval_t net_soft_filters_register_filter_memory_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, net_soft_filters_errval_t err) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_register_filter_memory_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, net_soft_filters_errval_t err)
{
    return(((_binding->tx_vtbl).register_filter_memory_response)(_binding, _continuation, err));
}

static inline errval_t net_soft_filters_register_filter_request__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t id, uint64_t len_rx, uint64_t len_tx, uint64_t buffer_id_rx, uint64_t buffer_id_tx, uint64_t filter_type, uint64_t paused) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_register_filter_request__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t id, uint64_t len_rx, uint64_t len_tx, uint64_t buffer_id_rx, uint64_t buffer_id_tx, uint64_t filter_type, uint64_t paused)
{
    return(((_binding->tx_vtbl).register_filter_request)(_binding, _continuation, id, len_rx, len_tx, buffer_id_rx, buffer_id_tx, filter_type, paused));
}

static inline errval_t net_soft_filters_register_filter_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t id, net_soft_filters_errval_t err, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx, uint64_t filter_type) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_register_filter_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t id, net_soft_filters_errval_t err, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx, uint64_t filter_type)
{
    return(((_binding->tx_vtbl).register_filter_response)(_binding, _continuation, id, err, filter_id, buffer_id_rx, buffer_id_tx, filter_type));
}

static inline errval_t net_soft_filters_re_register_filter_request__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_re_register_filter_request__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx)
{
    return(((_binding->tx_vtbl).re_register_filter_request)(_binding, _continuation, filter_id, buffer_id_rx, buffer_id_tx));
}

static inline errval_t net_soft_filters_re_register_filter_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, net_soft_filters_errval_t err, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_re_register_filter_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, net_soft_filters_errval_t err, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx)
{
    return(((_binding->tx_vtbl).re_register_filter_response)(_binding, _continuation, err, filter_id, buffer_id_rx, buffer_id_tx));
}

static inline errval_t net_soft_filters_deregister_filter_request__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_deregister_filter_request__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id)
{
    return(((_binding->tx_vtbl).deregister_filter_request)(_binding, _continuation, filter_id));
}

static inline errval_t net_soft_filters_deregister_filter_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, net_soft_filters_errval_t err, uint64_t filter_id) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_deregister_filter_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, net_soft_filters_errval_t err, uint64_t filter_id)
{
    return(((_binding->tx_vtbl).deregister_filter_response)(_binding, _continuation, err, filter_id));
}

static inline errval_t net_soft_filters_register_arp_filter_request__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t id, uint64_t len_rx, uint64_t len_tx) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_register_arp_filter_request__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t id, uint64_t len_rx, uint64_t len_tx)
{
    return(((_binding->tx_vtbl).register_arp_filter_request)(_binding, _continuation, id, len_rx, len_tx));
}

static inline errval_t net_soft_filters_register_arp_filter_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t id, net_soft_filters_errval_t err) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_register_arp_filter_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t id, net_soft_filters_errval_t err)
{
    return(((_binding->tx_vtbl).register_arp_filter_response)(_binding, _continuation, id, err));
}

static inline errval_t net_soft_filters_pause__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_pause__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id, uint64_t buffer_id_rx, uint64_t buffer_id_tx)
{
    return(((_binding->tx_vtbl).pause)(_binding, _continuation, filter_id, buffer_id_rx, buffer_id_tx));
}

static inline errval_t net_soft_filters_pause_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id, net_soft_filters_errval_t err) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_pause_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id, net_soft_filters_errval_t err)
{
    return(((_binding->tx_vtbl).pause_response)(_binding, _continuation, filter_id, err));
}

static inline errval_t net_soft_filters_unpause__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_unpause__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id)
{
    return(((_binding->tx_vtbl).unpause)(_binding, _continuation, filter_id));
}

static inline errval_t net_soft_filters_unpause_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id, net_soft_filters_errval_t err) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_unpause_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, uint64_t filter_id, net_soft_filters_errval_t err)
{
    return(((_binding->tx_vtbl).unpause_response)(_binding, _continuation, filter_id, err));
}

static inline errval_t net_soft_filters_mac_address_request__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_mac_address_request__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).mac_address_request)(_binding, _continuation));
}

static inline errval_t net_soft_filters_mac_address_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, net_soft_filters_errval_t err, uint64_t macaddr) __attribute__ ((always_inline));
static inline errval_t net_soft_filters_mac_address_response__tx(struct net_soft_filters_binding *_binding, struct event_closure _continuation, net_soft_filters_errval_t err, uint64_t macaddr)
{
    return(((_binding->tx_vtbl).mac_address_response)(_binding, _continuation, err, macaddr));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/net_soft_filters_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/net_soft_filters_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/net_soft_filters_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/net_soft_filters_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __net_soft_filters_IF_H
