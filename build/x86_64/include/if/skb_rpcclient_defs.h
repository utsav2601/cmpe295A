#ifndef __skb_RPC_CLIENT_H
#define __skb_RPC_CLIENT_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: skb
 * INTEFACE FILE: ../if/skb.if
 * INTERFACE DESCRIPTION: SKB RPC Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

/*
 * RPC client
 */

#include <if/skb_defs.h>

/*
 * Forward declaration of binding type
 */
struct skb_rpc_client;

/*
 * Function signatures
 */
typedef  errval_t skb_run__rpc_method_fn(struct skb_rpc_client *_rpc, const char *input, char **output, char **str_error, int32_t *int_error);
typedef  errval_t skb_get_identifier__rpc_method_fn(struct skb_rpc_client *_rpc, uint64_t *id);
typedef  errval_t skb_identify__rpc_method_fn(struct skb_rpc_client *_rpc, uint64_t id);
typedef  errval_t skb_get__rpc_method_fn(struct skb_rpc_client *_rpc, const char *query, char **output, char **error, skb_errval_t *error_code);
typedef  errval_t skb_set__rpc_method_fn(struct skb_rpc_client *_rpc, const char *input, char **error, skb_errval_t *error_code);
typedef  errval_t skb_del__rpc_method_fn(struct skb_rpc_client *_rpc, const char *query, skb_errval_t *error_code);
typedef  errval_t skb_subscribe__rpc_method_fn(struct skb_rpc_client *_rpc, const char *query, uint64_t id, skb_errval_t *err);
typedef  errval_t skb_unsubscribe__rpc_method_fn(struct skb_rpc_client *_rpc, uint64_t id, skb_errval_t *err);
typedef  errval_t skb_publish__rpc_method_fn(struct skb_rpc_client *_rpc, const char *object, skb_errval_t *err);
typedef  errval_t skb_lock__rpc_method_fn(struct skb_rpc_client *_rpc, const char *object, skb_errval_t *err);
typedef  errval_t skb_unlock__rpc_method_fn(struct skb_rpc_client *_rpc, const char *object, skb_errval_t *err);

/*
 * VTable struct definition for the interface
 */
struct skb_rpc_vtbl {
    skb_run__rpc_method_fn *run;
    skb_get_identifier__rpc_method_fn *get_identifier;
    skb_identify__rpc_method_fn *identify;
    skb_get__rpc_method_fn *get;
    skb_set__rpc_method_fn *set;
    skb_del__rpc_method_fn *del;
    skb_subscribe__rpc_method_fn *subscribe;
    skb_unsubscribe__rpc_method_fn *unsubscribe;
    skb_publish__rpc_method_fn *publish;
    skb_lock__rpc_method_fn *lock;
    skb_unlock__rpc_method_fn *unlock;
};

/*
 * The Binding structure
 */
struct skb_rpc_client {
    struct skb_binding *b;
    struct skb_rpc_vtbl vtbl;
    bool rpc_in_progress;
    bool reply_present;
    errval_t async_error;
    struct waitset rpc_waitset;
    struct waitset_chanstate dummy_chanstate;
};

/*
 * Function to initialise an RPC client
 */
extern  errval_t skb_rpc_client_init(struct skb_rpc_client *rpc, struct skb_binding *binding);

#endif // __skb_RPC_CLIENT_H
