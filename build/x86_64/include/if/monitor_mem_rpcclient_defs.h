#ifndef __monitor_mem_RPC_CLIENT_H
#define __monitor_mem_RPC_CLIENT_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: monitor_mem
 * INTEFACE FILE: ../if/monitor_mem.if
 * INTERFACE DESCRIPTION: Inter-monitor memory allocation
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

/*
 * RPC client
 */

#include <if/monitor_mem_defs.h>

/*
 * Forward declaration of binding type
 */
struct monitor_mem_rpc_client;

/*
 * Function signatures
 */
typedef  errval_t monitor_mem_alloc__rpc_method_fn(struct monitor_mem_rpc_client *_rpc, uint8_t size_bits, monitor_mem_genpaddr_t minbase, monitor_mem_genpaddr_t maxlimit, monitor_mem_coreid_t from, monitor_mem_errval_t *err, monitor_mem_caprep_t *caprep);
typedef  errval_t monitor_mem_free__rpc_method_fn(struct monitor_mem_rpc_client *_rpc, monitor_mem_caprep_t caprep, monitor_mem_genpaddr_t base, uint8_t size_bits, monitor_mem_errval_t *status);

/*
 * VTable struct definition for the interface
 */
struct monitor_mem_rpc_vtbl {
    monitor_mem_alloc__rpc_method_fn *alloc;
    monitor_mem_free__rpc_method_fn *free;
};

/*
 * The Binding structure
 */
struct monitor_mem_rpc_client {
    struct monitor_mem_binding *b;
    struct monitor_mem_rpc_vtbl vtbl;
    bool rpc_in_progress;
    bool reply_present;
    errval_t async_error;
    struct waitset rpc_waitset;
    struct waitset_chanstate dummy_chanstate;
};

/*
 * Function to initialise an RPC client
 */
extern  errval_t monitor_mem_rpc_client_init(struct monitor_mem_rpc_client *rpc, struct monitor_mem_binding *binding);

#endif // __monitor_mem_RPC_CLIENT_H
