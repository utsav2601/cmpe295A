#ifndef __monitor_blocking_RPC_CLIENT_H
#define __monitor_blocking_RPC_CLIENT_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: monitor_blocking
 * INTEFACE FILE: ../if/monitor_blocking.if
 * INTERFACE DESCRIPTION: The monitor to client RPC interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

/*
 * RPC client
 */

#include <if/monitor_blocking_defs.h>

/*
 * Forward declaration of binding type
 */
struct monitor_blocking_rpc_client;

/*
 * Function signatures
 */
typedef  errval_t monitor_blocking_get_bootinfo__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, monitor_blocking_errval_t *err, struct capref *frame, size_t *frame_size);
typedef  errval_t monitor_blocking_remote_cap_retype__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, struct capref croot, uint32_t src, uint64_t objtype, uint8_t size_bits, uint32_t to, uint32_t slot, int32_t dcn_vbits, monitor_blocking_errval_t *err);
typedef  errval_t monitor_blocking_remote_cap_delete__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, struct capref croot, uint32_t src, uint8_t vbits, monitor_blocking_errval_t *err);
typedef  errval_t monitor_blocking_remote_cap_revoke__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, struct capref croot, uint32_t src, uint8_t vbits, monitor_blocking_errval_t *err);
typedef  errval_t monitor_blocking_get_phyaddr_cap__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, struct capref *pyaddr, monitor_blocking_errval_t *err);
typedef  errval_t monitor_blocking_get_io_cap__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, struct capref *io, monitor_blocking_errval_t *err);
typedef  errval_t monitor_blocking_rsrc_manifest__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, struct capref dispatcher, const char *manifest, monitor_blocking_rsrcid_t *id, monitor_blocking_errval_t *err);
typedef  errval_t monitor_blocking_rsrc_join__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, monitor_blocking_rsrcid_t id, struct capref dispatcher, monitor_blocking_errval_t *err);
typedef  errval_t monitor_blocking_rsrc_phase__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, monitor_blocking_rsrcid_t id, uint32_t phase);
typedef  errval_t monitor_blocking_alloc_monitor_ep__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, monitor_blocking_errval_t *err, struct capref *ep);
typedef  errval_t monitor_blocking_cap_identify__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, struct capref cap, monitor_blocking_errval_t *err, monitor_blocking_caprep_t *caprep);
typedef  errval_t monitor_blocking_cap_set_remote__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, struct capref cap, bool remote, monitor_blocking_errval_t *err);
typedef  errval_t monitor_blocking_irq_handle__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, struct capref ep, monitor_blocking_errval_t *err, uint32_t *vector);
typedef  errval_t monitor_blocking_arm_irq_handle__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, struct capref ep, uint32_t irq, monitor_blocking_errval_t *err);
typedef  errval_t monitor_blocking_get_arch_core_id__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, uintptr_t *id);
typedef  errval_t monitor_blocking_get_ipi_cap__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, struct capref *cap);
typedef  errval_t monitor_blocking_forward_kcb_request__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, monitor_blocking_coreid_t destination, struct capref kcb, monitor_blocking_errval_t *err);
typedef  errval_t monitor_blocking_forward_kcb_rm_request__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, monitor_blocking_coreid_t destination, struct capref kcb, monitor_blocking_errval_t *err);
typedef  errval_t monitor_blocking_get_global_paddr__rpc_method_fn(struct monitor_blocking_rpc_client *_rpc, monitor_blocking_genpaddr_t *global);

/*
 * VTable struct definition for the interface
 */
struct monitor_blocking_rpc_vtbl {
    monitor_blocking_get_bootinfo__rpc_method_fn *get_bootinfo;
    monitor_blocking_remote_cap_retype__rpc_method_fn *remote_cap_retype;
    monitor_blocking_remote_cap_delete__rpc_method_fn *remote_cap_delete;
    monitor_blocking_remote_cap_revoke__rpc_method_fn *remote_cap_revoke;
    monitor_blocking_get_phyaddr_cap__rpc_method_fn *get_phyaddr_cap;
    monitor_blocking_get_io_cap__rpc_method_fn *get_io_cap;
    monitor_blocking_rsrc_manifest__rpc_method_fn *rsrc_manifest;
    monitor_blocking_rsrc_join__rpc_method_fn *rsrc_join;
    monitor_blocking_rsrc_phase__rpc_method_fn *rsrc_phase;
    monitor_blocking_alloc_monitor_ep__rpc_method_fn *alloc_monitor_ep;
    monitor_blocking_cap_identify__rpc_method_fn *cap_identify;
    monitor_blocking_cap_set_remote__rpc_method_fn *cap_set_remote;
    monitor_blocking_irq_handle__rpc_method_fn *irq_handle;
    monitor_blocking_arm_irq_handle__rpc_method_fn *arm_irq_handle;
    monitor_blocking_get_arch_core_id__rpc_method_fn *get_arch_core_id;
    monitor_blocking_get_ipi_cap__rpc_method_fn *get_ipi_cap;
    monitor_blocking_forward_kcb_request__rpc_method_fn *forward_kcb_request;
    monitor_blocking_forward_kcb_rm_request__rpc_method_fn *forward_kcb_rm_request;
    monitor_blocking_get_global_paddr__rpc_method_fn *get_global_paddr;
};

/*
 * The Binding structure
 */
struct monitor_blocking_rpc_client {
    struct monitor_blocking_binding *b;
    struct monitor_blocking_rpc_vtbl vtbl;
    bool rpc_in_progress;
    bool reply_present;
    errval_t async_error;
    struct waitset rpc_waitset;
    struct waitset_chanstate dummy_chanstate;
};

/*
 * Function to initialise an RPC client
 */
extern  errval_t monitor_blocking_rpc_client_init(struct monitor_blocking_rpc_client *rpc, struct monitor_blocking_binding *binding);

#endif // __monitor_blocking_RPC_CLIENT_H
