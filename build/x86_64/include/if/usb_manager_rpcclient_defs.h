#ifndef __usb_manager_RPC_CLIENT_H
#define __usb_manager_RPC_CLIENT_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: usb_manager
 * INTEFACE FILE: ../if/usb_manager.if
 * INTERFACE DESCRIPTION: USB Manager Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

/*
 * RPC client
 */

#include <if/usb_manager_defs.h>

/*
 * Forward declaration of binding type
 */
struct usb_manager_rpc_client;

/*
 * Function signatures
 */
typedef  errval_t usb_manager_connect__rpc_method_fn(struct usb_manager_rpc_client *_rpc, iref_t driver_iref, uint16_t init_config, uint32_t *ret_error, uint8_t **ret_desc, size_t *length);
typedef  errval_t usb_manager_device_disconnect_notify__rpc_method_fn(struct usb_manager_rpc_client *_rpc);
typedef  errval_t usb_manager_request_read__rpc_method_fn(struct usb_manager_rpc_client *_rpc, const uint8_t *request, size_t req_length, uint8_t **data, size_t *data_length, uint32_t *ret_status);
typedef  errval_t usb_manager_request_write__rpc_method_fn(struct usb_manager_rpc_client *_rpc, const uint8_t *request, size_t req_length, const uint8_t *data, size_t data_length, uint32_t *ret_status);
typedef  errval_t usb_manager_request__rpc_method_fn(struct usb_manager_rpc_client *_rpc, const uint8_t *request, size_t req_length, uint32_t *ret_status);
typedef  errval_t usb_manager_transfer_setup__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint8_t type, usb_manager_setup_param_t params, uint32_t *ret_error, uint32_t *ret_tid);
typedef  errval_t usb_manager_transfer_unsetup__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint32_t tid, uint32_t *ret_error);
typedef  errval_t usb_manager_transfer_start__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint32_t tid, uint32_t *ret_error);
typedef  errval_t usb_manager_transfer_stop__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint32_t tid, uint32_t *ret_error);
typedef  errval_t usb_manager_transfer_status__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint32_t tid, uint32_t *ret_error, uint32_t *ret_actlen, uint32_t *ret_length, uint32_t *ret_actframes, uint32_t *ret_numframes);
typedef  errval_t usb_manager_transfer_state__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint32_t tid, uint32_t *ret_error, uint32_t *ret_state);
typedef  errval_t usb_manager_transfer_clear_stall__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint32_t tid, uint32_t *ret_error);
typedef  errval_t usb_manager_transfer_done_notify__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint32_t *tid, uint32_t *error, uint8_t **data, size_t *length);
typedef  errval_t usb_manager_device_get_speed__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint8_t *ret_speed);
typedef  errval_t usb_manager_device_get_state__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint8_t *ret_state);
typedef  errval_t usb_manager_device_suspend__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint32_t *ret_error);
typedef  errval_t usb_manager_device_resume__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint32_t *ret_error);
typedef  errval_t usb_manager_device_powersave__rpc_method_fn(struct usb_manager_rpc_client *_rpc, uint8_t powerstate, uint32_t *ret_error);

/*
 * VTable struct definition for the interface
 */
struct usb_manager_rpc_vtbl {
    usb_manager_connect__rpc_method_fn *connect;
    usb_manager_device_disconnect_notify__rpc_method_fn *device_disconnect_notify;
    usb_manager_request_read__rpc_method_fn *request_read;
    usb_manager_request_write__rpc_method_fn *request_write;
    usb_manager_request__rpc_method_fn *request;
    usb_manager_transfer_setup__rpc_method_fn *transfer_setup;
    usb_manager_transfer_unsetup__rpc_method_fn *transfer_unsetup;
    usb_manager_transfer_start__rpc_method_fn *transfer_start;
    usb_manager_transfer_stop__rpc_method_fn *transfer_stop;
    usb_manager_transfer_status__rpc_method_fn *transfer_status;
    usb_manager_transfer_state__rpc_method_fn *transfer_state;
    usb_manager_transfer_clear_stall__rpc_method_fn *transfer_clear_stall;
    usb_manager_transfer_done_notify__rpc_method_fn *transfer_done_notify;
    usb_manager_device_get_speed__rpc_method_fn *device_get_speed;
    usb_manager_device_get_state__rpc_method_fn *device_get_state;
    usb_manager_device_suspend__rpc_method_fn *device_suspend;
    usb_manager_device_resume__rpc_method_fn *device_resume;
    usb_manager_device_powersave__rpc_method_fn *device_powersave;
};

/*
 * The Binding structure
 */
struct usb_manager_rpc_client {
    struct usb_manager_binding *b;
    struct usb_manager_rpc_vtbl vtbl;
    bool rpc_in_progress;
    bool reply_present;
    errval_t async_error;
    struct waitset rpc_waitset;
    struct waitset_chanstate dummy_chanstate;
};

/*
 * Function to initialise an RPC client
 */
extern  errval_t usb_manager_rpc_client_init(struct usb_manager_rpc_client *rpc, struct usb_manager_binding *binding);

#endif // __usb_manager_RPC_CLIENT_H
