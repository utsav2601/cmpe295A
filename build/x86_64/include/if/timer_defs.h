#ifndef __timer_IF_H
#define __timer_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: timer
 * INTEFACE FILE: ../if/timer.if
 * INTERFACE DESCRIPTION: Timer service
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t timer_genpaddr_t;
typedef uint64_t timer_genvaddr_t;
typedef uint32_t timer_rsrcid_t;
typedef uint64_t timer_errval_t;
typedef uint64_t timer_cycles_t;
typedef uint32_t timer_iref_t;
typedef uint8_t timer_coreid_t;
typedef uint32_t timer_domainid_t;

/*
 * Forward declaration of binding type
 */
struct timer_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void timer_bind_continuation_fn(void *st, errval_t err, struct timer_binding *_binding);
typedef  bool timer_can_send_fn(struct timer_binding *_binding);
typedef  errval_t timer_register_send_fn(struct timer_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t timer_change_waitset_fn(struct timer_binding *_binding, struct waitset *ws);
typedef  errval_t timer_control_fn(struct timer_binding *_binding, idc_control_t control);
typedef  void timer_error_handler_fn(struct timer_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum timer_msg_enum {
    timer___dummy__msgnum = 0,
    timer___bind__msgnum = 1,
    timer___bind_reply__msgnum = 2,
    timer_set_timeout__msgnum = 3,
    timer_add_to_timeout__msgnum = 4,
    timer_cancel_timeout__msgnum = 5,
    timer_wakeup__msgnum = 6,
    timer_get_remaining__msgnum = 7,
    timer_remaining__msgnum = 8
} timer_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t timer_set_timeout__tx_method_fn(struct timer_binding *_binding, struct event_closure _continuation, uint64_t timeout);
typedef  errval_t timer_add_to_timeout__tx_method_fn(struct timer_binding *_binding, struct event_closure _continuation, uint64_t increment);
typedef  errval_t timer_cancel_timeout__tx_method_fn(struct timer_binding *_binding, struct event_closure _continuation);
typedef  errval_t timer_wakeup__tx_method_fn(struct timer_binding *_binding, struct event_closure _continuation);
typedef  errval_t timer_get_remaining__tx_method_fn(struct timer_binding *_binding, struct event_closure _continuation);
typedef  errval_t timer_remaining__tx_method_fn(struct timer_binding *_binding, struct event_closure _continuation, uint64_t time);

/*
 * Message type signatures (receive)
 */
typedef  void timer_set_timeout__rx_method_fn(struct timer_binding *_binding, uint64_t timeout);
typedef  void timer_add_to_timeout__rx_method_fn(struct timer_binding *_binding, uint64_t increment);
typedef  void timer_cancel_timeout__rx_method_fn(struct timer_binding *_binding);
typedef  void timer_wakeup__rx_method_fn(struct timer_binding *_binding);
typedef  void timer_get_remaining__rx_method_fn(struct timer_binding *_binding);
typedef  void timer_remaining__rx_method_fn(struct timer_binding *_binding, uint64_t time);

/*
 * Struct type for holding the args for each msg
 */
struct timer_set_timeout__args {
    uint64_t timeout;
};
struct timer_add_to_timeout__args {
    uint64_t increment;
};
struct timer_remaining__args {
    uint64_t time;
};

/*
 * Union type for all message arguments
 */
union timer_arg_union {
    struct timer_set_timeout__args set_timeout;
    struct timer_add_to_timeout__args add_to_timeout;
    struct timer_remaining__args remaining;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct timer_tx_vtbl {
    timer_set_timeout__tx_method_fn *set_timeout;
    timer_add_to_timeout__tx_method_fn *add_to_timeout;
    timer_cancel_timeout__tx_method_fn *cancel_timeout;
    timer_wakeup__tx_method_fn *wakeup;
    timer_get_remaining__tx_method_fn *get_remaining;
    timer_remaining__tx_method_fn *remaining;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct timer_rx_vtbl {
    timer_set_timeout__rx_method_fn *set_timeout;
    timer_add_to_timeout__rx_method_fn *add_to_timeout;
    timer_cancel_timeout__rx_method_fn *cancel_timeout;
    timer_wakeup__rx_method_fn *wakeup;
    timer_get_remaining__rx_method_fn *get_remaining;
    timer_remaining__rx_method_fn *remaining;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t timer_connect_fn(void *st, struct timer_binding *binding);

/*
 * Export state struct
 */
struct timer_export {
    struct idc_export common;
    timer_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t timer_export(void *st, idc_export_callback_fn *export_cb, timer_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct timer_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t timer_accept(struct timer_frameinfo *_frameinfo, void *st, timer_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct timer_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    timer_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    timer_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    timer_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    timer_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    timer_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct timer_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct timer_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union timer_arg_union tx_union;
    union timer_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum timer_msg_enum tx_msgnum;
    enum timer_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    timer_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t timer_bind(iref_t i, timer_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t timer_connect(struct timer_frameinfo *_frameinfo, timer_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t timer_set_timeout__tx(struct timer_binding *_binding, struct event_closure _continuation, uint64_t timeout) __attribute__ ((always_inline));
static inline errval_t timer_set_timeout__tx(struct timer_binding *_binding, struct event_closure _continuation, uint64_t timeout)
{
    return(((_binding->tx_vtbl).set_timeout)(_binding, _continuation, timeout));
}

static inline errval_t timer_add_to_timeout__tx(struct timer_binding *_binding, struct event_closure _continuation, uint64_t increment) __attribute__ ((always_inline));
static inline errval_t timer_add_to_timeout__tx(struct timer_binding *_binding, struct event_closure _continuation, uint64_t increment)
{
    return(((_binding->tx_vtbl).add_to_timeout)(_binding, _continuation, increment));
}

static inline errval_t timer_cancel_timeout__tx(struct timer_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t timer_cancel_timeout__tx(struct timer_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).cancel_timeout)(_binding, _continuation));
}

static inline errval_t timer_wakeup__tx(struct timer_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t timer_wakeup__tx(struct timer_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).wakeup)(_binding, _continuation));
}

static inline errval_t timer_get_remaining__tx(struct timer_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t timer_get_remaining__tx(struct timer_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_remaining)(_binding, _continuation));
}

static inline errval_t timer_remaining__tx(struct timer_binding *_binding, struct event_closure _continuation, uint64_t time) __attribute__ ((always_inline));
static inline errval_t timer_remaining__tx(struct timer_binding *_binding, struct event_closure _continuation, uint64_t time)
{
    return(((_binding->tx_vtbl).remaining)(_binding, _continuation, time));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/timer_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/timer_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/timer_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/timer_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __timer_IF_H
