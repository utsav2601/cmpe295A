#ifndef __monitor_blocking_IF_H
#define __monitor_blocking_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: monitor_blocking
 * INTEFACE FILE: ../if/monitor_blocking.if
 * INTERFACE DESCRIPTION: The monitor to client RPC interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t monitor_blocking_genpaddr_t;
typedef uint64_t monitor_blocking_genvaddr_t;
typedef uint32_t monitor_blocking_rsrcid_t;
typedef uint64_t monitor_blocking_errval_t;
typedef uint64_t monitor_blocking_cycles_t;
typedef uint32_t monitor_blocking_iref_t;
typedef uint8_t monitor_blocking_coreid_t;
typedef uint32_t monitor_blocking_domainid_t;
struct _monitor_blocking_caprep__struct {
    uint64_t w0;
    uint64_t w1;
    uint64_t w2;
    uint64_t w3;
};
typedef struct _monitor_blocking_caprep__struct monitor_blocking_caprep_t;

/*
 * Forward declaration of binding type
 */
struct monitor_blocking_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void monitor_blocking_bind_continuation_fn(void *st, errval_t err, struct monitor_blocking_binding *_binding);
typedef  bool monitor_blocking_can_send_fn(struct monitor_blocking_binding *_binding);
typedef  errval_t monitor_blocking_register_send_fn(struct monitor_blocking_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t monitor_blocking_change_waitset_fn(struct monitor_blocking_binding *_binding, struct waitset *ws);
typedef  errval_t monitor_blocking_control_fn(struct monitor_blocking_binding *_binding, idc_control_t control);
typedef  void monitor_blocking_error_handler_fn(struct monitor_blocking_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum monitor_blocking_msg_enum {
    monitor_blocking___dummy__msgnum = 0,
    monitor_blocking___bind__msgnum = 1,
    monitor_blocking___bind_reply__msgnum = 2,
    monitor_blocking_get_bootinfo_call__msgnum = 3,
    monitor_blocking_get_bootinfo_response__msgnum = 4,
    monitor_blocking_remote_cap_retype_call__msgnum = 5,
    monitor_blocking_remote_cap_retype_response__msgnum = 6,
    monitor_blocking_remote_cap_delete_call__msgnum = 7,
    monitor_blocking_remote_cap_delete_response__msgnum = 8,
    monitor_blocking_remote_cap_revoke_call__msgnum = 9,
    monitor_blocking_remote_cap_revoke_response__msgnum = 10,
    monitor_blocking_get_phyaddr_cap_call__msgnum = 11,
    monitor_blocking_get_phyaddr_cap_response__msgnum = 12,
    monitor_blocking_get_io_cap_call__msgnum = 13,
    monitor_blocking_get_io_cap_response__msgnum = 14,
    monitor_blocking_rsrc_manifest_call__msgnum = 15,
    monitor_blocking_rsrc_manifest_response__msgnum = 16,
    monitor_blocking_rsrc_join_call__msgnum = 17,
    monitor_blocking_rsrc_join_response__msgnum = 18,
    monitor_blocking_rsrc_phase_call__msgnum = 19,
    monitor_blocking_rsrc_phase_response__msgnum = 20,
    monitor_blocking_alloc_monitor_ep_call__msgnum = 21,
    monitor_blocking_alloc_monitor_ep_response__msgnum = 22,
    monitor_blocking_cap_identify_call__msgnum = 23,
    monitor_blocking_cap_identify_response__msgnum = 24,
    monitor_blocking_cap_set_remote_call__msgnum = 25,
    monitor_blocking_cap_set_remote_response__msgnum = 26,
    monitor_blocking_irq_handle_call__msgnum = 27,
    monitor_blocking_irq_handle_response__msgnum = 28,
    monitor_blocking_arm_irq_handle_call__msgnum = 29,
    monitor_blocking_arm_irq_handle_response__msgnum = 30,
    monitor_blocking_get_arch_core_id_call__msgnum = 31,
    monitor_blocking_get_arch_core_id_response__msgnum = 32,
    monitor_blocking_get_ipi_cap_call__msgnum = 33,
    monitor_blocking_get_ipi_cap_response__msgnum = 34,
    monitor_blocking_forward_kcb_request_call__msgnum = 35,
    monitor_blocking_forward_kcb_request_response__msgnum = 36,
    monitor_blocking_forward_kcb_rm_request_call__msgnum = 37,
    monitor_blocking_forward_kcb_rm_request_response__msgnum = 38,
    monitor_blocking_get_global_paddr_call__msgnum = 39,
    monitor_blocking_get_global_paddr_response__msgnum = 40
} monitor_blocking_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t monitor_blocking_get_bootinfo_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation);
typedef  errval_t monitor_blocking_get_bootinfo_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err, struct capref frame, size_t frame_size);
typedef  errval_t monitor_blocking_remote_cap_retype_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref croot, uint32_t src, uint64_t objtype, uint8_t size_bits, uint32_t to, uint32_t slot, int32_t dcn_vbits);
typedef  errval_t monitor_blocking_remote_cap_retype_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err);
typedef  errval_t monitor_blocking_remote_cap_delete_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref croot, uint32_t src, uint8_t vbits);
typedef  errval_t monitor_blocking_remote_cap_delete_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err);
typedef  errval_t monitor_blocking_remote_cap_revoke_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref croot, uint32_t src, uint8_t vbits);
typedef  errval_t monitor_blocking_remote_cap_revoke_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err);
typedef  errval_t monitor_blocking_get_phyaddr_cap_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation);
typedef  errval_t monitor_blocking_get_phyaddr_cap_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref pyaddr, monitor_blocking_errval_t err);
typedef  errval_t monitor_blocking_get_io_cap_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation);
typedef  errval_t monitor_blocking_get_io_cap_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref io, monitor_blocking_errval_t err);
typedef  errval_t monitor_blocking_rsrc_manifest_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref dispatcher, const char *manifest);
typedef  errval_t monitor_blocking_rsrc_manifest_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_rsrcid_t id, monitor_blocking_errval_t err);
typedef  errval_t monitor_blocking_rsrc_join_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_rsrcid_t id, struct capref dispatcher);
typedef  errval_t monitor_blocking_rsrc_join_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err);
typedef  errval_t monitor_blocking_rsrc_phase_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_rsrcid_t id, uint32_t phase);
typedef  errval_t monitor_blocking_rsrc_phase_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation);
typedef  errval_t monitor_blocking_alloc_monitor_ep_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation);
typedef  errval_t monitor_blocking_alloc_monitor_ep_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err, struct capref ep);
typedef  errval_t monitor_blocking_cap_identify_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref cap);
typedef  errval_t monitor_blocking_cap_identify_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err, monitor_blocking_caprep_t caprep);
typedef  errval_t monitor_blocking_cap_set_remote_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref cap, bool remote);
typedef  errval_t monitor_blocking_cap_set_remote_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err);
typedef  errval_t monitor_blocking_irq_handle_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref ep);
typedef  errval_t monitor_blocking_irq_handle_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err, uint32_t vector);
typedef  errval_t monitor_blocking_arm_irq_handle_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref ep, uint32_t irq);
typedef  errval_t monitor_blocking_arm_irq_handle_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err);
typedef  errval_t monitor_blocking_get_arch_core_id_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation);
typedef  errval_t monitor_blocking_get_arch_core_id_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, uintptr_t id);
typedef  errval_t monitor_blocking_get_ipi_cap_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation);
typedef  errval_t monitor_blocking_get_ipi_cap_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref cap);
typedef  errval_t monitor_blocking_forward_kcb_request_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_coreid_t destination, struct capref kcb);
typedef  errval_t monitor_blocking_forward_kcb_request_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err);
typedef  errval_t monitor_blocking_forward_kcb_rm_request_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_coreid_t destination, struct capref kcb);
typedef  errval_t monitor_blocking_forward_kcb_rm_request_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err);
typedef  errval_t monitor_blocking_get_global_paddr_call__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation);
typedef  errval_t monitor_blocking_get_global_paddr_response__tx_method_fn(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_genpaddr_t global);

/*
 * Message type signatures (receive)
 */
typedef  void monitor_blocking_get_bootinfo_call__rx_method_fn(struct monitor_blocking_binding *_binding);
typedef  void monitor_blocking_get_bootinfo_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_errval_t err, struct capref frame, size_t frame_size);
typedef  void monitor_blocking_remote_cap_retype_call__rx_method_fn(struct monitor_blocking_binding *_binding, struct capref croot, uint32_t src, uint64_t objtype, uint8_t size_bits, uint32_t to, uint32_t slot, int32_t dcn_vbits);
typedef  void monitor_blocking_remote_cap_retype_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_errval_t err);
typedef  void monitor_blocking_remote_cap_delete_call__rx_method_fn(struct monitor_blocking_binding *_binding, struct capref croot, uint32_t src, uint8_t vbits);
typedef  void monitor_blocking_remote_cap_delete_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_errval_t err);
typedef  void monitor_blocking_remote_cap_revoke_call__rx_method_fn(struct monitor_blocking_binding *_binding, struct capref croot, uint32_t src, uint8_t vbits);
typedef  void monitor_blocking_remote_cap_revoke_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_errval_t err);
typedef  void monitor_blocking_get_phyaddr_cap_call__rx_method_fn(struct monitor_blocking_binding *_binding);
typedef  void monitor_blocking_get_phyaddr_cap_response__rx_method_fn(struct monitor_blocking_binding *_binding, struct capref pyaddr, monitor_blocking_errval_t err);
typedef  void monitor_blocking_get_io_cap_call__rx_method_fn(struct monitor_blocking_binding *_binding);
typedef  void monitor_blocking_get_io_cap_response__rx_method_fn(struct monitor_blocking_binding *_binding, struct capref io, monitor_blocking_errval_t err);
typedef  void monitor_blocking_rsrc_manifest_call__rx_method_fn(struct monitor_blocking_binding *_binding, struct capref dispatcher, char *manifest);
typedef  void monitor_blocking_rsrc_manifest_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_rsrcid_t id, monitor_blocking_errval_t err);
typedef  void monitor_blocking_rsrc_join_call__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_rsrcid_t id, struct capref dispatcher);
typedef  void monitor_blocking_rsrc_join_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_errval_t err);
typedef  void monitor_blocking_rsrc_phase_call__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_rsrcid_t id, uint32_t phase);
typedef  void monitor_blocking_rsrc_phase_response__rx_method_fn(struct monitor_blocking_binding *_binding);
typedef  void monitor_blocking_alloc_monitor_ep_call__rx_method_fn(struct monitor_blocking_binding *_binding);
typedef  void monitor_blocking_alloc_monitor_ep_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_errval_t err, struct capref ep);
typedef  void monitor_blocking_cap_identify_call__rx_method_fn(struct monitor_blocking_binding *_binding, struct capref cap);
typedef  void monitor_blocking_cap_identify_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_errval_t err, monitor_blocking_caprep_t caprep);
typedef  void monitor_blocking_cap_set_remote_call__rx_method_fn(struct monitor_blocking_binding *_binding, struct capref cap, bool remote);
typedef  void monitor_blocking_cap_set_remote_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_errval_t err);
typedef  void monitor_blocking_irq_handle_call__rx_method_fn(struct monitor_blocking_binding *_binding, struct capref ep);
typedef  void monitor_blocking_irq_handle_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_errval_t err, uint32_t vector);
typedef  void monitor_blocking_arm_irq_handle_call__rx_method_fn(struct monitor_blocking_binding *_binding, struct capref ep, uint32_t irq);
typedef  void monitor_blocking_arm_irq_handle_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_errval_t err);
typedef  void monitor_blocking_get_arch_core_id_call__rx_method_fn(struct monitor_blocking_binding *_binding);
typedef  void monitor_blocking_get_arch_core_id_response__rx_method_fn(struct monitor_blocking_binding *_binding, uintptr_t id);
typedef  void monitor_blocking_get_ipi_cap_call__rx_method_fn(struct monitor_blocking_binding *_binding);
typedef  void monitor_blocking_get_ipi_cap_response__rx_method_fn(struct monitor_blocking_binding *_binding, struct capref cap);
typedef  void monitor_blocking_forward_kcb_request_call__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_coreid_t destination, struct capref kcb);
typedef  void monitor_blocking_forward_kcb_request_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_errval_t err);
typedef  void monitor_blocking_forward_kcb_rm_request_call__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_coreid_t destination, struct capref kcb);
typedef  void monitor_blocking_forward_kcb_rm_request_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_errval_t err);
typedef  void monitor_blocking_get_global_paddr_call__rx_method_fn(struct monitor_blocking_binding *_binding);
typedef  void monitor_blocking_get_global_paddr_response__rx_method_fn(struct monitor_blocking_binding *_binding, monitor_blocking_genpaddr_t global);

/*
 * Struct type for holding the args for each msg
 */
struct monitor_blocking_get_bootinfo_response__args {
    monitor_blocking_errval_t err;
    struct capref frame;
    size_t frame_size;
};
struct monitor_blocking_remote_cap_retype_call__args {
    struct capref croot;
    uint32_t src;
    uint64_t objtype;
    uint8_t size_bits;
    uint32_t to;
    uint32_t slot;
    int32_t dcn_vbits;
};
struct monitor_blocking_remote_cap_retype_response__args {
    monitor_blocking_errval_t err;
};
struct monitor_blocking_remote_cap_delete_call__args {
    struct capref croot;
    uint32_t src;
    uint8_t vbits;
};
struct monitor_blocking_remote_cap_delete_response__args {
    monitor_blocking_errval_t err;
};
struct monitor_blocking_remote_cap_revoke_call__args {
    struct capref croot;
    uint32_t src;
    uint8_t vbits;
};
struct monitor_blocking_remote_cap_revoke_response__args {
    monitor_blocking_errval_t err;
};
struct monitor_blocking_get_phyaddr_cap_response__args {
    struct capref pyaddr;
    monitor_blocking_errval_t err;
};
struct monitor_blocking_get_io_cap_response__args {
    struct capref io;
    monitor_blocking_errval_t err;
};
struct monitor_blocking_rsrc_manifest_call__args {
    struct capref dispatcher;
    char *manifest;
};
struct monitor_blocking_rsrc_manifest_response__args {
    monitor_blocking_rsrcid_t id;
    monitor_blocking_errval_t err;
};
struct monitor_blocking_rsrc_join_call__args {
    monitor_blocking_rsrcid_t id;
    struct capref dispatcher;
};
struct monitor_blocking_rsrc_join_response__args {
    monitor_blocking_errval_t err;
};
struct monitor_blocking_rsrc_phase_call__args {
    monitor_blocking_rsrcid_t id;
    uint32_t phase;
};
struct monitor_blocking_alloc_monitor_ep_response__args {
    monitor_blocking_errval_t err;
    struct capref ep;
};
struct monitor_blocking_cap_identify_call__args {
    struct capref cap;
};
struct monitor_blocking_cap_identify_response__args {
    monitor_blocking_errval_t err;
    monitor_blocking_caprep_t caprep;
};
struct monitor_blocking_cap_set_remote_call__args {
    struct capref cap;
    bool remote;
};
struct monitor_blocking_cap_set_remote_response__args {
    monitor_blocking_errval_t err;
};
struct monitor_blocking_irq_handle_call__args {
    struct capref ep;
};
struct monitor_blocking_irq_handle_response__args {
    monitor_blocking_errval_t err;
    uint32_t vector;
};
struct monitor_blocking_arm_irq_handle_call__args {
    struct capref ep;
    uint32_t irq;
};
struct monitor_blocking_arm_irq_handle_response__args {
    monitor_blocking_errval_t err;
};
struct monitor_blocking_get_arch_core_id_response__args {
    uintptr_t id;
};
struct monitor_blocking_get_ipi_cap_response__args {
    struct capref cap;
};
struct monitor_blocking_forward_kcb_request_call__args {
    monitor_blocking_coreid_t destination;
    struct capref kcb;
};
struct monitor_blocking_forward_kcb_request_response__args {
    monitor_blocking_errval_t err;
};
struct monitor_blocking_forward_kcb_rm_request_call__args {
    monitor_blocking_coreid_t destination;
    struct capref kcb;
};
struct monitor_blocking_forward_kcb_rm_request_response__args {
    monitor_blocking_errval_t err;
};
struct monitor_blocking_get_global_paddr_response__args {
    monitor_blocking_genpaddr_t global;
};

/*
 * Union type for all message arguments
 */
union monitor_blocking_arg_union {
    struct monitor_blocking_get_bootinfo_response__args get_bootinfo_response;
    struct monitor_blocking_remote_cap_retype_call__args remote_cap_retype_call;
    struct monitor_blocking_remote_cap_retype_response__args remote_cap_retype_response;
    struct monitor_blocking_remote_cap_delete_call__args remote_cap_delete_call;
    struct monitor_blocking_remote_cap_delete_response__args remote_cap_delete_response;
    struct monitor_blocking_remote_cap_revoke_call__args remote_cap_revoke_call;
    struct monitor_blocking_remote_cap_revoke_response__args remote_cap_revoke_response;
    struct monitor_blocking_get_phyaddr_cap_response__args get_phyaddr_cap_response;
    struct monitor_blocking_get_io_cap_response__args get_io_cap_response;
    struct monitor_blocking_rsrc_manifest_call__args rsrc_manifest_call;
    struct monitor_blocking_rsrc_manifest_response__args rsrc_manifest_response;
    struct monitor_blocking_rsrc_join_call__args rsrc_join_call;
    struct monitor_blocking_rsrc_join_response__args rsrc_join_response;
    struct monitor_blocking_rsrc_phase_call__args rsrc_phase_call;
    struct monitor_blocking_alloc_monitor_ep_response__args alloc_monitor_ep_response;
    struct monitor_blocking_cap_identify_call__args cap_identify_call;
    struct monitor_blocking_cap_identify_response__args cap_identify_response;
    struct monitor_blocking_cap_set_remote_call__args cap_set_remote_call;
    struct monitor_blocking_cap_set_remote_response__args cap_set_remote_response;
    struct monitor_blocking_irq_handle_call__args irq_handle_call;
    struct monitor_blocking_irq_handle_response__args irq_handle_response;
    struct monitor_blocking_arm_irq_handle_call__args arm_irq_handle_call;
    struct monitor_blocking_arm_irq_handle_response__args arm_irq_handle_response;
    struct monitor_blocking_get_arch_core_id_response__args get_arch_core_id_response;
    struct monitor_blocking_get_ipi_cap_response__args get_ipi_cap_response;
    struct monitor_blocking_forward_kcb_request_call__args forward_kcb_request_call;
    struct monitor_blocking_forward_kcb_request_response__args forward_kcb_request_response;
    struct monitor_blocking_forward_kcb_rm_request_call__args forward_kcb_rm_request_call;
    struct monitor_blocking_forward_kcb_rm_request_response__args forward_kcb_rm_request_response;
    struct monitor_blocking_get_global_paddr_response__args get_global_paddr_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct monitor_blocking_tx_vtbl {
    monitor_blocking_get_bootinfo_call__tx_method_fn *get_bootinfo_call;
    monitor_blocking_get_bootinfo_response__tx_method_fn *get_bootinfo_response;
    monitor_blocking_remote_cap_retype_call__tx_method_fn *remote_cap_retype_call;
    monitor_blocking_remote_cap_retype_response__tx_method_fn *remote_cap_retype_response;
    monitor_blocking_remote_cap_delete_call__tx_method_fn *remote_cap_delete_call;
    monitor_blocking_remote_cap_delete_response__tx_method_fn *remote_cap_delete_response;
    monitor_blocking_remote_cap_revoke_call__tx_method_fn *remote_cap_revoke_call;
    monitor_blocking_remote_cap_revoke_response__tx_method_fn *remote_cap_revoke_response;
    monitor_blocking_get_phyaddr_cap_call__tx_method_fn *get_phyaddr_cap_call;
    monitor_blocking_get_phyaddr_cap_response__tx_method_fn *get_phyaddr_cap_response;
    monitor_blocking_get_io_cap_call__tx_method_fn *get_io_cap_call;
    monitor_blocking_get_io_cap_response__tx_method_fn *get_io_cap_response;
    monitor_blocking_rsrc_manifest_call__tx_method_fn *rsrc_manifest_call;
    monitor_blocking_rsrc_manifest_response__tx_method_fn *rsrc_manifest_response;
    monitor_blocking_rsrc_join_call__tx_method_fn *rsrc_join_call;
    monitor_blocking_rsrc_join_response__tx_method_fn *rsrc_join_response;
    monitor_blocking_rsrc_phase_call__tx_method_fn *rsrc_phase_call;
    monitor_blocking_rsrc_phase_response__tx_method_fn *rsrc_phase_response;
    monitor_blocking_alloc_monitor_ep_call__tx_method_fn *alloc_monitor_ep_call;
    monitor_blocking_alloc_monitor_ep_response__tx_method_fn *alloc_monitor_ep_response;
    monitor_blocking_cap_identify_call__tx_method_fn *cap_identify_call;
    monitor_blocking_cap_identify_response__tx_method_fn *cap_identify_response;
    monitor_blocking_cap_set_remote_call__tx_method_fn *cap_set_remote_call;
    monitor_blocking_cap_set_remote_response__tx_method_fn *cap_set_remote_response;
    monitor_blocking_irq_handle_call__tx_method_fn *irq_handle_call;
    monitor_blocking_irq_handle_response__tx_method_fn *irq_handle_response;
    monitor_blocking_arm_irq_handle_call__tx_method_fn *arm_irq_handle_call;
    monitor_blocking_arm_irq_handle_response__tx_method_fn *arm_irq_handle_response;
    monitor_blocking_get_arch_core_id_call__tx_method_fn *get_arch_core_id_call;
    monitor_blocking_get_arch_core_id_response__tx_method_fn *get_arch_core_id_response;
    monitor_blocking_get_ipi_cap_call__tx_method_fn *get_ipi_cap_call;
    monitor_blocking_get_ipi_cap_response__tx_method_fn *get_ipi_cap_response;
    monitor_blocking_forward_kcb_request_call__tx_method_fn *forward_kcb_request_call;
    monitor_blocking_forward_kcb_request_response__tx_method_fn *forward_kcb_request_response;
    monitor_blocking_forward_kcb_rm_request_call__tx_method_fn *forward_kcb_rm_request_call;
    monitor_blocking_forward_kcb_rm_request_response__tx_method_fn *forward_kcb_rm_request_response;
    monitor_blocking_get_global_paddr_call__tx_method_fn *get_global_paddr_call;
    monitor_blocking_get_global_paddr_response__tx_method_fn *get_global_paddr_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct monitor_blocking_rx_vtbl {
    monitor_blocking_get_bootinfo_call__rx_method_fn *get_bootinfo_call;
    monitor_blocking_get_bootinfo_response__rx_method_fn *get_bootinfo_response;
    monitor_blocking_remote_cap_retype_call__rx_method_fn *remote_cap_retype_call;
    monitor_blocking_remote_cap_retype_response__rx_method_fn *remote_cap_retype_response;
    monitor_blocking_remote_cap_delete_call__rx_method_fn *remote_cap_delete_call;
    monitor_blocking_remote_cap_delete_response__rx_method_fn *remote_cap_delete_response;
    monitor_blocking_remote_cap_revoke_call__rx_method_fn *remote_cap_revoke_call;
    monitor_blocking_remote_cap_revoke_response__rx_method_fn *remote_cap_revoke_response;
    monitor_blocking_get_phyaddr_cap_call__rx_method_fn *get_phyaddr_cap_call;
    monitor_blocking_get_phyaddr_cap_response__rx_method_fn *get_phyaddr_cap_response;
    monitor_blocking_get_io_cap_call__rx_method_fn *get_io_cap_call;
    monitor_blocking_get_io_cap_response__rx_method_fn *get_io_cap_response;
    monitor_blocking_rsrc_manifest_call__rx_method_fn *rsrc_manifest_call;
    monitor_blocking_rsrc_manifest_response__rx_method_fn *rsrc_manifest_response;
    monitor_blocking_rsrc_join_call__rx_method_fn *rsrc_join_call;
    monitor_blocking_rsrc_join_response__rx_method_fn *rsrc_join_response;
    monitor_blocking_rsrc_phase_call__rx_method_fn *rsrc_phase_call;
    monitor_blocking_rsrc_phase_response__rx_method_fn *rsrc_phase_response;
    monitor_blocking_alloc_monitor_ep_call__rx_method_fn *alloc_monitor_ep_call;
    monitor_blocking_alloc_monitor_ep_response__rx_method_fn *alloc_monitor_ep_response;
    monitor_blocking_cap_identify_call__rx_method_fn *cap_identify_call;
    monitor_blocking_cap_identify_response__rx_method_fn *cap_identify_response;
    monitor_blocking_cap_set_remote_call__rx_method_fn *cap_set_remote_call;
    monitor_blocking_cap_set_remote_response__rx_method_fn *cap_set_remote_response;
    monitor_blocking_irq_handle_call__rx_method_fn *irq_handle_call;
    monitor_blocking_irq_handle_response__rx_method_fn *irq_handle_response;
    monitor_blocking_arm_irq_handle_call__rx_method_fn *arm_irq_handle_call;
    monitor_blocking_arm_irq_handle_response__rx_method_fn *arm_irq_handle_response;
    monitor_blocking_get_arch_core_id_call__rx_method_fn *get_arch_core_id_call;
    monitor_blocking_get_arch_core_id_response__rx_method_fn *get_arch_core_id_response;
    monitor_blocking_get_ipi_cap_call__rx_method_fn *get_ipi_cap_call;
    monitor_blocking_get_ipi_cap_response__rx_method_fn *get_ipi_cap_response;
    monitor_blocking_forward_kcb_request_call__rx_method_fn *forward_kcb_request_call;
    monitor_blocking_forward_kcb_request_response__rx_method_fn *forward_kcb_request_response;
    monitor_blocking_forward_kcb_rm_request_call__rx_method_fn *forward_kcb_rm_request_call;
    monitor_blocking_forward_kcb_rm_request_response__rx_method_fn *forward_kcb_rm_request_response;
    monitor_blocking_get_global_paddr_call__rx_method_fn *get_global_paddr_call;
    monitor_blocking_get_global_paddr_response__rx_method_fn *get_global_paddr_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t monitor_blocking_connect_fn(void *st, struct monitor_blocking_binding *binding);

/*
 * Export state struct
 */
struct monitor_blocking_export {
    struct idc_export common;
    monitor_blocking_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t monitor_blocking_export(void *st, idc_export_callback_fn *export_cb, monitor_blocking_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct monitor_blocking_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t monitor_blocking_accept(struct monitor_blocking_frameinfo *_frameinfo, void *st, monitor_blocking_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct monitor_blocking_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    monitor_blocking_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    monitor_blocking_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    monitor_blocking_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    monitor_blocking_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    monitor_blocking_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct monitor_blocking_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct monitor_blocking_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union monitor_blocking_arg_union tx_union;
    union monitor_blocking_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum monitor_blocking_msg_enum tx_msgnum;
    enum monitor_blocking_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    monitor_blocking_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t monitor_blocking_bind(iref_t i, monitor_blocking_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t monitor_blocking_connect(struct monitor_blocking_frameinfo *_frameinfo, monitor_blocking_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t monitor_blocking_get_bootinfo_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_get_bootinfo_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_bootinfo_call)(_binding, _continuation));
}

static inline errval_t monitor_blocking_get_bootinfo_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err, struct capref frame, size_t frame_size) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_get_bootinfo_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err, struct capref frame, size_t frame_size)
{
    return(((_binding->tx_vtbl).get_bootinfo_response)(_binding, _continuation, err, frame, frame_size));
}

static inline errval_t monitor_blocking_remote_cap_retype_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref croot, uint32_t src, uint64_t objtype, uint8_t size_bits, uint32_t to, uint32_t slot, int32_t dcn_vbits) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_remote_cap_retype_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref croot, uint32_t src, uint64_t objtype, uint8_t size_bits, uint32_t to, uint32_t slot, int32_t dcn_vbits)
{
    return(((_binding->tx_vtbl).remote_cap_retype_call)(_binding, _continuation, croot, src, objtype, size_bits, to, slot, dcn_vbits));
}

static inline errval_t monitor_blocking_remote_cap_retype_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_remote_cap_retype_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err)
{
    return(((_binding->tx_vtbl).remote_cap_retype_response)(_binding, _continuation, err));
}

static inline errval_t monitor_blocking_remote_cap_delete_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref croot, uint32_t src, uint8_t vbits) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_remote_cap_delete_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref croot, uint32_t src, uint8_t vbits)
{
    return(((_binding->tx_vtbl).remote_cap_delete_call)(_binding, _continuation, croot, src, vbits));
}

static inline errval_t monitor_blocking_remote_cap_delete_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_remote_cap_delete_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err)
{
    return(((_binding->tx_vtbl).remote_cap_delete_response)(_binding, _continuation, err));
}

static inline errval_t monitor_blocking_remote_cap_revoke_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref croot, uint32_t src, uint8_t vbits) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_remote_cap_revoke_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref croot, uint32_t src, uint8_t vbits)
{
    return(((_binding->tx_vtbl).remote_cap_revoke_call)(_binding, _continuation, croot, src, vbits));
}

static inline errval_t monitor_blocking_remote_cap_revoke_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_remote_cap_revoke_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err)
{
    return(((_binding->tx_vtbl).remote_cap_revoke_response)(_binding, _continuation, err));
}

static inline errval_t monitor_blocking_get_phyaddr_cap_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_get_phyaddr_cap_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_phyaddr_cap_call)(_binding, _continuation));
}

static inline errval_t monitor_blocking_get_phyaddr_cap_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref pyaddr, monitor_blocking_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_get_phyaddr_cap_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref pyaddr, monitor_blocking_errval_t err)
{
    return(((_binding->tx_vtbl).get_phyaddr_cap_response)(_binding, _continuation, pyaddr, err));
}

static inline errval_t monitor_blocking_get_io_cap_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_get_io_cap_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_io_cap_call)(_binding, _continuation));
}

static inline errval_t monitor_blocking_get_io_cap_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref io, monitor_blocking_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_get_io_cap_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref io, monitor_blocking_errval_t err)
{
    return(((_binding->tx_vtbl).get_io_cap_response)(_binding, _continuation, io, err));
}

static inline errval_t monitor_blocking_rsrc_manifest_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref dispatcher, const char *manifest) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_rsrc_manifest_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref dispatcher, const char *manifest)
{
    return(((_binding->tx_vtbl).rsrc_manifest_call)(_binding, _continuation, dispatcher, manifest));
}

static inline errval_t monitor_blocking_rsrc_manifest_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_rsrcid_t id, monitor_blocking_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_rsrc_manifest_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_rsrcid_t id, monitor_blocking_errval_t err)
{
    return(((_binding->tx_vtbl).rsrc_manifest_response)(_binding, _continuation, id, err));
}

static inline errval_t monitor_blocking_rsrc_join_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_rsrcid_t id, struct capref dispatcher) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_rsrc_join_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_rsrcid_t id, struct capref dispatcher)
{
    return(((_binding->tx_vtbl).rsrc_join_call)(_binding, _continuation, id, dispatcher));
}

static inline errval_t monitor_blocking_rsrc_join_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_rsrc_join_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err)
{
    return(((_binding->tx_vtbl).rsrc_join_response)(_binding, _continuation, err));
}

static inline errval_t monitor_blocking_rsrc_phase_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_rsrcid_t id, uint32_t phase) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_rsrc_phase_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_rsrcid_t id, uint32_t phase)
{
    return(((_binding->tx_vtbl).rsrc_phase_call)(_binding, _continuation, id, phase));
}

static inline errval_t monitor_blocking_rsrc_phase_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_rsrc_phase_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).rsrc_phase_response)(_binding, _continuation));
}

static inline errval_t monitor_blocking_alloc_monitor_ep_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_alloc_monitor_ep_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).alloc_monitor_ep_call)(_binding, _continuation));
}

static inline errval_t monitor_blocking_alloc_monitor_ep_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err, struct capref ep) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_alloc_monitor_ep_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err, struct capref ep)
{
    return(((_binding->tx_vtbl).alloc_monitor_ep_response)(_binding, _continuation, err, ep));
}

static inline errval_t monitor_blocking_cap_identify_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref cap) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_cap_identify_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref cap)
{
    return(((_binding->tx_vtbl).cap_identify_call)(_binding, _continuation, cap));
}

static inline errval_t monitor_blocking_cap_identify_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err, monitor_blocking_caprep_t caprep) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_cap_identify_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err, monitor_blocking_caprep_t caprep)
{
    return(((_binding->tx_vtbl).cap_identify_response)(_binding, _continuation, err, caprep));
}

static inline errval_t monitor_blocking_cap_set_remote_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref cap, bool remote) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_cap_set_remote_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref cap, bool remote)
{
    return(((_binding->tx_vtbl).cap_set_remote_call)(_binding, _continuation, cap, remote));
}

static inline errval_t monitor_blocking_cap_set_remote_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_cap_set_remote_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err)
{
    return(((_binding->tx_vtbl).cap_set_remote_response)(_binding, _continuation, err));
}

static inline errval_t monitor_blocking_irq_handle_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref ep) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_irq_handle_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref ep)
{
    return(((_binding->tx_vtbl).irq_handle_call)(_binding, _continuation, ep));
}

static inline errval_t monitor_blocking_irq_handle_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err, uint32_t vector) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_irq_handle_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err, uint32_t vector)
{
    return(((_binding->tx_vtbl).irq_handle_response)(_binding, _continuation, err, vector));
}

static inline errval_t monitor_blocking_arm_irq_handle_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref ep, uint32_t irq) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_arm_irq_handle_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref ep, uint32_t irq)
{
    return(((_binding->tx_vtbl).arm_irq_handle_call)(_binding, _continuation, ep, irq));
}

static inline errval_t monitor_blocking_arm_irq_handle_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_arm_irq_handle_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err)
{
    return(((_binding->tx_vtbl).arm_irq_handle_response)(_binding, _continuation, err));
}

static inline errval_t monitor_blocking_get_arch_core_id_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_get_arch_core_id_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_arch_core_id_call)(_binding, _continuation));
}

static inline errval_t monitor_blocking_get_arch_core_id_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, uintptr_t id) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_get_arch_core_id_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, uintptr_t id)
{
    return(((_binding->tx_vtbl).get_arch_core_id_response)(_binding, _continuation, id));
}

static inline errval_t monitor_blocking_get_ipi_cap_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_get_ipi_cap_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_ipi_cap_call)(_binding, _continuation));
}

static inline errval_t monitor_blocking_get_ipi_cap_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref cap) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_get_ipi_cap_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, struct capref cap)
{
    return(((_binding->tx_vtbl).get_ipi_cap_response)(_binding, _continuation, cap));
}

static inline errval_t monitor_blocking_forward_kcb_request_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_coreid_t destination, struct capref kcb) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_forward_kcb_request_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_coreid_t destination, struct capref kcb)
{
    return(((_binding->tx_vtbl).forward_kcb_request_call)(_binding, _continuation, destination, kcb));
}

static inline errval_t monitor_blocking_forward_kcb_request_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_forward_kcb_request_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err)
{
    return(((_binding->tx_vtbl).forward_kcb_request_response)(_binding, _continuation, err));
}

static inline errval_t monitor_blocking_forward_kcb_rm_request_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_coreid_t destination, struct capref kcb) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_forward_kcb_rm_request_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_coreid_t destination, struct capref kcb)
{
    return(((_binding->tx_vtbl).forward_kcb_rm_request_call)(_binding, _continuation, destination, kcb));
}

static inline errval_t monitor_blocking_forward_kcb_rm_request_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_forward_kcb_rm_request_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_errval_t err)
{
    return(((_binding->tx_vtbl).forward_kcb_rm_request_response)(_binding, _continuation, err));
}

static inline errval_t monitor_blocking_get_global_paddr_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_get_global_paddr_call__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_global_paddr_call)(_binding, _continuation));
}

static inline errval_t monitor_blocking_get_global_paddr_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_genpaddr_t global) __attribute__ ((always_inline));
static inline errval_t monitor_blocking_get_global_paddr_response__tx(struct monitor_blocking_binding *_binding, struct event_closure _continuation, monitor_blocking_genpaddr_t global)
{
    return(((_binding->tx_vtbl).get_global_paddr_response)(_binding, _continuation, global));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/monitor_blocking_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/monitor_blocking_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/monitor_blocking_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/monitor_blocking_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __monitor_blocking_IF_H
