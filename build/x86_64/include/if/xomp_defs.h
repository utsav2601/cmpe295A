#ifndef __xomp_IF_H
#define __xomp_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: xomp
 * INTEFACE FILE: ../if/xomp.if
 * INTERFACE DESCRIPTION: Xeon Phi openMP interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t xomp_genpaddr_t;
typedef uint64_t xomp_genvaddr_t;
typedef uint32_t xomp_rsrcid_t;
typedef uint64_t xomp_errval_t;
typedef uint64_t xomp_cycles_t;
typedef uint32_t xomp_iref_t;
typedef uint8_t xomp_coreid_t;
typedef uint32_t xomp_domainid_t;

/*
 * Forward declaration of binding type
 */
struct xomp_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void xomp_bind_continuation_fn(void *st, errval_t err, struct xomp_binding *_binding);
typedef  bool xomp_can_send_fn(struct xomp_binding *_binding);
typedef  errval_t xomp_register_send_fn(struct xomp_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t xomp_change_waitset_fn(struct xomp_binding *_binding, struct waitset *ws);
typedef  errval_t xomp_control_fn(struct xomp_binding *_binding, idc_control_t control);
typedef  void xomp_error_handler_fn(struct xomp_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum xomp_msg_enum {
    xomp___dummy__msgnum = 0,
    xomp___bind__msgnum = 1,
    xomp___bind_reply__msgnum = 2,
    xomp_add_memory_call__msgnum = 3,
    xomp_add_memory_response__msgnum = 4,
    xomp_update_memory_call__msgnum = 5,
    xomp_update_memory_response__msgnum = 6,
    xomp_gw_req_memory_call__msgnum = 7,
    xomp_gw_req_memory_response__msgnum = 8,
    xomp_do_work__msgnum = 9,
    xomp_done_notify__msgnum = 10,
    xomp_done_with_arg__msgnum = 11
} xomp_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t xomp_add_memory_call__tx_method_fn(struct xomp_binding *_binding, struct event_closure _continuation, struct capref frame, uint64_t addr, uint8_t type);
typedef  errval_t xomp_add_memory_response__tx_method_fn(struct xomp_binding *_binding, struct event_closure _continuation, xomp_errval_t msgerr);
typedef  errval_t xomp_update_memory_call__tx_method_fn(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t addr, uint64_t offset, uint64_t length, uint8_t direction, uint64_t state);
typedef  errval_t xomp_update_memory_response__tx_method_fn(struct xomp_binding *_binding, struct event_closure _continuation, xomp_errval_t msg_err, uint64_t state);
typedef  errval_t xomp_gw_req_memory_call__tx_method_fn(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t addr, uint8_t type);
typedef  errval_t xomp_gw_req_memory_response__tx_method_fn(struct xomp_binding *_binding, struct event_closure _continuation, xomp_errval_t msgerr);
typedef  errval_t xomp_do_work__tx_method_fn(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t fn, uint64_t arg, uint64_t tid, uint64_t flags);
typedef  errval_t xomp_done_notify__tx_method_fn(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t tid, xomp_errval_t msgerr);
typedef  errval_t xomp_done_with_arg__tx_method_fn(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t tid, uint64_t arg, xomp_errval_t msgerr);

/*
 * Message type signatures (receive)
 */
typedef  void xomp_add_memory_call__rx_method_fn(struct xomp_binding *_binding, struct capref frame, uint64_t addr, uint8_t type);
typedef  void xomp_add_memory_response__rx_method_fn(struct xomp_binding *_binding, xomp_errval_t msgerr);
typedef  void xomp_update_memory_call__rx_method_fn(struct xomp_binding *_binding, uint64_t addr, uint64_t offset, uint64_t length, uint8_t direction, uint64_t state);
typedef  void xomp_update_memory_response__rx_method_fn(struct xomp_binding *_binding, xomp_errval_t msg_err, uint64_t state);
typedef  void xomp_gw_req_memory_call__rx_method_fn(struct xomp_binding *_binding, uint64_t addr, uint8_t type);
typedef  void xomp_gw_req_memory_response__rx_method_fn(struct xomp_binding *_binding, xomp_errval_t msgerr);
typedef  void xomp_do_work__rx_method_fn(struct xomp_binding *_binding, uint64_t fn, uint64_t arg, uint64_t tid, uint64_t flags);
typedef  void xomp_done_notify__rx_method_fn(struct xomp_binding *_binding, uint64_t tid, xomp_errval_t msgerr);
typedef  void xomp_done_with_arg__rx_method_fn(struct xomp_binding *_binding, uint64_t tid, uint64_t arg, xomp_errval_t msgerr);

/*
 * Struct type for holding the args for each msg
 */
struct xomp_add_memory_call__args {
    struct capref frame;
    uint64_t addr;
    uint8_t type;
};
struct xomp_add_memory_response__args {
    xomp_errval_t msgerr;
};
struct xomp_update_memory_call__args {
    uint64_t addr;
    uint64_t offset;
    uint64_t length;
    uint8_t direction;
    uint64_t state;
};
struct xomp_update_memory_response__args {
    xomp_errval_t msg_err;
    uint64_t state;
};
struct xomp_gw_req_memory_call__args {
    uint64_t addr;
    uint8_t type;
};
struct xomp_gw_req_memory_response__args {
    xomp_errval_t msgerr;
};
struct xomp_do_work__args {
    uint64_t fn;
    uint64_t arg;
    uint64_t tid;
    uint64_t flags;
};
struct xomp_done_notify__args {
    uint64_t tid;
    xomp_errval_t msgerr;
};
struct xomp_done_with_arg__args {
    uint64_t tid;
    uint64_t arg;
    xomp_errval_t msgerr;
};

/*
 * Union type for all message arguments
 */
union xomp_arg_union {
    struct xomp_add_memory_call__args add_memory_call;
    struct xomp_add_memory_response__args add_memory_response;
    struct xomp_update_memory_call__args update_memory_call;
    struct xomp_update_memory_response__args update_memory_response;
    struct xomp_gw_req_memory_call__args gw_req_memory_call;
    struct xomp_gw_req_memory_response__args gw_req_memory_response;
    struct xomp_do_work__args do_work;
    struct xomp_done_notify__args done_notify;
    struct xomp_done_with_arg__args done_with_arg;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct xomp_tx_vtbl {
    xomp_add_memory_call__tx_method_fn *add_memory_call;
    xomp_add_memory_response__tx_method_fn *add_memory_response;
    xomp_update_memory_call__tx_method_fn *update_memory_call;
    xomp_update_memory_response__tx_method_fn *update_memory_response;
    xomp_gw_req_memory_call__tx_method_fn *gw_req_memory_call;
    xomp_gw_req_memory_response__tx_method_fn *gw_req_memory_response;
    xomp_do_work__tx_method_fn *do_work;
    xomp_done_notify__tx_method_fn *done_notify;
    xomp_done_with_arg__tx_method_fn *done_with_arg;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct xomp_rx_vtbl {
    xomp_add_memory_call__rx_method_fn *add_memory_call;
    xomp_add_memory_response__rx_method_fn *add_memory_response;
    xomp_update_memory_call__rx_method_fn *update_memory_call;
    xomp_update_memory_response__rx_method_fn *update_memory_response;
    xomp_gw_req_memory_call__rx_method_fn *gw_req_memory_call;
    xomp_gw_req_memory_response__rx_method_fn *gw_req_memory_response;
    xomp_do_work__rx_method_fn *do_work;
    xomp_done_notify__rx_method_fn *done_notify;
    xomp_done_with_arg__rx_method_fn *done_with_arg;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t xomp_connect_fn(void *st, struct xomp_binding *binding);

/*
 * Export state struct
 */
struct xomp_export {
    struct idc_export common;
    xomp_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t xomp_export(void *st, idc_export_callback_fn *export_cb, xomp_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct xomp_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t xomp_accept(struct xomp_frameinfo *_frameinfo, void *st, xomp_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct xomp_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    xomp_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    xomp_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    xomp_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    xomp_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    xomp_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct xomp_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct xomp_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union xomp_arg_union tx_union;
    union xomp_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum xomp_msg_enum tx_msgnum;
    enum xomp_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    xomp_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t xomp_bind(iref_t i, xomp_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t xomp_connect(struct xomp_frameinfo *_frameinfo, xomp_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t xomp_add_memory_call__tx(struct xomp_binding *_binding, struct event_closure _continuation, struct capref frame, uint64_t addr, uint8_t type) __attribute__ ((always_inline));
static inline errval_t xomp_add_memory_call__tx(struct xomp_binding *_binding, struct event_closure _continuation, struct capref frame, uint64_t addr, uint8_t type)
{
    return(((_binding->tx_vtbl).add_memory_call)(_binding, _continuation, frame, addr, type));
}

static inline errval_t xomp_add_memory_response__tx(struct xomp_binding *_binding, struct event_closure _continuation, xomp_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xomp_add_memory_response__tx(struct xomp_binding *_binding, struct event_closure _continuation, xomp_errval_t msgerr)
{
    return(((_binding->tx_vtbl).add_memory_response)(_binding, _continuation, msgerr));
}

static inline errval_t xomp_update_memory_call__tx(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t addr, uint64_t offset, uint64_t length, uint8_t direction, uint64_t state) __attribute__ ((always_inline));
static inline errval_t xomp_update_memory_call__tx(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t addr, uint64_t offset, uint64_t length, uint8_t direction, uint64_t state)
{
    return(((_binding->tx_vtbl).update_memory_call)(_binding, _continuation, addr, offset, length, direction, state));
}

static inline errval_t xomp_update_memory_response__tx(struct xomp_binding *_binding, struct event_closure _continuation, xomp_errval_t msg_err, uint64_t state) __attribute__ ((always_inline));
static inline errval_t xomp_update_memory_response__tx(struct xomp_binding *_binding, struct event_closure _continuation, xomp_errval_t msg_err, uint64_t state)
{
    return(((_binding->tx_vtbl).update_memory_response)(_binding, _continuation, msg_err, state));
}

static inline errval_t xomp_gw_req_memory_call__tx(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t addr, uint8_t type) __attribute__ ((always_inline));
static inline errval_t xomp_gw_req_memory_call__tx(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t addr, uint8_t type)
{
    return(((_binding->tx_vtbl).gw_req_memory_call)(_binding, _continuation, addr, type));
}

static inline errval_t xomp_gw_req_memory_response__tx(struct xomp_binding *_binding, struct event_closure _continuation, xomp_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xomp_gw_req_memory_response__tx(struct xomp_binding *_binding, struct event_closure _continuation, xomp_errval_t msgerr)
{
    return(((_binding->tx_vtbl).gw_req_memory_response)(_binding, _continuation, msgerr));
}

static inline errval_t xomp_do_work__tx(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t fn, uint64_t arg, uint64_t tid, uint64_t flags) __attribute__ ((always_inline));
static inline errval_t xomp_do_work__tx(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t fn, uint64_t arg, uint64_t tid, uint64_t flags)
{
    return(((_binding->tx_vtbl).do_work)(_binding, _continuation, fn, arg, tid, flags));
}

static inline errval_t xomp_done_notify__tx(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t tid, xomp_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xomp_done_notify__tx(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t tid, xomp_errval_t msgerr)
{
    return(((_binding->tx_vtbl).done_notify)(_binding, _continuation, tid, msgerr));
}

static inline errval_t xomp_done_with_arg__tx(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t tid, uint64_t arg, xomp_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xomp_done_with_arg__tx(struct xomp_binding *_binding, struct event_closure _continuation, uint64_t tid, uint64_t arg, xomp_errval_t msgerr)
{
    return(((_binding->tx_vtbl).done_with_arg)(_binding, _continuation, tid, arg, msgerr));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/xomp_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/xomp_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/xomp_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/xomp_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __xomp_IF_H
