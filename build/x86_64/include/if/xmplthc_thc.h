#ifndef __xmplthc_THC_IF_H
#define __xmplthc_THC_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: xmplthc
 * INTEFACE FILE: ../if/xmplthc.if
 * INTERFACE DESCRIPTION: Example thc interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */
#ifdef BARRELFISH
#include "thc/thcstubs.h"
#include "if/xmplthc_defs.h"
#else
#include "thcstubs.h"
#include "xmplthc.h"
#endif // BARRELFISH

/*
 * Typedefs for binding structures
 */

typedef struct xmplthc_thc_client_binding_t xmplthc_thc_client_binding_t;
typedef struct xmplthc_thc_service_binding_t xmplthc_thc_service_binding_t;

/*
 * Struct type for holding the args for each msg
 */
struct xmplthc_mymsg__args_t {
    int32_t i;
};
struct xmplthc_mycall__args_t {
    int32_t i;
};
struct xmplthc_myresponse__args_t {
    char *s;
};
struct xmplthc_myrpc__in_args_t {
    int32_t i;
};
struct xmplthc_myrpc__out_args_t {
    char *s;
};
union xmplthc_myrpc___union_t {
    struct xmplthc_myrpc__in_args_t in;
    struct xmplthc_myrpc__out_args_t out;
};

/*
 * Union type for all message arguments
 */
union xmplthc_thc_arg_union {
    struct xmplthc_mymsg__args_t mymsg;
    struct xmplthc_mycall__args_t mycall;
    struct xmplthc_myresponse__args_t myresponse;
    union xmplthc_myrpc___union_t myrpc;
};

/*
 * Enumerations for message numbers
 */
typedef enum xmplthc_msg_enum_t {
    xmplthc_mymsg,
    xmplthc_mycall,
    xmplthc_myresponse,
    xmplthc_myrpc
} xmplthc_msg_enum_t;
typedef enum xmplthc_call_msg_enum_t {
    xmplthc__call_mymsg,
    xmplthc__call_mycall,
    xmplthc__call_myrpc
} xmplthc_call_msg_enum_t;
typedef enum xmplthc_resp_msg_enum_t {
    xmplthc__resp_mymsg,
    xmplthc__resp_myresponse,
    xmplthc__resp_myrpc
} xmplthc_resp_msg_enum_t;


/*
 * Signatures for individual send/receive operations
 */

typedef  errval_t (*xmplthc_mymsg__thc_client_send_t)(xmplthc_thc_client_binding_t *_thc_binding, int32_t i);
typedef  errval_t (*xmplthc_mycall__thc_client_send_t)(xmplthc_thc_client_binding_t *_thc_binding, int32_t i);
typedef  errval_t (*xmplthc_myrpc__thc_client_send_t)(xmplthc_thc_client_binding_t *_thc_binding, int32_t i);
typedef  errval_t (*xmplthc_mymsg__thc_client_send_t_x)(xmplthc_thc_client_binding_t *_thc_binding, int32_t i);
typedef  errval_t (*xmplthc_mycall__thc_client_send_t_x)(xmplthc_thc_client_binding_t *_thc_binding, int32_t i);
typedef  errval_t (*xmplthc_myrpc__thc_client_send_t_x)(xmplthc_thc_client_binding_t *_thc_binding, int32_t i);
typedef  errval_t (*xmplthc_mymsg__thc_service_recv_t)(xmplthc_thc_service_binding_t *_thc_binding, int32_t *i);
typedef  errval_t (*xmplthc_mycall__thc_service_recv_t)(xmplthc_thc_service_binding_t *_thc_binding, int32_t *i);
typedef  errval_t (*xmplthc_myrpc__thc_service_recv_t)(xmplthc_thc_service_binding_t *_thc_binding, int32_t *i);
typedef  errval_t (*xmplthc_mymsg__thc_service_recv_t_x)(xmplthc_thc_service_binding_t *_thc_binding, int32_t *i);
typedef  errval_t (*xmplthc_mycall__thc_service_recv_t_x)(xmplthc_thc_service_binding_t *_thc_binding, int32_t *i);
typedef  errval_t (*xmplthc_myrpc__thc_service_recv_t_x)(xmplthc_thc_service_binding_t *_thc_binding, int32_t *i);
typedef  errval_t (*xmplthc_mymsg__thc_service_send_t)(xmplthc_thc_service_binding_t *_thc_binding, int32_t i);
typedef  errval_t (*xmplthc_myresponse__thc_service_send_t)(xmplthc_thc_service_binding_t *_thc_binding, const char *s);
typedef  errval_t (*xmplthc_myrpc__thc_service_send_t)(xmplthc_thc_service_binding_t *_thc_binding, const char *s);
typedef  errval_t (*xmplthc_mymsg__thc_service_send_t_x)(xmplthc_thc_service_binding_t *_thc_binding, int32_t i);
typedef  errval_t (*xmplthc_myresponse__thc_service_send_t_x)(xmplthc_thc_service_binding_t *_thc_binding, const char *s);
typedef  errval_t (*xmplthc_myrpc__thc_service_send_t_x)(xmplthc_thc_service_binding_t *_thc_binding, const char *s);
typedef  errval_t (*xmplthc_mymsg__thc_client_recv_t)(xmplthc_thc_client_binding_t *_thc_binding, int32_t *i);
typedef  errval_t (*xmplthc_myresponse__thc_client_recv_t)(xmplthc_thc_client_binding_t *_thc_binding, char **s);
typedef  errval_t (*xmplthc_myrpc__thc_client_recv_t)(xmplthc_thc_client_binding_t *_thc_binding, char **s);
typedef  errval_t (*xmplthc_mymsg__thc_client_recv_t_x)(xmplthc_thc_client_binding_t *_thc_binding, int32_t *i);
typedef  errval_t (*xmplthc_myresponse__thc_client_recv_t_x)(xmplthc_thc_client_binding_t *_thc_binding, char **s);
typedef  errval_t (*xmplthc_myrpc__thc_client_recv_t_x)(xmplthc_thc_client_binding_t *_thc_binding, char **s);
typedef  errval_t (*xmplthc_myrpc__thc_call__t)(xmplthc_thc_client_binding_t *_thc_binding, int32_t i, char **s);
typedef  errval_t (*xmplthc_myrpc__thc_call__t_x)(xmplthc_thc_client_binding_t *_thc_binding, int32_t i, char **s);

/*
 * VTables of send/receive operations
 */

struct xmplthc_thc_client_send_vtbl {
    xmplthc_mymsg__thc_client_send_t mymsg;
    xmplthc_mycall__thc_client_send_t mycall;
    xmplthc_myrpc__thc_client_send_t myrpc;
};
struct xmplthc_thc_client_send_vtbl_x {
    xmplthc_mymsg__thc_client_send_t_x mymsg;
    xmplthc_mycall__thc_client_send_t_x mycall;
    xmplthc_myrpc__thc_client_send_t_x myrpc;
};
struct xmplthc_thc_service_receive_vtbl {
    xmplthc_mymsg__thc_service_recv_t mymsg;
    xmplthc_mycall__thc_service_recv_t mycall;
    xmplthc_myrpc__thc_service_recv_t myrpc;
};
struct xmplthc_thc_service_receive_vtbl_x {
    xmplthc_mymsg__thc_service_recv_t_x mymsg;
    xmplthc_mycall__thc_service_recv_t_x mycall;
    xmplthc_myrpc__thc_service_recv_t_x myrpc;
};
struct xmplthc_service_selector {
    int mymsg;
    int mycall;
    int myrpc;
};
struct xmplthc_thc_service_send_vtbl {
    xmplthc_mymsg__thc_service_send_t mymsg;
    xmplthc_myresponse__thc_service_send_t myresponse;
    xmplthc_myrpc__thc_service_send_t myrpc;
};
struct xmplthc_thc_service_send_vtbl_x {
    xmplthc_mymsg__thc_service_send_t_x mymsg;
    xmplthc_myresponse__thc_service_send_t_x myresponse;
    xmplthc_myrpc__thc_service_send_t_x myrpc;
};
struct xmplthc_thc_client_receive_vtbl {
    xmplthc_mymsg__thc_client_recv_t mymsg;
    xmplthc_myresponse__thc_client_recv_t myresponse;
    xmplthc_myrpc__thc_client_recv_t myrpc;
};
struct xmplthc_thc_client_receive_vtbl_x {
    xmplthc_mymsg__thc_client_recv_t_x mymsg;
    xmplthc_myresponse__thc_client_recv_t_x myresponse;
    xmplthc_myrpc__thc_client_recv_t_x myrpc;
};
struct xmplthc_client_selector {
    int mymsg;
    int myresponse;
    int myrpc;
};

/*
 * VTables of RPC operations
 */

struct xmplthc_thc_rpc_seq {
    xmplthc_myrpc__thc_call__t myrpc;
};
struct xmplthc_thc_rpc_seq_x {
    xmplthc_myrpc__thc_call__t_x myrpc;
};
struct xmplthc_thc_rpc_fifo {
    xmplthc_myrpc__thc_call__t myrpc;
};
struct xmplthc_thc_rpc_fifo_x {
    xmplthc_myrpc__thc_call__t_x myrpc;
};
struct xmplthc_thc_rpc_ooo {
};
struct xmplthc_thc_rpc_ooo_x {
};

/*
 * Types for recv_any operations
 */

struct xmplthc_client_msg {
    enum xmplthc_msg_enum_t msg;
    union xmplthc_thc_arg_union args;
};
typedef struct xmplthc_client_msg xmplthc_client_msg_t;
typedef  errval_t (*xmplthc_recv_any__thc_client_t)(xmplthc_thc_client_binding_t *_thc_binding, struct xmplthc_client_msg *msg, struct xmplthc_client_selector ops);
typedef  errval_t (*xmplthc_recv_any__thc_client_t_x)(xmplthc_thc_client_binding_t *_thc_binding, struct xmplthc_client_msg *msg, struct xmplthc_client_selector ops);
struct xmplthc_service_msg {
    enum xmplthc_msg_enum_t msg;
    union xmplthc_thc_arg_union args;
};
typedef struct xmplthc_service_msg xmplthc_service_msg_t;
typedef  errval_t (*xmplthc_recv_any__thc_service_t)(xmplthc_thc_service_binding_t *_thc_binding, struct xmplthc_service_msg *msg, struct xmplthc_service_selector ops);
typedef  errval_t (*xmplthc_recv_any__thc_service_t_x)(xmplthc_thc_service_binding_t *_thc_binding, struct xmplthc_service_msg *msg, struct xmplthc_service_selector ops);

/*
 * Binding structures
 */

struct xmplthc_thc_client_binding_t {
    struct thc_per_binding_state_t thc_per_binding;
    struct xmplthc_thc_client_send_vtbl send;
    struct xmplthc_thc_client_send_vtbl_x send_x;
    struct xmplthc_thc_client_receive_vtbl recv;
    struct xmplthc_thc_client_receive_vtbl_x recv_x;
    xmplthc_recv_any__thc_client_t recv_any;
    xmplthc_recv_any__thc_client_t_x recv_any_x;
    struct xmplthc_thc_rpc_seq call_seq;
    struct xmplthc_thc_rpc_fifo call_fifo;
    struct xmplthc_thc_rpc_ooo call;
    struct xmplthc_thc_rpc_seq_x call_seq_x;
    struct xmplthc_thc_rpc_fifo_x call_fifo_x;
    struct xmplthc_thc_rpc_ooo_x call_x;
    thc_seq_t ooo_rpc_seq;
    struct thc_per_recv_t thc_per_recv[3];
    void *_c2s_st;
    void *_s2c_st;
};
struct xmplthc_thc_service_binding_t {
    struct thc_per_binding_state_t thc_per_binding;
    struct xmplthc_thc_service_send_vtbl send;
    struct xmplthc_thc_service_send_vtbl_x send_x;
    struct xmplthc_thc_service_receive_vtbl recv;
    struct xmplthc_thc_service_receive_vtbl_x recv_x;
    xmplthc_recv_any__thc_service_t recv_any;
    xmplthc_recv_any__thc_service_t_x recv_any_x;
    struct thc_per_recv_t thc_per_recv[3];
    void *_c2s_st;
    void *_s2c_st;
};

/*
 * Initialize a THC binding over an IDC binding
 * (defined in THC-stubs backend)
 */

extern  errval_t xmplthc_thc_init_client(xmplthc_thc_client_binding_t *thc, struct xmplthc_binding *idc_c2s, struct xmplthc_binding *idc_s2c);
extern  errval_t xmplthc_thc_init_service(xmplthc_thc_service_binding_t *thc, struct xmplthc_binding *idc_c2s, struct xmplthc_binding *idc_s2c);

/*
 * THC helper functions for establishing connections
 */
struct xmplthc_thc_export_info {
    thc_sem_t export_cb_done_sem;
    thc_sem_t connect_cb_done_sem;
    thc_sem_t accept_call_present_sem;
    thc_lock_t next_accept_lock;
    struct xmplthc_binding **b;
    thc_lock_t info_lock;
    errval_t err;
    const char *service_name;
    iref_t iref;
    iref_t *iref_ptr;
};
struct xmplthc_thc_connect_info {
    thc_sem_t bind_cb_done_sem;
    errval_t err;
    struct xmplthc_binding *b;
};
extern  errval_t xmplthc_thc_export(struct xmplthc_thc_export_info *info, const char *service_name, struct waitset *ws, idc_export_flags_t flags, iref_t *iref);
extern  errval_t xmplthc_thc_accept(struct xmplthc_thc_export_info *info, struct xmplthc_binding **b);
extern  errval_t xmplthc_thc_connect(iref_t iref, struct waitset *ws, idc_bind_flags_t flags, struct xmplthc_binding **b);
extern  errval_t xmplthc_thc_connect_by_name(const char *service_name, struct waitset *ws, idc_bind_flags_t flags, struct xmplthc_binding **b);
#endif // __xmplthc_THC_IF_H
