#ifndef __xeon_phi_IF_H
#define __xeon_phi_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: xeon_phi
 * INTEFACE FILE: ../if/xeon_phi.if
 * INTERFACE DESCRIPTION: Xeon Phi Messaging Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t xeon_phi_genpaddr_t;
typedef uint64_t xeon_phi_genvaddr_t;
typedef uint32_t xeon_phi_rsrcid_t;
typedef uint64_t xeon_phi_errval_t;
typedef uint64_t xeon_phi_cycles_t;
typedef uint32_t xeon_phi_iref_t;
typedef uint8_t xeon_phi_coreid_t;
typedef uint32_t xeon_phi_domainid_t;

/*
 * Forward declaration of binding type
 */
struct xeon_phi_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void xeon_phi_bind_continuation_fn(void *st, errval_t err, struct xeon_phi_binding *_binding);
typedef  bool xeon_phi_can_send_fn(struct xeon_phi_binding *_binding);
typedef  errval_t xeon_phi_register_send_fn(struct xeon_phi_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t xeon_phi_change_waitset_fn(struct xeon_phi_binding *_binding, struct waitset *ws);
typedef  errval_t xeon_phi_control_fn(struct xeon_phi_binding *_binding, idc_control_t control);
typedef  void xeon_phi_error_handler_fn(struct xeon_phi_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum xeon_phi_msg_enum {
    xeon_phi___dummy__msgnum = 0,
    xeon_phi___bind__msgnum = 1,
    xeon_phi___bind_reply__msgnum = 2,
    xeon_phi_domain_lookup_call__msgnum = 3,
    xeon_phi_domain_lookup_response__msgnum = 4,
    xeon_phi_domain_wait_call__msgnum = 5,
    xeon_phi_domain_wait_response__msgnum = 6,
    xeon_phi_domain_register_call__msgnum = 7,
    xeon_phi_domain_register_response__msgnum = 8,
    xeon_phi_domain_init_call__msgnum = 9,
    xeon_phi_domain_init_response__msgnum = 10,
    xeon_phi_spawn_call__msgnum = 11,
    xeon_phi_spawn_response__msgnum = 12,
    xeon_phi_spawn_with_cap_call__msgnum = 13,
    xeon_phi_spawn_with_cap_response__msgnum = 14,
    xeon_phi_kill_call__msgnum = 15,
    xeon_phi_kill_response__msgnum = 16,
    xeon_phi_chan_open_request_call__msgnum = 17,
    xeon_phi_chan_open_request_response__msgnum = 18,
    xeon_phi_chan_open_call__msgnum = 19,
    xeon_phi_chan_open_response__msgnum = 20
} xeon_phi_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t xeon_phi_domain_lookup_call__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, const char *name, size_t length);
typedef  errval_t xeon_phi_domain_lookup_response__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domid, xeon_phi_errval_t msgerr);
typedef  errval_t xeon_phi_domain_wait_call__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, const char *name, size_t length);
typedef  errval_t xeon_phi_domain_wait_response__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domid, xeon_phi_errval_t msgerr);
typedef  errval_t xeon_phi_domain_register_call__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, const char *name, size_t length, uint64_t domid);
typedef  errval_t xeon_phi_domain_register_response__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr);
typedef  errval_t xeon_phi_domain_init_call__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_domainid_t domain, xeon_phi_coreid_t core, const char *name, size_t length);
typedef  errval_t xeon_phi_domain_init_response__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr);
typedef  errval_t xeon_phi_spawn_call__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint8_t xid, uint8_t core, const char *cmdline, size_t length, uint8_t flags);
typedef  errval_t xeon_phi_spawn_response__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domainid, xeon_phi_errval_t msgerr);
typedef  errval_t xeon_phi_spawn_with_cap_call__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint8_t xid, uint8_t core, const char *cmdline, size_t length, uint8_t flags, struct capref capability);
typedef  errval_t xeon_phi_spawn_with_cap_response__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domainid, xeon_phi_errval_t msgerr);
typedef  errval_t xeon_phi_kill_call__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint8_t xid, uint64_t domainid);
typedef  errval_t xeon_phi_kill_response__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr);
typedef  errval_t xeon_phi_chan_open_request_call__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint8_t xphi, struct capref msgframe, uint8_t type, uint64_t domain, uint64_t usrdata);
typedef  errval_t xeon_phi_chan_open_request_response__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr);
typedef  errval_t xeon_phi_chan_open_call__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domain, uint64_t usrdata, struct capref msgframe, uint8_t type);
typedef  errval_t xeon_phi_chan_open_response__tx_method_fn(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr);

/*
 * Message type signatures (receive)
 */
typedef  void xeon_phi_domain_lookup_call__rx_method_fn(struct xeon_phi_binding *_binding, char *name, size_t length);
typedef  void xeon_phi_domain_lookup_response__rx_method_fn(struct xeon_phi_binding *_binding, uint64_t domid, xeon_phi_errval_t msgerr);
typedef  void xeon_phi_domain_wait_call__rx_method_fn(struct xeon_phi_binding *_binding, char *name, size_t length);
typedef  void xeon_phi_domain_wait_response__rx_method_fn(struct xeon_phi_binding *_binding, uint64_t domid, xeon_phi_errval_t msgerr);
typedef  void xeon_phi_domain_register_call__rx_method_fn(struct xeon_phi_binding *_binding, char *name, size_t length, uint64_t domid);
typedef  void xeon_phi_domain_register_response__rx_method_fn(struct xeon_phi_binding *_binding, xeon_phi_errval_t msgerr);
typedef  void xeon_phi_domain_init_call__rx_method_fn(struct xeon_phi_binding *_binding, xeon_phi_domainid_t domain, xeon_phi_coreid_t core, char *name, size_t length);
typedef  void xeon_phi_domain_init_response__rx_method_fn(struct xeon_phi_binding *_binding, xeon_phi_errval_t msgerr);
typedef  void xeon_phi_spawn_call__rx_method_fn(struct xeon_phi_binding *_binding, uint8_t xid, uint8_t core, char *cmdline, size_t length, uint8_t flags);
typedef  void xeon_phi_spawn_response__rx_method_fn(struct xeon_phi_binding *_binding, uint64_t domainid, xeon_phi_errval_t msgerr);
typedef  void xeon_phi_spawn_with_cap_call__rx_method_fn(struct xeon_phi_binding *_binding, uint8_t xid, uint8_t core, char *cmdline, size_t length, uint8_t flags, struct capref capability);
typedef  void xeon_phi_spawn_with_cap_response__rx_method_fn(struct xeon_phi_binding *_binding, uint64_t domainid, xeon_phi_errval_t msgerr);
typedef  void xeon_phi_kill_call__rx_method_fn(struct xeon_phi_binding *_binding, uint8_t xid, uint64_t domainid);
typedef  void xeon_phi_kill_response__rx_method_fn(struct xeon_phi_binding *_binding, xeon_phi_errval_t msgerr);
typedef  void xeon_phi_chan_open_request_call__rx_method_fn(struct xeon_phi_binding *_binding, uint8_t xphi, struct capref msgframe, uint8_t type, uint64_t domain, uint64_t usrdata);
typedef  void xeon_phi_chan_open_request_response__rx_method_fn(struct xeon_phi_binding *_binding, xeon_phi_errval_t msgerr);
typedef  void xeon_phi_chan_open_call__rx_method_fn(struct xeon_phi_binding *_binding, uint64_t domain, uint64_t usrdata, struct capref msgframe, uint8_t type);
typedef  void xeon_phi_chan_open_response__rx_method_fn(struct xeon_phi_binding *_binding, xeon_phi_errval_t msgerr);

/*
 * Struct type for holding the args for each msg
 */
struct xeon_phi_domain_lookup_call__args {
    char *name;
    size_t length;
};
struct xeon_phi_domain_lookup_response__args {
    uint64_t domid;
    xeon_phi_errval_t msgerr;
};
struct xeon_phi_domain_wait_call__args {
    char *name;
    size_t length;
};
struct xeon_phi_domain_wait_response__args {
    uint64_t domid;
    xeon_phi_errval_t msgerr;
};
struct xeon_phi_domain_register_call__args {
    char *name;
    size_t length;
    uint64_t domid;
};
struct xeon_phi_domain_register_response__args {
    xeon_phi_errval_t msgerr;
};
struct xeon_phi_domain_init_call__args {
    xeon_phi_domainid_t domain;
    xeon_phi_coreid_t core;
    char *name;
    size_t length;
};
struct xeon_phi_domain_init_response__args {
    xeon_phi_errval_t msgerr;
};
struct xeon_phi_spawn_call__args {
    uint8_t xid;
    uint8_t core;
    char *cmdline;
    size_t length;
    uint8_t flags;
};
struct xeon_phi_spawn_response__args {
    uint64_t domainid;
    xeon_phi_errval_t msgerr;
};
struct xeon_phi_spawn_with_cap_call__args {
    uint8_t xid;
    uint8_t core;
    char *cmdline;
    size_t length;
    uint8_t flags;
    struct capref capability;
};
struct xeon_phi_spawn_with_cap_response__args {
    uint64_t domainid;
    xeon_phi_errval_t msgerr;
};
struct xeon_phi_kill_call__args {
    uint8_t xid;
    uint64_t domainid;
};
struct xeon_phi_kill_response__args {
    xeon_phi_errval_t msgerr;
};
struct xeon_phi_chan_open_request_call__args {
    uint8_t xphi;
    struct capref msgframe;
    uint8_t type;
    uint64_t domain;
    uint64_t usrdata;
};
struct xeon_phi_chan_open_request_response__args {
    xeon_phi_errval_t msgerr;
};
struct xeon_phi_chan_open_call__args {
    uint64_t domain;
    uint64_t usrdata;
    struct capref msgframe;
    uint8_t type;
};
struct xeon_phi_chan_open_response__args {
    xeon_phi_errval_t msgerr;
};

/*
 * Union type for all message arguments
 */
union xeon_phi_arg_union {
    struct xeon_phi_domain_lookup_call__args domain_lookup_call;
    struct xeon_phi_domain_lookup_response__args domain_lookup_response;
    struct xeon_phi_domain_wait_call__args domain_wait_call;
    struct xeon_phi_domain_wait_response__args domain_wait_response;
    struct xeon_phi_domain_register_call__args domain_register_call;
    struct xeon_phi_domain_register_response__args domain_register_response;
    struct xeon_phi_domain_init_call__args domain_init_call;
    struct xeon_phi_domain_init_response__args domain_init_response;
    struct xeon_phi_spawn_call__args spawn_call;
    struct xeon_phi_spawn_response__args spawn_response;
    struct xeon_phi_spawn_with_cap_call__args spawn_with_cap_call;
    struct xeon_phi_spawn_with_cap_response__args spawn_with_cap_response;
    struct xeon_phi_kill_call__args kill_call;
    struct xeon_phi_kill_response__args kill_response;
    struct xeon_phi_chan_open_request_call__args chan_open_request_call;
    struct xeon_phi_chan_open_request_response__args chan_open_request_response;
    struct xeon_phi_chan_open_call__args chan_open_call;
    struct xeon_phi_chan_open_response__args chan_open_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct xeon_phi_tx_vtbl {
    xeon_phi_domain_lookup_call__tx_method_fn *domain_lookup_call;
    xeon_phi_domain_lookup_response__tx_method_fn *domain_lookup_response;
    xeon_phi_domain_wait_call__tx_method_fn *domain_wait_call;
    xeon_phi_domain_wait_response__tx_method_fn *domain_wait_response;
    xeon_phi_domain_register_call__tx_method_fn *domain_register_call;
    xeon_phi_domain_register_response__tx_method_fn *domain_register_response;
    xeon_phi_domain_init_call__tx_method_fn *domain_init_call;
    xeon_phi_domain_init_response__tx_method_fn *domain_init_response;
    xeon_phi_spawn_call__tx_method_fn *spawn_call;
    xeon_phi_spawn_response__tx_method_fn *spawn_response;
    xeon_phi_spawn_with_cap_call__tx_method_fn *spawn_with_cap_call;
    xeon_phi_spawn_with_cap_response__tx_method_fn *spawn_with_cap_response;
    xeon_phi_kill_call__tx_method_fn *kill_call;
    xeon_phi_kill_response__tx_method_fn *kill_response;
    xeon_phi_chan_open_request_call__tx_method_fn *chan_open_request_call;
    xeon_phi_chan_open_request_response__tx_method_fn *chan_open_request_response;
    xeon_phi_chan_open_call__tx_method_fn *chan_open_call;
    xeon_phi_chan_open_response__tx_method_fn *chan_open_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct xeon_phi_rx_vtbl {
    xeon_phi_domain_lookup_call__rx_method_fn *domain_lookup_call;
    xeon_phi_domain_lookup_response__rx_method_fn *domain_lookup_response;
    xeon_phi_domain_wait_call__rx_method_fn *domain_wait_call;
    xeon_phi_domain_wait_response__rx_method_fn *domain_wait_response;
    xeon_phi_domain_register_call__rx_method_fn *domain_register_call;
    xeon_phi_domain_register_response__rx_method_fn *domain_register_response;
    xeon_phi_domain_init_call__rx_method_fn *domain_init_call;
    xeon_phi_domain_init_response__rx_method_fn *domain_init_response;
    xeon_phi_spawn_call__rx_method_fn *spawn_call;
    xeon_phi_spawn_response__rx_method_fn *spawn_response;
    xeon_phi_spawn_with_cap_call__rx_method_fn *spawn_with_cap_call;
    xeon_phi_spawn_with_cap_response__rx_method_fn *spawn_with_cap_response;
    xeon_phi_kill_call__rx_method_fn *kill_call;
    xeon_phi_kill_response__rx_method_fn *kill_response;
    xeon_phi_chan_open_request_call__rx_method_fn *chan_open_request_call;
    xeon_phi_chan_open_request_response__rx_method_fn *chan_open_request_response;
    xeon_phi_chan_open_call__rx_method_fn *chan_open_call;
    xeon_phi_chan_open_response__rx_method_fn *chan_open_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t xeon_phi_connect_fn(void *st, struct xeon_phi_binding *binding);

/*
 * Export state struct
 */
struct xeon_phi_export {
    struct idc_export common;
    xeon_phi_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t xeon_phi_export(void *st, idc_export_callback_fn *export_cb, xeon_phi_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct xeon_phi_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t xeon_phi_accept(struct xeon_phi_frameinfo *_frameinfo, void *st, xeon_phi_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct xeon_phi_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    xeon_phi_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    xeon_phi_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    xeon_phi_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    xeon_phi_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    xeon_phi_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct xeon_phi_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct xeon_phi_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union xeon_phi_arg_union tx_union;
    union xeon_phi_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum xeon_phi_msg_enum tx_msgnum;
    enum xeon_phi_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    xeon_phi_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t xeon_phi_bind(iref_t i, xeon_phi_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t xeon_phi_connect(struct xeon_phi_frameinfo *_frameinfo, xeon_phi_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t xeon_phi_domain_lookup_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, const char *name, size_t length) __attribute__ ((always_inline));
static inline errval_t xeon_phi_domain_lookup_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, const char *name, size_t length)
{
    return(((_binding->tx_vtbl).domain_lookup_call)(_binding, _continuation, name, length));
}

static inline errval_t xeon_phi_domain_lookup_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domid, xeon_phi_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xeon_phi_domain_lookup_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domid, xeon_phi_errval_t msgerr)
{
    return(((_binding->tx_vtbl).domain_lookup_response)(_binding, _continuation, domid, msgerr));
}

static inline errval_t xeon_phi_domain_wait_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, const char *name, size_t length) __attribute__ ((always_inline));
static inline errval_t xeon_phi_domain_wait_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, const char *name, size_t length)
{
    return(((_binding->tx_vtbl).domain_wait_call)(_binding, _continuation, name, length));
}

static inline errval_t xeon_phi_domain_wait_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domid, xeon_phi_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xeon_phi_domain_wait_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domid, xeon_phi_errval_t msgerr)
{
    return(((_binding->tx_vtbl).domain_wait_response)(_binding, _continuation, domid, msgerr));
}

static inline errval_t xeon_phi_domain_register_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, const char *name, size_t length, uint64_t domid) __attribute__ ((always_inline));
static inline errval_t xeon_phi_domain_register_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, const char *name, size_t length, uint64_t domid)
{
    return(((_binding->tx_vtbl).domain_register_call)(_binding, _continuation, name, length, domid));
}

static inline errval_t xeon_phi_domain_register_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xeon_phi_domain_register_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr)
{
    return(((_binding->tx_vtbl).domain_register_response)(_binding, _continuation, msgerr));
}

static inline errval_t xeon_phi_domain_init_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_domainid_t domain, xeon_phi_coreid_t core, const char *name, size_t length) __attribute__ ((always_inline));
static inline errval_t xeon_phi_domain_init_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_domainid_t domain, xeon_phi_coreid_t core, const char *name, size_t length)
{
    return(((_binding->tx_vtbl).domain_init_call)(_binding, _continuation, domain, core, name, length));
}

static inline errval_t xeon_phi_domain_init_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xeon_phi_domain_init_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr)
{
    return(((_binding->tx_vtbl).domain_init_response)(_binding, _continuation, msgerr));
}

static inline errval_t xeon_phi_spawn_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint8_t xid, uint8_t core, const char *cmdline, size_t length, uint8_t flags) __attribute__ ((always_inline));
static inline errval_t xeon_phi_spawn_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint8_t xid, uint8_t core, const char *cmdline, size_t length, uint8_t flags)
{
    return(((_binding->tx_vtbl).spawn_call)(_binding, _continuation, xid, core, cmdline, length, flags));
}

static inline errval_t xeon_phi_spawn_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domainid, xeon_phi_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xeon_phi_spawn_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domainid, xeon_phi_errval_t msgerr)
{
    return(((_binding->tx_vtbl).spawn_response)(_binding, _continuation, domainid, msgerr));
}

static inline errval_t xeon_phi_spawn_with_cap_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint8_t xid, uint8_t core, const char *cmdline, size_t length, uint8_t flags, struct capref capability) __attribute__ ((always_inline));
static inline errval_t xeon_phi_spawn_with_cap_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint8_t xid, uint8_t core, const char *cmdline, size_t length, uint8_t flags, struct capref capability)
{
    return(((_binding->tx_vtbl).spawn_with_cap_call)(_binding, _continuation, xid, core, cmdline, length, flags, capability));
}

static inline errval_t xeon_phi_spawn_with_cap_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domainid, xeon_phi_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xeon_phi_spawn_with_cap_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domainid, xeon_phi_errval_t msgerr)
{
    return(((_binding->tx_vtbl).spawn_with_cap_response)(_binding, _continuation, domainid, msgerr));
}

static inline errval_t xeon_phi_kill_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint8_t xid, uint64_t domainid) __attribute__ ((always_inline));
static inline errval_t xeon_phi_kill_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint8_t xid, uint64_t domainid)
{
    return(((_binding->tx_vtbl).kill_call)(_binding, _continuation, xid, domainid));
}

static inline errval_t xeon_phi_kill_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xeon_phi_kill_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr)
{
    return(((_binding->tx_vtbl).kill_response)(_binding, _continuation, msgerr));
}

static inline errval_t xeon_phi_chan_open_request_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint8_t xphi, struct capref msgframe, uint8_t type, uint64_t domain, uint64_t usrdata) __attribute__ ((always_inline));
static inline errval_t xeon_phi_chan_open_request_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint8_t xphi, struct capref msgframe, uint8_t type, uint64_t domain, uint64_t usrdata)
{
    return(((_binding->tx_vtbl).chan_open_request_call)(_binding, _continuation, xphi, msgframe, type, domain, usrdata));
}

static inline errval_t xeon_phi_chan_open_request_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xeon_phi_chan_open_request_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr)
{
    return(((_binding->tx_vtbl).chan_open_request_response)(_binding, _continuation, msgerr));
}

static inline errval_t xeon_phi_chan_open_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domain, uint64_t usrdata, struct capref msgframe, uint8_t type) __attribute__ ((always_inline));
static inline errval_t xeon_phi_chan_open_call__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, uint64_t domain, uint64_t usrdata, struct capref msgframe, uint8_t type)
{
    return(((_binding->tx_vtbl).chan_open_call)(_binding, _continuation, domain, usrdata, msgframe, type));
}

static inline errval_t xeon_phi_chan_open_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr) __attribute__ ((always_inline));
static inline errval_t xeon_phi_chan_open_response__tx(struct xeon_phi_binding *_binding, struct event_closure _continuation, xeon_phi_errval_t msgerr)
{
    return(((_binding->tx_vtbl).chan_open_response)(_binding, _continuation, msgerr));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/xeon_phi_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/xeon_phi_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/xeon_phi_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/xeon_phi_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __xeon_phi_IF_H
