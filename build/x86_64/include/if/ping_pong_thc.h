#ifndef __ping_pong_THC_IF_H
#define __ping_pong_THC_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: ping_pong
 * INTEFACE FILE: ../if/ping_pong.if
 * INTERFACE DESCRIPTION: Ping-Pong async example Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */
#ifdef BARRELFISH
#include "thc/thcstubs.h"
#include "if/ping_pong_defs.h"
#else
#include "thcstubs.h"
#include "ping_pong.h"
#endif // BARRELFISH

/*
 * Typedefs for binding structures
 */

typedef struct ping_pong_thc_client_binding_t ping_pong_thc_client_binding_t;
typedef struct ping_pong_thc_service_binding_t ping_pong_thc_service_binding_t;

/*
 * Struct type for holding the args for each msg
 */
struct ping_pong_rsrc_join_request__args_t {
    uint32_t id;
};
struct ping_pong_ping__args_t {
    uint64_t val;
};
struct ping_pong_pong__args_t {
    uint64_t val;
};
struct ping_pong_slow_op__args_t {
    uint64_t val;
};
struct ping_pong_slow_reply__args_t {
    uint64_t val;
};
struct ping_pong_testrpc__in_args_t {
    uint64_t testin;
};
struct ping_pong_testrpc__out_args_t {
    uint64_t testout;
};
union ping_pong_testrpc___union_t {
    struct ping_pong_testrpc__in_args_t in;
    struct ping_pong_testrpc__out_args_t out;
};
struct ping_pong_testrpc2__in_args_t {
    uint64_t testin;
};
struct ping_pong_testrpc2__out_args_t {
    uint64_t testout;
};
union ping_pong_testrpc2___union_t {
    struct ping_pong_testrpc2__in_args_t in;
    struct ping_pong_testrpc2__out_args_t out;
};
struct ping_pong_outoforder__in_args_t {
    uint64_t seq_in;
    uint64_t testin;
};
struct ping_pong_outoforder__out_args_t {
    uint64_t seq_out;
    uint64_t testout;
};
union ping_pong_outoforder___union_t {
    struct ping_pong_outoforder__in_args_t in;
    struct ping_pong_outoforder__out_args_t out;
};
struct ping_pong_str0__args_t {
    uint32_t arg1;
    char *s;
};
struct ping_pong_str1__args_t {
    uint32_t arg1;
    char *s;
};
struct ping_pong_str2__args_t {
    uint32_t arg1;
    char *s;
};
struct ping_pong_str3__in_args_t {
    uint32_t arg1;
    char *s;
};
struct ping_pong_str3__out_args_t {
};
union ping_pong_str3___union_t {
    struct ping_pong_str3__in_args_t in;
    struct ping_pong_str3__out_args_t out;
};
struct ping_pong_str4__in_args_t {
};
struct ping_pong_str4__out_args_t {
    uint32_t arg1;
    char *s;
};
union ping_pong_str4___union_t {
    struct ping_pong_str4__in_args_t in;
    struct ping_pong_str4__out_args_t out;
};
struct ping_pong_str5__in_args_t {
    uint64_t seq_in;
    uint32_t arg1;
    char *s;
};
struct ping_pong_str5__out_args_t {
    uint64_t seq_out;
};
union ping_pong_str5___union_t {
    struct ping_pong_str5__in_args_t in;
    struct ping_pong_str5__out_args_t out;
};
struct ping_pong_str6__in_args_t {
    uint64_t seq_in;
};
struct ping_pong_str6__out_args_t {
    uint64_t seq_out;
    uint32_t arg1;
    char *s;
};
union ping_pong_str6___union_t {
    struct ping_pong_str6__in_args_t in;
    struct ping_pong_str6__out_args_t out;
};
struct ping_pong_arr0__args_t {
    uint32_t arg1;
    char *a;
    size_t l;
};
struct ping_pong_arr1__args_t {
    uint32_t arg1;
    char *a;
    size_t l;
};
struct ping_pong_arr2__args_t {
    uint32_t arg1;
    char *a;
    size_t l;
};

/*
 * Union type for all message arguments
 */
union ping_pong_thc_arg_union {
    struct ping_pong_rsrc_join_request__args_t rsrc_join_request;
    struct ping_pong_ping__args_t ping;
    struct ping_pong_pong__args_t pong;
    struct ping_pong_slow_op__args_t slow_op;
    struct ping_pong_slow_reply__args_t slow_reply;
    struct ping_pong_str0__args_t str0;
    struct ping_pong_str1__args_t str1;
    struct ping_pong_str2__args_t str2;
    struct ping_pong_arr0__args_t arr0;
    struct ping_pong_arr1__args_t arr1;
    struct ping_pong_arr2__args_t arr2;
    union ping_pong_testrpc___union_t testrpc;
    union ping_pong_testrpc2___union_t testrpc2;
    union ping_pong_outoforder___union_t outoforder;
    union ping_pong_str3___union_t str3;
    union ping_pong_str4___union_t str4;
    union ping_pong_str5___union_t str5;
    union ping_pong_str6___union_t str6;
};

/*
 * Enumerations for message numbers
 */
typedef enum ping_pong_msg_enum_t {
    ping_pong_rsrc_join_request,
    ping_pong_rsrc_join_reply,
    ping_pong_init,
    ping_pong_ping,
    ping_pong_pong,
    ping_pong_slow_op,
    ping_pong_slow_reply,
    ping_pong_stop,
    ping_pong_str0,
    ping_pong_str1,
    ping_pong_str2,
    ping_pong_arr0,
    ping_pong_arr1,
    ping_pong_arr2,
    ping_pong_testrpc,
    ping_pong_testrpc2,
    ping_pong_outoforder,
    ping_pong_str3,
    ping_pong_str4,
    ping_pong_str5,
    ping_pong_str6
} ping_pong_msg_enum_t;
typedef enum ping_pong_call_msg_enum_t {
    ping_pong__call_rsrc_join_request,
    ping_pong__call_rsrc_join_reply,
    ping_pong__call_init,
    ping_pong__call_ping,
    ping_pong__call_slow_op,
    ping_pong__call_stop,
    ping_pong__call_str0,
    ping_pong__call_str1,
    ping_pong__call_arr0,
    ping_pong__call_arr1,
    ping_pong__call_testrpc,
    ping_pong__call_testrpc2,
    ping_pong__call_outoforder,
    ping_pong__call_str3,
    ping_pong__call_str4,
    ping_pong__call_str5,
    ping_pong__call_str6
} ping_pong_call_msg_enum_t;
typedef enum ping_pong_resp_msg_enum_t {
    ping_pong__resp_rsrc_join_request,
    ping_pong__resp_rsrc_join_reply,
    ping_pong__resp_init,
    ping_pong__resp_pong,
    ping_pong__resp_slow_reply,
    ping_pong__resp_str0,
    ping_pong__resp_str2,
    ping_pong__resp_arr0,
    ping_pong__resp_arr2,
    ping_pong__resp_testrpc,
    ping_pong__resp_testrpc2,
    ping_pong__resp_outoforder,
    ping_pong__resp_str3,
    ping_pong__resp_str4,
    ping_pong__resp_str5,
    ping_pong__resp_str6
} ping_pong_resp_msg_enum_t;


/*
 * Signatures for individual send/receive operations
 */

typedef  errval_t (*ping_pong_rsrc_join_request__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t id);
typedef  errval_t (*ping_pong_rsrc_join_reply__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_init__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_ping__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t val);
typedef  errval_t (*ping_pong_slow_op__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t val);
typedef  errval_t (*ping_pong_stop__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_testrpc__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t testin);
typedef  errval_t (*ping_pong_testrpc2__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t testin);
typedef  errval_t (*ping_pong_outoforder__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t seq_in, uint64_t testin);
typedef  errval_t (*ping_pong_str0__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str1__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str3__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str4__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_str5__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t seq_in, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str6__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t seq_in);
typedef  errval_t (*ping_pong_arr0__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *a, size_t l);
typedef  errval_t (*ping_pong_arr1__thc_client_send_t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *a, size_t l);
typedef  errval_t (*ping_pong_rsrc_join_request__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t id);
typedef  errval_t (*ping_pong_rsrc_join_reply__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_init__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_ping__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t val);
typedef  errval_t (*ping_pong_slow_op__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t val);
typedef  errval_t (*ping_pong_stop__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_testrpc__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t testin);
typedef  errval_t (*ping_pong_testrpc2__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t testin);
typedef  errval_t (*ping_pong_outoforder__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t seq_in, uint64_t testin);
typedef  errval_t (*ping_pong_str0__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str1__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str3__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str4__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_str5__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t seq_in, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str6__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t seq_in);
typedef  errval_t (*ping_pong_arr0__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *a, size_t l);
typedef  errval_t (*ping_pong_arr1__thc_client_send_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *a, size_t l);
typedef  errval_t (*ping_pong_rsrc_join_request__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t *id);
typedef  errval_t (*ping_pong_rsrc_join_reply__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_init__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_ping__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *val);
typedef  errval_t (*ping_pong_slow_op__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *val);
typedef  errval_t (*ping_pong_stop__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_testrpc__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *testin);
typedef  errval_t (*ping_pong_testrpc2__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *testin);
typedef  errval_t (*ping_pong_outoforder__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *seq_in, uint64_t *testin);
typedef  errval_t (*ping_pong_str0__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str1__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str3__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str4__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_str5__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *seq_in, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str6__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *seq_in);
typedef  errval_t (*ping_pong_arr0__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t *arg1, char **a, size_t *l);
typedef  errval_t (*ping_pong_arr1__thc_service_recv_t)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t *arg1, char **a, size_t *l);
typedef  errval_t (*ping_pong_rsrc_join_request__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t *id);
typedef  errval_t (*ping_pong_rsrc_join_reply__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_init__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_ping__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *val);
typedef  errval_t (*ping_pong_slow_op__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *val);
typedef  errval_t (*ping_pong_stop__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_testrpc__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *testin);
typedef  errval_t (*ping_pong_testrpc2__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *testin);
typedef  errval_t (*ping_pong_outoforder__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *seq_in, uint64_t *testin);
typedef  errval_t (*ping_pong_str0__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str1__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str3__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str4__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_str5__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *seq_in, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str6__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t *seq_in);
typedef  errval_t (*ping_pong_arr0__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t *arg1, char **a, size_t *l);
typedef  errval_t (*ping_pong_arr1__thc_service_recv_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t *arg1, char **a, size_t *l);
typedef  errval_t (*ping_pong_rsrc_join_request__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t id);
typedef  errval_t (*ping_pong_rsrc_join_reply__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_init__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_pong__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t val);
typedef  errval_t (*ping_pong_slow_reply__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t val);
typedef  errval_t (*ping_pong_testrpc__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t testout);
typedef  errval_t (*ping_pong_testrpc2__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t testout);
typedef  errval_t (*ping_pong_outoforder__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t seq_out, uint64_t testout);
typedef  errval_t (*ping_pong_str0__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str2__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str3__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_str4__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str5__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t seq_out);
typedef  errval_t (*ping_pong_str6__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t seq_out, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_arr0__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t arg1, const char *a, size_t l);
typedef  errval_t (*ping_pong_arr2__thc_service_send_t)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t arg1, const char *a, size_t l);
typedef  errval_t (*ping_pong_rsrc_join_request__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t id);
typedef  errval_t (*ping_pong_rsrc_join_reply__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_init__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_pong__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t val);
typedef  errval_t (*ping_pong_slow_reply__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t val);
typedef  errval_t (*ping_pong_testrpc__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t testout);
typedef  errval_t (*ping_pong_testrpc2__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t testout);
typedef  errval_t (*ping_pong_outoforder__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t seq_out, uint64_t testout);
typedef  errval_t (*ping_pong_str0__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str2__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str3__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_str4__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str5__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t seq_out);
typedef  errval_t (*ping_pong_str6__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint64_t seq_out, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_arr0__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t arg1, const char *a, size_t l);
typedef  errval_t (*ping_pong_arr2__thc_service_send_t_x)(ping_pong_thc_service_binding_t *_thc_binding, uint32_t arg1, const char *a, size_t l);
typedef  errval_t (*ping_pong_rsrc_join_request__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *id);
typedef  errval_t (*ping_pong_rsrc_join_reply__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_init__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_pong__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *val);
typedef  errval_t (*ping_pong_slow_reply__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *val);
typedef  errval_t (*ping_pong_testrpc__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *testout);
typedef  errval_t (*ping_pong_testrpc2__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *testout);
typedef  errval_t (*ping_pong_outoforder__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *seq_out, uint64_t *testout);
typedef  errval_t (*ping_pong_str0__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str2__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str3__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_str4__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str5__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *seq_out);
typedef  errval_t (*ping_pong_str6__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *seq_out, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_arr0__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **a, size_t *l);
typedef  errval_t (*ping_pong_arr2__thc_client_recv_t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **a, size_t *l);
typedef  errval_t (*ping_pong_rsrc_join_request__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *id);
typedef  errval_t (*ping_pong_rsrc_join_reply__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_init__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_pong__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *val);
typedef  errval_t (*ping_pong_slow_reply__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *val);
typedef  errval_t (*ping_pong_testrpc__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *testout);
typedef  errval_t (*ping_pong_testrpc2__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *testout);
typedef  errval_t (*ping_pong_outoforder__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *seq_out, uint64_t *testout);
typedef  errval_t (*ping_pong_str0__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str2__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str3__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding);
typedef  errval_t (*ping_pong_str4__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str5__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *seq_out);
typedef  errval_t (*ping_pong_str6__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t *seq_out, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_arr0__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **a, size_t *l);
typedef  errval_t (*ping_pong_arr2__thc_client_recv_t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **a, size_t *l);
typedef  errval_t (*ping_pong_testrpc__thc_call__t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t testin, uint64_t *testout);
typedef  errval_t (*ping_pong_testrpc2__thc_call__t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t testin, uint64_t *testout);
typedef  errval_t (*ping_pong_outoforder__thc_call__t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t seq_in, uint64_t *seq_out, uint64_t testin, uint64_t *testout);
typedef  errval_t (*ping_pong_str3__thc_call__t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str4__thc_call__t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str5__thc_call__t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t seq_in, uint64_t *seq_out, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str6__thc_call__t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t seq_in, uint64_t *seq_out, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_testrpc__thc_call__t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t testin, uint64_t *testout);
typedef  errval_t (*ping_pong_testrpc2__thc_call__t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t testin, uint64_t *testout);
typedef  errval_t (*ping_pong_outoforder__thc_call__t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t seq_in, uint64_t *seq_out, uint64_t testin, uint64_t *testout);
typedef  errval_t (*ping_pong_str3__thc_call__t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str4__thc_call__t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_str5__thc_call__t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t seq_in, uint64_t *seq_out, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str6__thc_call__t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t seq_in, uint64_t *seq_out, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_outoforder__thc_ooo_call__t)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t testin, uint64_t *testout);
typedef  errval_t (*ping_pong_str5__thc_ooo_call__t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str6__thc_ooo_call__t)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **s);
typedef  errval_t (*ping_pong_outoforder__thc_ooo_call__t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint64_t testin, uint64_t *testout);
typedef  errval_t (*ping_pong_str5__thc_ooo_call__t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t arg1, const char *s);
typedef  errval_t (*ping_pong_str6__thc_ooo_call__t_x)(ping_pong_thc_client_binding_t *_thc_binding, uint32_t *arg1, char **s);

/*
 * VTables of send/receive operations
 */

struct ping_pong_thc_client_send_vtbl {
    ping_pong_rsrc_join_request__thc_client_send_t rsrc_join_request;
    ping_pong_rsrc_join_reply__thc_client_send_t rsrc_join_reply;
    ping_pong_init__thc_client_send_t init;
    ping_pong_ping__thc_client_send_t ping;
    ping_pong_slow_op__thc_client_send_t slow_op;
    ping_pong_stop__thc_client_send_t stop;
    ping_pong_testrpc__thc_client_send_t testrpc;
    ping_pong_testrpc2__thc_client_send_t testrpc2;
    ping_pong_outoforder__thc_client_send_t outoforder;
    ping_pong_str0__thc_client_send_t str0;
    ping_pong_str1__thc_client_send_t str1;
    ping_pong_str3__thc_client_send_t str3;
    ping_pong_str4__thc_client_send_t str4;
    ping_pong_str5__thc_client_send_t str5;
    ping_pong_str6__thc_client_send_t str6;
    ping_pong_arr0__thc_client_send_t arr0;
    ping_pong_arr1__thc_client_send_t arr1;
};
struct ping_pong_thc_client_send_vtbl_x {
    ping_pong_rsrc_join_request__thc_client_send_t_x rsrc_join_request;
    ping_pong_rsrc_join_reply__thc_client_send_t_x rsrc_join_reply;
    ping_pong_init__thc_client_send_t_x init;
    ping_pong_ping__thc_client_send_t_x ping;
    ping_pong_slow_op__thc_client_send_t_x slow_op;
    ping_pong_stop__thc_client_send_t_x stop;
    ping_pong_testrpc__thc_client_send_t_x testrpc;
    ping_pong_testrpc2__thc_client_send_t_x testrpc2;
    ping_pong_outoforder__thc_client_send_t_x outoforder;
    ping_pong_str0__thc_client_send_t_x str0;
    ping_pong_str1__thc_client_send_t_x str1;
    ping_pong_str3__thc_client_send_t_x str3;
    ping_pong_str4__thc_client_send_t_x str4;
    ping_pong_str5__thc_client_send_t_x str5;
    ping_pong_str6__thc_client_send_t_x str6;
    ping_pong_arr0__thc_client_send_t_x arr0;
    ping_pong_arr1__thc_client_send_t_x arr1;
};
struct ping_pong_thc_service_receive_vtbl {
    ping_pong_rsrc_join_request__thc_service_recv_t rsrc_join_request;
    ping_pong_rsrc_join_reply__thc_service_recv_t rsrc_join_reply;
    ping_pong_init__thc_service_recv_t init;
    ping_pong_ping__thc_service_recv_t ping;
    ping_pong_slow_op__thc_service_recv_t slow_op;
    ping_pong_stop__thc_service_recv_t stop;
    ping_pong_testrpc__thc_service_recv_t testrpc;
    ping_pong_testrpc2__thc_service_recv_t testrpc2;
    ping_pong_outoforder__thc_service_recv_t outoforder;
    ping_pong_str0__thc_service_recv_t str0;
    ping_pong_str1__thc_service_recv_t str1;
    ping_pong_str3__thc_service_recv_t str3;
    ping_pong_str4__thc_service_recv_t str4;
    ping_pong_str5__thc_service_recv_t str5;
    ping_pong_str6__thc_service_recv_t str6;
    ping_pong_arr0__thc_service_recv_t arr0;
    ping_pong_arr1__thc_service_recv_t arr1;
};
struct ping_pong_thc_service_receive_vtbl_x {
    ping_pong_rsrc_join_request__thc_service_recv_t_x rsrc_join_request;
    ping_pong_rsrc_join_reply__thc_service_recv_t_x rsrc_join_reply;
    ping_pong_init__thc_service_recv_t_x init;
    ping_pong_ping__thc_service_recv_t_x ping;
    ping_pong_slow_op__thc_service_recv_t_x slow_op;
    ping_pong_stop__thc_service_recv_t_x stop;
    ping_pong_testrpc__thc_service_recv_t_x testrpc;
    ping_pong_testrpc2__thc_service_recv_t_x testrpc2;
    ping_pong_outoforder__thc_service_recv_t_x outoforder;
    ping_pong_str0__thc_service_recv_t_x str0;
    ping_pong_str1__thc_service_recv_t_x str1;
    ping_pong_str3__thc_service_recv_t_x str3;
    ping_pong_str4__thc_service_recv_t_x str4;
    ping_pong_str5__thc_service_recv_t_x str5;
    ping_pong_str6__thc_service_recv_t_x str6;
    ping_pong_arr0__thc_service_recv_t_x arr0;
    ping_pong_arr1__thc_service_recv_t_x arr1;
};
struct ping_pong_service_selector {
    int rsrc_join_request;
    int rsrc_join_reply;
    int init;
    int ping;
    int slow_op;
    int stop;
    int testrpc;
    int testrpc2;
    int outoforder;
    int str0;
    int str1;
    int str3;
    int str4;
    int str5;
    int str6;
    int arr0;
    int arr1;
};
struct ping_pong_thc_service_send_vtbl {
    ping_pong_rsrc_join_request__thc_service_send_t rsrc_join_request;
    ping_pong_rsrc_join_reply__thc_service_send_t rsrc_join_reply;
    ping_pong_init__thc_service_send_t init;
    ping_pong_pong__thc_service_send_t pong;
    ping_pong_slow_reply__thc_service_send_t slow_reply;
    ping_pong_testrpc__thc_service_send_t testrpc;
    ping_pong_testrpc2__thc_service_send_t testrpc2;
    ping_pong_outoforder__thc_service_send_t outoforder;
    ping_pong_str0__thc_service_send_t str0;
    ping_pong_str2__thc_service_send_t str2;
    ping_pong_str3__thc_service_send_t str3;
    ping_pong_str4__thc_service_send_t str4;
    ping_pong_str5__thc_service_send_t str5;
    ping_pong_str6__thc_service_send_t str6;
    ping_pong_arr0__thc_service_send_t arr0;
    ping_pong_arr2__thc_service_send_t arr2;
};
struct ping_pong_thc_service_send_vtbl_x {
    ping_pong_rsrc_join_request__thc_service_send_t_x rsrc_join_request;
    ping_pong_rsrc_join_reply__thc_service_send_t_x rsrc_join_reply;
    ping_pong_init__thc_service_send_t_x init;
    ping_pong_pong__thc_service_send_t_x pong;
    ping_pong_slow_reply__thc_service_send_t_x slow_reply;
    ping_pong_testrpc__thc_service_send_t_x testrpc;
    ping_pong_testrpc2__thc_service_send_t_x testrpc2;
    ping_pong_outoforder__thc_service_send_t_x outoforder;
    ping_pong_str0__thc_service_send_t_x str0;
    ping_pong_str2__thc_service_send_t_x str2;
    ping_pong_str3__thc_service_send_t_x str3;
    ping_pong_str4__thc_service_send_t_x str4;
    ping_pong_str5__thc_service_send_t_x str5;
    ping_pong_str6__thc_service_send_t_x str6;
    ping_pong_arr0__thc_service_send_t_x arr0;
    ping_pong_arr2__thc_service_send_t_x arr2;
};
struct ping_pong_thc_client_receive_vtbl {
    ping_pong_rsrc_join_request__thc_client_recv_t rsrc_join_request;
    ping_pong_rsrc_join_reply__thc_client_recv_t rsrc_join_reply;
    ping_pong_init__thc_client_recv_t init;
    ping_pong_pong__thc_client_recv_t pong;
    ping_pong_slow_reply__thc_client_recv_t slow_reply;
    ping_pong_testrpc__thc_client_recv_t testrpc;
    ping_pong_testrpc2__thc_client_recv_t testrpc2;
    ping_pong_outoforder__thc_client_recv_t outoforder;
    ping_pong_str0__thc_client_recv_t str0;
    ping_pong_str2__thc_client_recv_t str2;
    ping_pong_str3__thc_client_recv_t str3;
    ping_pong_str4__thc_client_recv_t str4;
    ping_pong_str5__thc_client_recv_t str5;
    ping_pong_str6__thc_client_recv_t str6;
    ping_pong_arr0__thc_client_recv_t arr0;
    ping_pong_arr2__thc_client_recv_t arr2;
};
struct ping_pong_thc_client_receive_vtbl_x {
    ping_pong_rsrc_join_request__thc_client_recv_t_x rsrc_join_request;
    ping_pong_rsrc_join_reply__thc_client_recv_t_x rsrc_join_reply;
    ping_pong_init__thc_client_recv_t_x init;
    ping_pong_pong__thc_client_recv_t_x pong;
    ping_pong_slow_reply__thc_client_recv_t_x slow_reply;
    ping_pong_testrpc__thc_client_recv_t_x testrpc;
    ping_pong_testrpc2__thc_client_recv_t_x testrpc2;
    ping_pong_outoforder__thc_client_recv_t_x outoforder;
    ping_pong_str0__thc_client_recv_t_x str0;
    ping_pong_str2__thc_client_recv_t_x str2;
    ping_pong_str3__thc_client_recv_t_x str3;
    ping_pong_str4__thc_client_recv_t_x str4;
    ping_pong_str5__thc_client_recv_t_x str5;
    ping_pong_str6__thc_client_recv_t_x str6;
    ping_pong_arr0__thc_client_recv_t_x arr0;
    ping_pong_arr2__thc_client_recv_t_x arr2;
};
struct ping_pong_client_selector {
    int rsrc_join_request;
    int rsrc_join_reply;
    int init;
    int pong;
    int slow_reply;
    int testrpc;
    int testrpc2;
    int outoforder;
    int str0;
    int str2;
    int str3;
    int str4;
    int str5;
    int str6;
    int arr0;
    int arr2;
};

/*
 * VTables of RPC operations
 */

struct ping_pong_thc_rpc_seq {
    ping_pong_testrpc__thc_call__t testrpc;
    ping_pong_testrpc2__thc_call__t testrpc2;
    ping_pong_outoforder__thc_call__t outoforder;
    ping_pong_str3__thc_call__t str3;
    ping_pong_str4__thc_call__t str4;
    ping_pong_str5__thc_call__t str5;
    ping_pong_str6__thc_call__t str6;
};
struct ping_pong_thc_rpc_seq_x {
    ping_pong_testrpc__thc_call__t_x testrpc;
    ping_pong_testrpc2__thc_call__t_x testrpc2;
    ping_pong_outoforder__thc_call__t_x outoforder;
    ping_pong_str3__thc_call__t_x str3;
    ping_pong_str4__thc_call__t_x str4;
    ping_pong_str5__thc_call__t_x str5;
    ping_pong_str6__thc_call__t_x str6;
};
struct ping_pong_thc_rpc_fifo {
    ping_pong_testrpc__thc_call__t testrpc;
    ping_pong_testrpc2__thc_call__t testrpc2;
    ping_pong_outoforder__thc_call__t outoforder;
    ping_pong_str3__thc_call__t str3;
    ping_pong_str4__thc_call__t str4;
    ping_pong_str5__thc_call__t str5;
    ping_pong_str6__thc_call__t str6;
};
struct ping_pong_thc_rpc_fifo_x {
    ping_pong_testrpc__thc_call__t_x testrpc;
    ping_pong_testrpc2__thc_call__t_x testrpc2;
    ping_pong_outoforder__thc_call__t_x outoforder;
    ping_pong_str3__thc_call__t_x str3;
    ping_pong_str4__thc_call__t_x str4;
    ping_pong_str5__thc_call__t_x str5;
    ping_pong_str6__thc_call__t_x str6;
};
struct ping_pong_thc_rpc_ooo {
    ping_pong_outoforder__thc_ooo_call__t outoforder;
    ping_pong_str5__thc_ooo_call__t str5;
    ping_pong_str6__thc_ooo_call__t str6;
};
struct ping_pong_thc_rpc_ooo_x {
    ping_pong_outoforder__thc_ooo_call__t_x outoforder;
    ping_pong_str5__thc_ooo_call__t_x str5;
    ping_pong_str6__thc_ooo_call__t_x str6;
};

/*
 * Types for recv_any operations
 */

struct ping_pong_client_msg {
    enum ping_pong_msg_enum_t msg;
    union ping_pong_thc_arg_union args;
};
typedef struct ping_pong_client_msg ping_pong_client_msg_t;
typedef  errval_t (*ping_pong_recv_any__thc_client_t)(ping_pong_thc_client_binding_t *_thc_binding, struct ping_pong_client_msg *msg, struct ping_pong_client_selector ops);
typedef  errval_t (*ping_pong_recv_any__thc_client_t_x)(ping_pong_thc_client_binding_t *_thc_binding, struct ping_pong_client_msg *msg, struct ping_pong_client_selector ops);
struct ping_pong_service_msg {
    enum ping_pong_msg_enum_t msg;
    union ping_pong_thc_arg_union args;
};
typedef struct ping_pong_service_msg ping_pong_service_msg_t;
typedef  errval_t (*ping_pong_recv_any__thc_service_t)(ping_pong_thc_service_binding_t *_thc_binding, struct ping_pong_service_msg *msg, struct ping_pong_service_selector ops);
typedef  errval_t (*ping_pong_recv_any__thc_service_t_x)(ping_pong_thc_service_binding_t *_thc_binding, struct ping_pong_service_msg *msg, struct ping_pong_service_selector ops);

/*
 * Binding structures
 */

struct ping_pong_thc_client_binding_t {
    struct thc_per_binding_state_t thc_per_binding;
    struct ping_pong_thc_client_send_vtbl send;
    struct ping_pong_thc_client_send_vtbl_x send_x;
    struct ping_pong_thc_client_receive_vtbl recv;
    struct ping_pong_thc_client_receive_vtbl_x recv_x;
    ping_pong_recv_any__thc_client_t recv_any;
    ping_pong_recv_any__thc_client_t_x recv_any_x;
    struct ping_pong_thc_rpc_seq call_seq;
    struct ping_pong_thc_rpc_fifo call_fifo;
    struct ping_pong_thc_rpc_ooo call;
    struct ping_pong_thc_rpc_seq_x call_seq_x;
    struct ping_pong_thc_rpc_fifo_x call_fifo_x;
    struct ping_pong_thc_rpc_ooo_x call_x;
    thc_seq_t ooo_rpc_seq;
    struct thc_per_recv_t thc_per_recv[16];
    void *_c2s_st;
    void *_s2c_st;
};
struct ping_pong_thc_service_binding_t {
    struct thc_per_binding_state_t thc_per_binding;
    struct ping_pong_thc_service_send_vtbl send;
    struct ping_pong_thc_service_send_vtbl_x send_x;
    struct ping_pong_thc_service_receive_vtbl recv;
    struct ping_pong_thc_service_receive_vtbl_x recv_x;
    ping_pong_recv_any__thc_service_t recv_any;
    ping_pong_recv_any__thc_service_t_x recv_any_x;
    struct thc_per_recv_t thc_per_recv[17];
    void *_c2s_st;
    void *_s2c_st;
};

/*
 * Initialize a THC binding over an IDC binding
 * (defined in THC-stubs backend)
 */

extern  errval_t ping_pong_thc_init_client(ping_pong_thc_client_binding_t *thc, struct ping_pong_binding *idc_c2s, struct ping_pong_binding *idc_s2c);
extern  errval_t ping_pong_thc_init_service(ping_pong_thc_service_binding_t *thc, struct ping_pong_binding *idc_c2s, struct ping_pong_binding *idc_s2c);

/*
 * THC helper functions for establishing connections
 */
struct ping_pong_thc_export_info {
    thc_sem_t export_cb_done_sem;
    thc_sem_t connect_cb_done_sem;
    thc_sem_t accept_call_present_sem;
    thc_lock_t next_accept_lock;
    struct ping_pong_binding **b;
    thc_lock_t info_lock;
    errval_t err;
    const char *service_name;
    iref_t iref;
    iref_t *iref_ptr;
};
struct ping_pong_thc_connect_info {
    thc_sem_t bind_cb_done_sem;
    errval_t err;
    struct ping_pong_binding *b;
};
extern  errval_t ping_pong_thc_export(struct ping_pong_thc_export_info *info, const char *service_name, struct waitset *ws, idc_export_flags_t flags, iref_t *iref);
extern  errval_t ping_pong_thc_accept(struct ping_pong_thc_export_info *info, struct ping_pong_binding **b);
extern  errval_t ping_pong_thc_connect(iref_t iref, struct waitset *ws, idc_bind_flags_t flags, struct ping_pong_binding **b);
extern  errval_t ping_pong_thc_connect_by_name(const char *service_name, struct waitset *ws, idc_bind_flags_t flags, struct ping_pong_binding **b);
#endif // __ping_pong_THC_IF_H
