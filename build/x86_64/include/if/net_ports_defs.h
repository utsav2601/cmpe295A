#ifndef __net_ports_IF_H
#define __net_ports_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: net_ports
 * INTEFACE FILE: ../if/net_ports.if
 * INTERFACE DESCRIPTION: Interface for port management
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t net_ports_genpaddr_t;
typedef uint64_t net_ports_genvaddr_t;
typedef uint32_t net_ports_rsrcid_t;
typedef uint64_t net_ports_errval_t;
typedef uint64_t net_ports_cycles_t;
typedef uint32_t net_ports_iref_t;
typedef uint8_t net_ports_coreid_t;
typedef uint32_t net_ports_domainid_t;
typedef uint64_t net_ports_bufid_t;
typedef uint32_t net_ports_ipv4addr_t;
typedef uint64_t net_ports_qid_t;
typedef uint64_t net_ports_appid_t;
typedef enum net_ports_port_type_t {
    net_ports_PORT_TCP,
    net_ports_PORT_UDP
} net_ports_port_type_t;

/*
 * Forward declaration of binding type
 */
struct net_ports_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void net_ports_bind_continuation_fn(void *st, errval_t err, struct net_ports_binding *_binding);
typedef  bool net_ports_can_send_fn(struct net_ports_binding *_binding);
typedef  errval_t net_ports_register_send_fn(struct net_ports_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t net_ports_change_waitset_fn(struct net_ports_binding *_binding, struct waitset *ws);
typedef  errval_t net_ports_control_fn(struct net_ports_binding *_binding, idc_control_t control);
typedef  void net_ports_error_handler_fn(struct net_ports_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum net_ports_msg_enum {
    net_ports___dummy__msgnum = 0,
    net_ports___bind__msgnum = 1,
    net_ports___bind_reply__msgnum = 2,
    net_ports_get_ip_info_call__msgnum = 3,
    net_ports_get_ip_info_response__msgnum = 4,
    net_ports_get_mac_address_call__msgnum = 5,
    net_ports_get_mac_address_response__msgnum = 6,
    net_ports_get_port_call__msgnum = 7,
    net_ports_get_port_response__msgnum = 8,
    net_ports_bind_port_call__msgnum = 9,
    net_ports_bind_port_response__msgnum = 10,
    net_ports_close_port_call__msgnum = 11,
    net_ports_close_port_response__msgnum = 12
} net_ports_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t net_ports_get_ip_info_call__tx_method_fn(struct net_ports_binding *_binding, struct event_closure _continuation);
typedef  errval_t net_ports_get_ip_info_response__tx_method_fn(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_ipv4addr_t ip, net_ports_ipv4addr_t gw, net_ports_ipv4addr_t mask);
typedef  errval_t net_ports_get_mac_address_call__tx_method_fn(struct net_ports_binding *_binding, struct event_closure _continuation);
typedef  errval_t net_ports_get_mac_address_response__tx_method_fn(struct net_ports_binding *_binding, struct event_closure _continuation, uint64_t hwaddr);
typedef  errval_t net_ports_get_port_call__tx_method_fn(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_port_type_t type, net_ports_bufid_t buffer_id_rx, net_ports_bufid_t buffer_id_tx, net_ports_appid_t appid, net_ports_qid_t queueid);
typedef  errval_t net_ports_get_port_response__tx_method_fn(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_errval_t err, uint16_t port_no);
typedef  errval_t net_ports_bind_port_call__tx_method_fn(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_port_type_t type, uint16_t port_no, net_ports_bufid_t buffer_id_rx, net_ports_bufid_t buffer_id_tx, net_ports_appid_t appid, net_ports_qid_t queueid);
typedef  errval_t net_ports_bind_port_response__tx_method_fn(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_errval_t err);
typedef  errval_t net_ports_close_port_call__tx_method_fn(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_port_type_t type, uint16_t port_no, net_ports_appid_t appid, net_ports_qid_t queueid);
typedef  errval_t net_ports_close_port_response__tx_method_fn(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_errval_t err);

/*
 * Message type signatures (receive)
 */
typedef  void net_ports_get_ip_info_call__rx_method_fn(struct net_ports_binding *_binding);
typedef  void net_ports_get_ip_info_response__rx_method_fn(struct net_ports_binding *_binding, net_ports_ipv4addr_t ip, net_ports_ipv4addr_t gw, net_ports_ipv4addr_t mask);
typedef  void net_ports_get_mac_address_call__rx_method_fn(struct net_ports_binding *_binding);
typedef  void net_ports_get_mac_address_response__rx_method_fn(struct net_ports_binding *_binding, uint64_t hwaddr);
typedef  void net_ports_get_port_call__rx_method_fn(struct net_ports_binding *_binding, net_ports_port_type_t type, net_ports_bufid_t buffer_id_rx, net_ports_bufid_t buffer_id_tx, net_ports_appid_t appid, net_ports_qid_t queueid);
typedef  void net_ports_get_port_response__rx_method_fn(struct net_ports_binding *_binding, net_ports_errval_t err, uint16_t port_no);
typedef  void net_ports_bind_port_call__rx_method_fn(struct net_ports_binding *_binding, net_ports_port_type_t type, uint16_t port_no, net_ports_bufid_t buffer_id_rx, net_ports_bufid_t buffer_id_tx, net_ports_appid_t appid, net_ports_qid_t queueid);
typedef  void net_ports_bind_port_response__rx_method_fn(struct net_ports_binding *_binding, net_ports_errval_t err);
typedef  void net_ports_close_port_call__rx_method_fn(struct net_ports_binding *_binding, net_ports_port_type_t type, uint16_t port_no, net_ports_appid_t appid, net_ports_qid_t queueid);
typedef  void net_ports_close_port_response__rx_method_fn(struct net_ports_binding *_binding, net_ports_errval_t err);

/*
 * Struct type for holding the args for each msg
 */
struct net_ports_get_ip_info_response__args {
    net_ports_ipv4addr_t ip;
    net_ports_ipv4addr_t gw;
    net_ports_ipv4addr_t mask;
};
struct net_ports_get_mac_address_response__args {
    uint64_t hwaddr;
};
struct net_ports_get_port_call__args {
    net_ports_port_type_t type;
    net_ports_bufid_t buffer_id_rx;
    net_ports_bufid_t buffer_id_tx;
    net_ports_appid_t appid;
    net_ports_qid_t queueid;
};
struct net_ports_get_port_response__args {
    net_ports_errval_t err;
    uint16_t port_no;
};
struct net_ports_bind_port_call__args {
    net_ports_port_type_t type;
    uint16_t port_no;
    net_ports_bufid_t buffer_id_rx;
    net_ports_bufid_t buffer_id_tx;
    net_ports_appid_t appid;
    net_ports_qid_t queueid;
};
struct net_ports_bind_port_response__args {
    net_ports_errval_t err;
};
struct net_ports_close_port_call__args {
    net_ports_port_type_t type;
    uint16_t port_no;
    net_ports_appid_t appid;
    net_ports_qid_t queueid;
};
struct net_ports_close_port_response__args {
    net_ports_errval_t err;
};

/*
 * Union type for all message arguments
 */
union net_ports_arg_union {
    struct net_ports_get_ip_info_response__args get_ip_info_response;
    struct net_ports_get_mac_address_response__args get_mac_address_response;
    struct net_ports_get_port_call__args get_port_call;
    struct net_ports_get_port_response__args get_port_response;
    struct net_ports_bind_port_call__args bind_port_call;
    struct net_ports_bind_port_response__args bind_port_response;
    struct net_ports_close_port_call__args close_port_call;
    struct net_ports_close_port_response__args close_port_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct net_ports_tx_vtbl {
    net_ports_get_ip_info_call__tx_method_fn *get_ip_info_call;
    net_ports_get_ip_info_response__tx_method_fn *get_ip_info_response;
    net_ports_get_mac_address_call__tx_method_fn *get_mac_address_call;
    net_ports_get_mac_address_response__tx_method_fn *get_mac_address_response;
    net_ports_get_port_call__tx_method_fn *get_port_call;
    net_ports_get_port_response__tx_method_fn *get_port_response;
    net_ports_bind_port_call__tx_method_fn *bind_port_call;
    net_ports_bind_port_response__tx_method_fn *bind_port_response;
    net_ports_close_port_call__tx_method_fn *close_port_call;
    net_ports_close_port_response__tx_method_fn *close_port_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct net_ports_rx_vtbl {
    net_ports_get_ip_info_call__rx_method_fn *get_ip_info_call;
    net_ports_get_ip_info_response__rx_method_fn *get_ip_info_response;
    net_ports_get_mac_address_call__rx_method_fn *get_mac_address_call;
    net_ports_get_mac_address_response__rx_method_fn *get_mac_address_response;
    net_ports_get_port_call__rx_method_fn *get_port_call;
    net_ports_get_port_response__rx_method_fn *get_port_response;
    net_ports_bind_port_call__rx_method_fn *bind_port_call;
    net_ports_bind_port_response__rx_method_fn *bind_port_response;
    net_ports_close_port_call__rx_method_fn *close_port_call;
    net_ports_close_port_response__rx_method_fn *close_port_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t net_ports_connect_fn(void *st, struct net_ports_binding *binding);

/*
 * Export state struct
 */
struct net_ports_export {
    struct idc_export common;
    net_ports_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t net_ports_export(void *st, idc_export_callback_fn *export_cb, net_ports_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct net_ports_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t net_ports_accept(struct net_ports_frameinfo *_frameinfo, void *st, net_ports_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct net_ports_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    net_ports_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    net_ports_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    net_ports_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    net_ports_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    net_ports_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct net_ports_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct net_ports_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union net_ports_arg_union tx_union;
    union net_ports_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum net_ports_msg_enum tx_msgnum;
    enum net_ports_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    net_ports_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t net_ports_bind(iref_t i, net_ports_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t net_ports_connect(struct net_ports_frameinfo *_frameinfo, net_ports_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t net_ports_get_ip_info_call__tx(struct net_ports_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t net_ports_get_ip_info_call__tx(struct net_ports_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_ip_info_call)(_binding, _continuation));
}

static inline errval_t net_ports_get_ip_info_response__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_ipv4addr_t ip, net_ports_ipv4addr_t gw, net_ports_ipv4addr_t mask) __attribute__ ((always_inline));
static inline errval_t net_ports_get_ip_info_response__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_ipv4addr_t ip, net_ports_ipv4addr_t gw, net_ports_ipv4addr_t mask)
{
    return(((_binding->tx_vtbl).get_ip_info_response)(_binding, _continuation, ip, gw, mask));
}

static inline errval_t net_ports_get_mac_address_call__tx(struct net_ports_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t net_ports_get_mac_address_call__tx(struct net_ports_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_mac_address_call)(_binding, _continuation));
}

static inline errval_t net_ports_get_mac_address_response__tx(struct net_ports_binding *_binding, struct event_closure _continuation, uint64_t hwaddr) __attribute__ ((always_inline));
static inline errval_t net_ports_get_mac_address_response__tx(struct net_ports_binding *_binding, struct event_closure _continuation, uint64_t hwaddr)
{
    return(((_binding->tx_vtbl).get_mac_address_response)(_binding, _continuation, hwaddr));
}

static inline errval_t net_ports_get_port_call__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_port_type_t type, net_ports_bufid_t buffer_id_rx, net_ports_bufid_t buffer_id_tx, net_ports_appid_t appid, net_ports_qid_t queueid) __attribute__ ((always_inline));
static inline errval_t net_ports_get_port_call__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_port_type_t type, net_ports_bufid_t buffer_id_rx, net_ports_bufid_t buffer_id_tx, net_ports_appid_t appid, net_ports_qid_t queueid)
{
    return(((_binding->tx_vtbl).get_port_call)(_binding, _continuation, type, buffer_id_rx, buffer_id_tx, appid, queueid));
}

static inline errval_t net_ports_get_port_response__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_errval_t err, uint16_t port_no) __attribute__ ((always_inline));
static inline errval_t net_ports_get_port_response__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_errval_t err, uint16_t port_no)
{
    return(((_binding->tx_vtbl).get_port_response)(_binding, _continuation, err, port_no));
}

static inline errval_t net_ports_bind_port_call__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_port_type_t type, uint16_t port_no, net_ports_bufid_t buffer_id_rx, net_ports_bufid_t buffer_id_tx, net_ports_appid_t appid, net_ports_qid_t queueid) __attribute__ ((always_inline));
static inline errval_t net_ports_bind_port_call__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_port_type_t type, uint16_t port_no, net_ports_bufid_t buffer_id_rx, net_ports_bufid_t buffer_id_tx, net_ports_appid_t appid, net_ports_qid_t queueid)
{
    return(((_binding->tx_vtbl).bind_port_call)(_binding, _continuation, type, port_no, buffer_id_rx, buffer_id_tx, appid, queueid));
}

static inline errval_t net_ports_bind_port_response__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_errval_t err) __attribute__ ((always_inline));
static inline errval_t net_ports_bind_port_response__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_errval_t err)
{
    return(((_binding->tx_vtbl).bind_port_response)(_binding, _continuation, err));
}

static inline errval_t net_ports_close_port_call__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_port_type_t type, uint16_t port_no, net_ports_appid_t appid, net_ports_qid_t queueid) __attribute__ ((always_inline));
static inline errval_t net_ports_close_port_call__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_port_type_t type, uint16_t port_no, net_ports_appid_t appid, net_ports_qid_t queueid)
{
    return(((_binding->tx_vtbl).close_port_call)(_binding, _continuation, type, port_no, appid, queueid));
}

static inline errval_t net_ports_close_port_response__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_errval_t err) __attribute__ ((always_inline));
static inline errval_t net_ports_close_port_response__tx(struct net_ports_binding *_binding, struct event_closure _continuation, net_ports_errval_t err)
{
    return(((_binding->tx_vtbl).close_port_response)(_binding, _continuation, err));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/net_ports_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/net_ports_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/net_ports_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/net_ports_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __net_ports_IF_H
