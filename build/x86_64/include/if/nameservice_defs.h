#ifndef __nameservice_IF_H
#define __nameservice_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: nameservice
 * INTEFACE FILE: ../if/nameservice.if
 * INTERFACE DESCRIPTION: Name server (chips) interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t nameservice_genpaddr_t;
typedef uint64_t nameservice_genvaddr_t;
typedef uint32_t nameservice_rsrcid_t;
typedef uint64_t nameservice_errval_t;
typedef uint64_t nameservice_cycles_t;
typedef uint32_t nameservice_iref_t;
typedef uint8_t nameservice_coreid_t;
typedef uint32_t nameservice_domainid_t;
typedef uint64_t nameservice_reghandle_t;
typedef uint64_t nameservice_srvref_t;

/*
 * Forward declaration of binding type
 */
struct nameservice_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void nameservice_bind_continuation_fn(void *st, errval_t err, struct nameservice_binding *_binding);
typedef  bool nameservice_can_send_fn(struct nameservice_binding *_binding);
typedef  errval_t nameservice_register_send_fn(struct nameservice_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t nameservice_change_waitset_fn(struct nameservice_binding *_binding, struct waitset *ws);
typedef  errval_t nameservice_control_fn(struct nameservice_binding *_binding, idc_control_t control);
typedef  void nameservice_error_handler_fn(struct nameservice_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum nameservice_msg_enum {
    nameservice___dummy__msgnum = 0,
    nameservice___bind__msgnum = 1,
    nameservice___bind_reply__msgnum = 2,
    nameservice_register_service_call__msgnum = 3,
    nameservice_register_service_response__msgnum = 4,
    nameservice_unregister_service_call__msgnum = 5,
    nameservice_unregister_service_response__msgnum = 6,
    nameservice_get_service_reference_call__msgnum = 7,
    nameservice_get_service_reference_response__msgnum = 8,
    nameservice_wait_for_service_reference_call__msgnum = 9,
    nameservice_wait_for_service_reference_response__msgnum = 10,
    nameservice_get_service_call__msgnum = 11,
    nameservice_get_service_response__msgnum = 12,
    nameservice_get_cap_call__msgnum = 13,
    nameservice_get_cap_response__msgnum = 14,
    nameservice_put_cap_call__msgnum = 15,
    nameservice_put_cap_response__msgnum = 16,
    nameservice_remove_cap_call__msgnum = 17,
    nameservice_remove_cap_response__msgnum = 18,
    nameservice_sem_new_call__msgnum = 19,
    nameservice_sem_new_response__msgnum = 20,
    nameservice_sem_post_call__msgnum = 21,
    nameservice_sem_post_response__msgnum = 22,
    nameservice_sem_wait_call__msgnum = 23,
    nameservice_sem_wait_response__msgnum = 24,
    nameservice_sem_trywait_call__msgnum = 25,
    nameservice_sem_trywait_response__msgnum = 26
} nameservice_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t nameservice_register_service_call__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, iref_t iref, const char *iface);
typedef  errval_t nameservice_register_service_response__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_reghandle_t reghandle);
typedef  errval_t nameservice_unregister_service_call__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_reghandle_t reghandle);
typedef  errval_t nameservice_unregister_service_response__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation);
typedef  errval_t nameservice_get_service_reference_call__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, const char *iface);
typedef  errval_t nameservice_get_service_reference_response__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_srvref_t ref);
typedef  errval_t nameservice_wait_for_service_reference_call__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, const char *iface);
typedef  errval_t nameservice_wait_for_service_reference_response__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_srvref_t ref);
typedef  errval_t nameservice_get_service_call__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_srvref_t srvref);
typedef  errval_t nameservice_get_service_response__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, iref_t iref);
typedef  errval_t nameservice_get_cap_call__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, const char *key);
typedef  errval_t nameservice_get_cap_response__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, struct capref retcap, nameservice_errval_t reterr);
typedef  errval_t nameservice_put_cap_call__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, const char *key, struct capref storecap);
typedef  errval_t nameservice_put_cap_response__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_errval_t reterr);
typedef  errval_t nameservice_remove_cap_call__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, const char *key);
typedef  errval_t nameservice_remove_cap_response__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_errval_t reterr);
typedef  errval_t nameservice_sem_new_call__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t value);
typedef  errval_t nameservice_sem_new_response__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t sem, nameservice_errval_t reterr);
typedef  errval_t nameservice_sem_post_call__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t sem);
typedef  errval_t nameservice_sem_post_response__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation);
typedef  errval_t nameservice_sem_wait_call__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t sem);
typedef  errval_t nameservice_sem_wait_response__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation);
typedef  errval_t nameservice_sem_trywait_call__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t sem);
typedef  errval_t nameservice_sem_trywait_response__tx_method_fn(struct nameservice_binding *_binding, struct event_closure _continuation, bool success);

/*
 * Message type signatures (receive)
 */
typedef  void nameservice_register_service_call__rx_method_fn(struct nameservice_binding *_binding, iref_t iref, char *iface);
typedef  void nameservice_register_service_response__rx_method_fn(struct nameservice_binding *_binding, nameservice_reghandle_t reghandle);
typedef  void nameservice_unregister_service_call__rx_method_fn(struct nameservice_binding *_binding, nameservice_reghandle_t reghandle);
typedef  void nameservice_unregister_service_response__rx_method_fn(struct nameservice_binding *_binding);
typedef  void nameservice_get_service_reference_call__rx_method_fn(struct nameservice_binding *_binding, char *iface);
typedef  void nameservice_get_service_reference_response__rx_method_fn(struct nameservice_binding *_binding, nameservice_srvref_t ref);
typedef  void nameservice_wait_for_service_reference_call__rx_method_fn(struct nameservice_binding *_binding, char *iface);
typedef  void nameservice_wait_for_service_reference_response__rx_method_fn(struct nameservice_binding *_binding, nameservice_srvref_t ref);
typedef  void nameservice_get_service_call__rx_method_fn(struct nameservice_binding *_binding, nameservice_srvref_t srvref);
typedef  void nameservice_get_service_response__rx_method_fn(struct nameservice_binding *_binding, iref_t iref);
typedef  void nameservice_get_cap_call__rx_method_fn(struct nameservice_binding *_binding, char *key);
typedef  void nameservice_get_cap_response__rx_method_fn(struct nameservice_binding *_binding, struct capref retcap, nameservice_errval_t reterr);
typedef  void nameservice_put_cap_call__rx_method_fn(struct nameservice_binding *_binding, char *key, struct capref storecap);
typedef  void nameservice_put_cap_response__rx_method_fn(struct nameservice_binding *_binding, nameservice_errval_t reterr);
typedef  void nameservice_remove_cap_call__rx_method_fn(struct nameservice_binding *_binding, char *key);
typedef  void nameservice_remove_cap_response__rx_method_fn(struct nameservice_binding *_binding, nameservice_errval_t reterr);
typedef  void nameservice_sem_new_call__rx_method_fn(struct nameservice_binding *_binding, uint32_t value);
typedef  void nameservice_sem_new_response__rx_method_fn(struct nameservice_binding *_binding, uint32_t sem, nameservice_errval_t reterr);
typedef  void nameservice_sem_post_call__rx_method_fn(struct nameservice_binding *_binding, uint32_t sem);
typedef  void nameservice_sem_post_response__rx_method_fn(struct nameservice_binding *_binding);
typedef  void nameservice_sem_wait_call__rx_method_fn(struct nameservice_binding *_binding, uint32_t sem);
typedef  void nameservice_sem_wait_response__rx_method_fn(struct nameservice_binding *_binding);
typedef  void nameservice_sem_trywait_call__rx_method_fn(struct nameservice_binding *_binding, uint32_t sem);
typedef  void nameservice_sem_trywait_response__rx_method_fn(struct nameservice_binding *_binding, bool success);

/*
 * Struct type for holding the args for each msg
 */
struct nameservice_register_service_call__args {
    iref_t iref;
    char *iface;
};
struct nameservice_register_service_response__args {
    nameservice_reghandle_t reghandle;
};
struct nameservice_unregister_service_call__args {
    nameservice_reghandle_t reghandle;
};
struct nameservice_get_service_reference_call__args {
    char *iface;
};
struct nameservice_get_service_reference_response__args {
    nameservice_srvref_t ref;
};
struct nameservice_wait_for_service_reference_call__args {
    char *iface;
};
struct nameservice_wait_for_service_reference_response__args {
    nameservice_srvref_t ref;
};
struct nameservice_get_service_call__args {
    nameservice_srvref_t srvref;
};
struct nameservice_get_service_response__args {
    iref_t iref;
};
struct nameservice_get_cap_call__args {
    char *key;
};
struct nameservice_get_cap_response__args {
    struct capref retcap;
    nameservice_errval_t reterr;
};
struct nameservice_put_cap_call__args {
    char *key;
    struct capref storecap;
};
struct nameservice_put_cap_response__args {
    nameservice_errval_t reterr;
};
struct nameservice_remove_cap_call__args {
    char *key;
};
struct nameservice_remove_cap_response__args {
    nameservice_errval_t reterr;
};
struct nameservice_sem_new_call__args {
    uint32_t value;
};
struct nameservice_sem_new_response__args {
    uint32_t sem;
    nameservice_errval_t reterr;
};
struct nameservice_sem_post_call__args {
    uint32_t sem;
};
struct nameservice_sem_wait_call__args {
    uint32_t sem;
};
struct nameservice_sem_trywait_call__args {
    uint32_t sem;
};
struct nameservice_sem_trywait_response__args {
    bool success;
};

/*
 * Union type for all message arguments
 */
union nameservice_arg_union {
    struct nameservice_register_service_call__args register_service_call;
    struct nameservice_register_service_response__args register_service_response;
    struct nameservice_unregister_service_call__args unregister_service_call;
    struct nameservice_get_service_reference_call__args get_service_reference_call;
    struct nameservice_get_service_reference_response__args get_service_reference_response;
    struct nameservice_wait_for_service_reference_call__args wait_for_service_reference_call;
    struct nameservice_wait_for_service_reference_response__args wait_for_service_reference_response;
    struct nameservice_get_service_call__args get_service_call;
    struct nameservice_get_service_response__args get_service_response;
    struct nameservice_get_cap_call__args get_cap_call;
    struct nameservice_get_cap_response__args get_cap_response;
    struct nameservice_put_cap_call__args put_cap_call;
    struct nameservice_put_cap_response__args put_cap_response;
    struct nameservice_remove_cap_call__args remove_cap_call;
    struct nameservice_remove_cap_response__args remove_cap_response;
    struct nameservice_sem_new_call__args sem_new_call;
    struct nameservice_sem_new_response__args sem_new_response;
    struct nameservice_sem_post_call__args sem_post_call;
    struct nameservice_sem_wait_call__args sem_wait_call;
    struct nameservice_sem_trywait_call__args sem_trywait_call;
    struct nameservice_sem_trywait_response__args sem_trywait_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct nameservice_tx_vtbl {
    nameservice_register_service_call__tx_method_fn *register_service_call;
    nameservice_register_service_response__tx_method_fn *register_service_response;
    nameservice_unregister_service_call__tx_method_fn *unregister_service_call;
    nameservice_unregister_service_response__tx_method_fn *unregister_service_response;
    nameservice_get_service_reference_call__tx_method_fn *get_service_reference_call;
    nameservice_get_service_reference_response__tx_method_fn *get_service_reference_response;
    nameservice_wait_for_service_reference_call__tx_method_fn *wait_for_service_reference_call;
    nameservice_wait_for_service_reference_response__tx_method_fn *wait_for_service_reference_response;
    nameservice_get_service_call__tx_method_fn *get_service_call;
    nameservice_get_service_response__tx_method_fn *get_service_response;
    nameservice_get_cap_call__tx_method_fn *get_cap_call;
    nameservice_get_cap_response__tx_method_fn *get_cap_response;
    nameservice_put_cap_call__tx_method_fn *put_cap_call;
    nameservice_put_cap_response__tx_method_fn *put_cap_response;
    nameservice_remove_cap_call__tx_method_fn *remove_cap_call;
    nameservice_remove_cap_response__tx_method_fn *remove_cap_response;
    nameservice_sem_new_call__tx_method_fn *sem_new_call;
    nameservice_sem_new_response__tx_method_fn *sem_new_response;
    nameservice_sem_post_call__tx_method_fn *sem_post_call;
    nameservice_sem_post_response__tx_method_fn *sem_post_response;
    nameservice_sem_wait_call__tx_method_fn *sem_wait_call;
    nameservice_sem_wait_response__tx_method_fn *sem_wait_response;
    nameservice_sem_trywait_call__tx_method_fn *sem_trywait_call;
    nameservice_sem_trywait_response__tx_method_fn *sem_trywait_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct nameservice_rx_vtbl {
    nameservice_register_service_call__rx_method_fn *register_service_call;
    nameservice_register_service_response__rx_method_fn *register_service_response;
    nameservice_unregister_service_call__rx_method_fn *unregister_service_call;
    nameservice_unregister_service_response__rx_method_fn *unregister_service_response;
    nameservice_get_service_reference_call__rx_method_fn *get_service_reference_call;
    nameservice_get_service_reference_response__rx_method_fn *get_service_reference_response;
    nameservice_wait_for_service_reference_call__rx_method_fn *wait_for_service_reference_call;
    nameservice_wait_for_service_reference_response__rx_method_fn *wait_for_service_reference_response;
    nameservice_get_service_call__rx_method_fn *get_service_call;
    nameservice_get_service_response__rx_method_fn *get_service_response;
    nameservice_get_cap_call__rx_method_fn *get_cap_call;
    nameservice_get_cap_response__rx_method_fn *get_cap_response;
    nameservice_put_cap_call__rx_method_fn *put_cap_call;
    nameservice_put_cap_response__rx_method_fn *put_cap_response;
    nameservice_remove_cap_call__rx_method_fn *remove_cap_call;
    nameservice_remove_cap_response__rx_method_fn *remove_cap_response;
    nameservice_sem_new_call__rx_method_fn *sem_new_call;
    nameservice_sem_new_response__rx_method_fn *sem_new_response;
    nameservice_sem_post_call__rx_method_fn *sem_post_call;
    nameservice_sem_post_response__rx_method_fn *sem_post_response;
    nameservice_sem_wait_call__rx_method_fn *sem_wait_call;
    nameservice_sem_wait_response__rx_method_fn *sem_wait_response;
    nameservice_sem_trywait_call__rx_method_fn *sem_trywait_call;
    nameservice_sem_trywait_response__rx_method_fn *sem_trywait_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t nameservice_connect_fn(void *st, struct nameservice_binding *binding);

/*
 * Export state struct
 */
struct nameservice_export {
    struct idc_export common;
    nameservice_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t nameservice_export(void *st, idc_export_callback_fn *export_cb, nameservice_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct nameservice_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t nameservice_accept(struct nameservice_frameinfo *_frameinfo, void *st, nameservice_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct nameservice_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    nameservice_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    nameservice_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    nameservice_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    nameservice_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    nameservice_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct nameservice_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct nameservice_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union nameservice_arg_union tx_union;
    union nameservice_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum nameservice_msg_enum tx_msgnum;
    enum nameservice_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    nameservice_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t nameservice_bind(iref_t i, nameservice_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t nameservice_connect(struct nameservice_frameinfo *_frameinfo, nameservice_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t nameservice_register_service_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, iref_t iref, const char *iface) __attribute__ ((always_inline));
static inline errval_t nameservice_register_service_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, iref_t iref, const char *iface)
{
    return(((_binding->tx_vtbl).register_service_call)(_binding, _continuation, iref, iface));
}

static inline errval_t nameservice_register_service_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_reghandle_t reghandle) __attribute__ ((always_inline));
static inline errval_t nameservice_register_service_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_reghandle_t reghandle)
{
    return(((_binding->tx_vtbl).register_service_response)(_binding, _continuation, reghandle));
}

static inline errval_t nameservice_unregister_service_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_reghandle_t reghandle) __attribute__ ((always_inline));
static inline errval_t nameservice_unregister_service_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_reghandle_t reghandle)
{
    return(((_binding->tx_vtbl).unregister_service_call)(_binding, _continuation, reghandle));
}

static inline errval_t nameservice_unregister_service_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t nameservice_unregister_service_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).unregister_service_response)(_binding, _continuation));
}

static inline errval_t nameservice_get_service_reference_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, const char *iface) __attribute__ ((always_inline));
static inline errval_t nameservice_get_service_reference_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, const char *iface)
{
    return(((_binding->tx_vtbl).get_service_reference_call)(_binding, _continuation, iface));
}

static inline errval_t nameservice_get_service_reference_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_srvref_t ref) __attribute__ ((always_inline));
static inline errval_t nameservice_get_service_reference_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_srvref_t ref)
{
    return(((_binding->tx_vtbl).get_service_reference_response)(_binding, _continuation, ref));
}

static inline errval_t nameservice_wait_for_service_reference_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, const char *iface) __attribute__ ((always_inline));
static inline errval_t nameservice_wait_for_service_reference_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, const char *iface)
{
    return(((_binding->tx_vtbl).wait_for_service_reference_call)(_binding, _continuation, iface));
}

static inline errval_t nameservice_wait_for_service_reference_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_srvref_t ref) __attribute__ ((always_inline));
static inline errval_t nameservice_wait_for_service_reference_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_srvref_t ref)
{
    return(((_binding->tx_vtbl).wait_for_service_reference_response)(_binding, _continuation, ref));
}

static inline errval_t nameservice_get_service_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_srvref_t srvref) __attribute__ ((always_inline));
static inline errval_t nameservice_get_service_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_srvref_t srvref)
{
    return(((_binding->tx_vtbl).get_service_call)(_binding, _continuation, srvref));
}

static inline errval_t nameservice_get_service_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, iref_t iref) __attribute__ ((always_inline));
static inline errval_t nameservice_get_service_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, iref_t iref)
{
    return(((_binding->tx_vtbl).get_service_response)(_binding, _continuation, iref));
}

static inline errval_t nameservice_get_cap_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, const char *key) __attribute__ ((always_inline));
static inline errval_t nameservice_get_cap_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, const char *key)
{
    return(((_binding->tx_vtbl).get_cap_call)(_binding, _continuation, key));
}

static inline errval_t nameservice_get_cap_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, struct capref retcap, nameservice_errval_t reterr) __attribute__ ((always_inline));
static inline errval_t nameservice_get_cap_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, struct capref retcap, nameservice_errval_t reterr)
{
    return(((_binding->tx_vtbl).get_cap_response)(_binding, _continuation, retcap, reterr));
}

static inline errval_t nameservice_put_cap_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, const char *key, struct capref storecap) __attribute__ ((always_inline));
static inline errval_t nameservice_put_cap_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, const char *key, struct capref storecap)
{
    return(((_binding->tx_vtbl).put_cap_call)(_binding, _continuation, key, storecap));
}

static inline errval_t nameservice_put_cap_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_errval_t reterr) __attribute__ ((always_inline));
static inline errval_t nameservice_put_cap_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_errval_t reterr)
{
    return(((_binding->tx_vtbl).put_cap_response)(_binding, _continuation, reterr));
}

static inline errval_t nameservice_remove_cap_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, const char *key) __attribute__ ((always_inline));
static inline errval_t nameservice_remove_cap_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, const char *key)
{
    return(((_binding->tx_vtbl).remove_cap_call)(_binding, _continuation, key));
}

static inline errval_t nameservice_remove_cap_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_errval_t reterr) __attribute__ ((always_inline));
static inline errval_t nameservice_remove_cap_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, nameservice_errval_t reterr)
{
    return(((_binding->tx_vtbl).remove_cap_response)(_binding, _continuation, reterr));
}

static inline errval_t nameservice_sem_new_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t value) __attribute__ ((always_inline));
static inline errval_t nameservice_sem_new_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t value)
{
    return(((_binding->tx_vtbl).sem_new_call)(_binding, _continuation, value));
}

static inline errval_t nameservice_sem_new_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t sem, nameservice_errval_t reterr) __attribute__ ((always_inline));
static inline errval_t nameservice_sem_new_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t sem, nameservice_errval_t reterr)
{
    return(((_binding->tx_vtbl).sem_new_response)(_binding, _continuation, sem, reterr));
}

static inline errval_t nameservice_sem_post_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t sem) __attribute__ ((always_inline));
static inline errval_t nameservice_sem_post_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t sem)
{
    return(((_binding->tx_vtbl).sem_post_call)(_binding, _continuation, sem));
}

static inline errval_t nameservice_sem_post_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t nameservice_sem_post_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).sem_post_response)(_binding, _continuation));
}

static inline errval_t nameservice_sem_wait_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t sem) __attribute__ ((always_inline));
static inline errval_t nameservice_sem_wait_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t sem)
{
    return(((_binding->tx_vtbl).sem_wait_call)(_binding, _continuation, sem));
}

static inline errval_t nameservice_sem_wait_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t nameservice_sem_wait_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).sem_wait_response)(_binding, _continuation));
}

static inline errval_t nameservice_sem_trywait_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t sem) __attribute__ ((always_inline));
static inline errval_t nameservice_sem_trywait_call__tx(struct nameservice_binding *_binding, struct event_closure _continuation, uint32_t sem)
{
    return(((_binding->tx_vtbl).sem_trywait_call)(_binding, _continuation, sem));
}

static inline errval_t nameservice_sem_trywait_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, bool success) __attribute__ ((always_inline));
static inline errval_t nameservice_sem_trywait_response__tx(struct nameservice_binding *_binding, struct event_closure _continuation, bool success)
{
    return(((_binding->tx_vtbl).sem_trywait_response)(_binding, _continuation, success));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/nameservice_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/nameservice_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/nameservice_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/nameservice_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __nameservice_IF_H
