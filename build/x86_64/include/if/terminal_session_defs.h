#ifndef __terminal_session_IF_H
#define __terminal_session_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: terminal_session
 * INTEFACE FILE: ../if/terminal_session.if
 * INTERFACE DESCRIPTION: Terminal Session Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t terminal_session_genpaddr_t;
typedef uint64_t terminal_session_genvaddr_t;
typedef uint32_t terminal_session_rsrcid_t;
typedef uint64_t terminal_session_errval_t;
typedef uint64_t terminal_session_cycles_t;
typedef uint32_t terminal_session_iref_t;
typedef uint8_t terminal_session_coreid_t;
typedef uint32_t terminal_session_domainid_t;

/*
 * Forward declaration of binding type
 */
struct terminal_session_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void terminal_session_bind_continuation_fn(void *st, errval_t err, struct terminal_session_binding *_binding);
typedef  bool terminal_session_can_send_fn(struct terminal_session_binding *_binding);
typedef  errval_t terminal_session_register_send_fn(struct terminal_session_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t terminal_session_change_waitset_fn(struct terminal_session_binding *_binding, struct waitset *ws);
typedef  errval_t terminal_session_control_fn(struct terminal_session_binding *_binding, idc_control_t control);
typedef  void terminal_session_error_handler_fn(struct terminal_session_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum terminal_session_msg_enum {
    terminal_session___dummy__msgnum = 0,
    terminal_session___bind__msgnum = 1,
    terminal_session___bind_reply__msgnum = 2,
    terminal_session_session_associate_with_terminal_call__msgnum = 3,
    terminal_session_session_associate_with_terminal_response__msgnum = 4
} terminal_session_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t terminal_session_session_associate_with_terminal_call__tx_method_fn(struct terminal_session_binding *_binding, struct event_closure _continuation, struct capref session_id);
typedef  errval_t terminal_session_session_associate_with_terminal_response__tx_method_fn(struct terminal_session_binding *_binding, struct event_closure _continuation, iref_t in_iref, iref_t out_iref, iref_t conf_iref, terminal_session_errval_t err);

/*
 * Message type signatures (receive)
 */
typedef  void terminal_session_session_associate_with_terminal_call__rx_method_fn(struct terminal_session_binding *_binding, struct capref session_id);
typedef  void terminal_session_session_associate_with_terminal_response__rx_method_fn(struct terminal_session_binding *_binding, iref_t in_iref, iref_t out_iref, iref_t conf_iref, terminal_session_errval_t err);

/*
 * Struct type for holding the args for each msg
 */
struct terminal_session_session_associate_with_terminal_call__args {
    struct capref session_id;
};
struct terminal_session_session_associate_with_terminal_response__args {
    iref_t in_iref;
    iref_t out_iref;
    iref_t conf_iref;
    terminal_session_errval_t err;
};

/*
 * Union type for all message arguments
 */
union terminal_session_arg_union {
    struct terminal_session_session_associate_with_terminal_call__args session_associate_with_terminal_call;
    struct terminal_session_session_associate_with_terminal_response__args session_associate_with_terminal_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct terminal_session_tx_vtbl {
    terminal_session_session_associate_with_terminal_call__tx_method_fn *session_associate_with_terminal_call;
    terminal_session_session_associate_with_terminal_response__tx_method_fn *session_associate_with_terminal_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct terminal_session_rx_vtbl {
    terminal_session_session_associate_with_terminal_call__rx_method_fn *session_associate_with_terminal_call;
    terminal_session_session_associate_with_terminal_response__rx_method_fn *session_associate_with_terminal_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t terminal_session_connect_fn(void *st, struct terminal_session_binding *binding);

/*
 * Export state struct
 */
struct terminal_session_export {
    struct idc_export common;
    terminal_session_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t terminal_session_export(void *st, idc_export_callback_fn *export_cb, terminal_session_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct terminal_session_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t terminal_session_accept(struct terminal_session_frameinfo *_frameinfo, void *st, terminal_session_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct terminal_session_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    terminal_session_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    terminal_session_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    terminal_session_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    terminal_session_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    terminal_session_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct terminal_session_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct terminal_session_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union terminal_session_arg_union tx_union;
    union terminal_session_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum terminal_session_msg_enum tx_msgnum;
    enum terminal_session_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    terminal_session_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t terminal_session_bind(iref_t i, terminal_session_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t terminal_session_connect(struct terminal_session_frameinfo *_frameinfo, terminal_session_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t terminal_session_session_associate_with_terminal_call__tx(struct terminal_session_binding *_binding, struct event_closure _continuation, struct capref session_id) __attribute__ ((always_inline));
static inline errval_t terminal_session_session_associate_with_terminal_call__tx(struct terminal_session_binding *_binding, struct event_closure _continuation, struct capref session_id)
{
    return(((_binding->tx_vtbl).session_associate_with_terminal_call)(_binding, _continuation, session_id));
}

static inline errval_t terminal_session_session_associate_with_terminal_response__tx(struct terminal_session_binding *_binding, struct event_closure _continuation, iref_t in_iref, iref_t out_iref, iref_t conf_iref, terminal_session_errval_t err) __attribute__ ((always_inline));
static inline errval_t terminal_session_session_associate_with_terminal_response__tx(struct terminal_session_binding *_binding, struct event_closure _continuation, iref_t in_iref, iref_t out_iref, iref_t conf_iref, terminal_session_errval_t err)
{
    return(((_binding->tx_vtbl).session_associate_with_terminal_response)(_binding, _continuation, in_iref, out_iref, conf_iref, err));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/terminal_session_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/terminal_session_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/terminal_session_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/terminal_session_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __terminal_session_IF_H
