#ifndef __octopus_RPC_CLIENT_H
#define __octopus_RPC_CLIENT_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: octopus
 * INTEFACE FILE: ../if/octopus.if
 * INTERFACE DESCRIPTION: octopus RPC Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

/*
 * RPC client
 */

#include <if/octopus_defs.h>

/*
 * Forward declaration of binding type
 */
struct octopus_rpc_client;

/*
 * Function signatures
 */
typedef  errval_t octopus_get_identifier__rpc_method_fn(struct octopus_rpc_client *_rpc, uint64_t *id);
typedef  errval_t octopus_identify__rpc_method_fn(struct octopus_rpc_client *_rpc, uint64_t id, octopus_binding_type_t type);
typedef  errval_t octopus_get_names__rpc_method_fn(struct octopus_rpc_client *_rpc, const char *query, octopus_trigger_t t, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t octopus_get__rpc_method_fn(struct octopus_rpc_client *_rpc, const char *query, octopus_trigger_t t, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t octopus_set__rpc_method_fn(struct octopus_rpc_client *_rpc, const char *query, uint64_t mode, octopus_trigger_t t, bool get, char **record, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t octopus_get_with_idcap__rpc_method_fn(struct octopus_rpc_client *_rpc, struct capref idcap, octopus_trigger_t t, char **output, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t octopus_set_with_idcap__rpc_method_fn(struct octopus_rpc_client *_rpc, struct capref idcap, const char *attributes, uint64_t mode, octopus_trigger_t t, bool get, char **record, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t octopus_del__rpc_method_fn(struct octopus_rpc_client *_rpc, const char *query, octopus_trigger_t t, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t octopus_exists__rpc_method_fn(struct octopus_rpc_client *_rpc, const char *query, octopus_trigger_t t, octopus_trigger_id_t *tid, octopus_errval_t *error_code);
typedef  errval_t octopus_wait_for__rpc_method_fn(struct octopus_rpc_client *_rpc, const char *query, char **record, octopus_errval_t *error_code);
typedef  errval_t octopus_remove_trigger__rpc_method_fn(struct octopus_rpc_client *_rpc, uint64_t id, octopus_errval_t *error_code);
typedef  errval_t octopus_subscribe__rpc_method_fn(struct octopus_rpc_client *_rpc, const char *query, uint64_t trigger_fn, uint64_t state, uint64_t *id, octopus_errval_t *error_code);
typedef  errval_t octopus_unsubscribe__rpc_method_fn(struct octopus_rpc_client *_rpc, uint64_t id, octopus_errval_t *error_code);
typedef  errval_t octopus_publish__rpc_method_fn(struct octopus_rpc_client *_rpc, const char *record, octopus_errval_t *error_code);
typedef  errval_t octopus_get_cap__rpc_method_fn(struct octopus_rpc_client *_rpc, const char *key, struct capref *retcap, octopus_errval_t *reterr);
typedef  errval_t octopus_put_cap__rpc_method_fn(struct octopus_rpc_client *_rpc, const char *key, struct capref storecap, octopus_errval_t *reterr);
typedef  errval_t octopus_remove_cap__rpc_method_fn(struct octopus_rpc_client *_rpc, const char *key, octopus_errval_t *reterr);

/*
 * VTable struct definition for the interface
 */
struct octopus_rpc_vtbl {
    octopus_get_identifier__rpc_method_fn *get_identifier;
    octopus_identify__rpc_method_fn *identify;
    octopus_get_names__rpc_method_fn *get_names;
    octopus_get__rpc_method_fn *get;
    octopus_set__rpc_method_fn *set;
    octopus_get_with_idcap__rpc_method_fn *get_with_idcap;
    octopus_set_with_idcap__rpc_method_fn *set_with_idcap;
    octopus_del__rpc_method_fn *del;
    octopus_exists__rpc_method_fn *exists;
    octopus_wait_for__rpc_method_fn *wait_for;
    octopus_remove_trigger__rpc_method_fn *remove_trigger;
    octopus_subscribe__rpc_method_fn *subscribe;
    octopus_unsubscribe__rpc_method_fn *unsubscribe;
    octopus_publish__rpc_method_fn *publish;
    octopus_get_cap__rpc_method_fn *get_cap;
    octopus_put_cap__rpc_method_fn *put_cap;
    octopus_remove_cap__rpc_method_fn *remove_cap;
};

/*
 * The Binding structure
 */
struct octopus_rpc_client {
    struct octopus_binding *b;
    struct octopus_rpc_vtbl vtbl;
    bool rpc_in_progress;
    bool reply_present;
    errval_t async_error;
    struct waitset rpc_waitset;
    struct waitset_chanstate dummy_chanstate;
};

/*
 * Function to initialise an RPC client
 */
extern  errval_t octopus_rpc_client_init(struct octopus_rpc_client *rpc, struct octopus_binding *binding);

#endif // __octopus_RPC_CLIENT_H
