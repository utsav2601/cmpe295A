#ifndef __octopus_IF_H
#define __octopus_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: octopus
 * INTEFACE FILE: ../if/octopus.if
 * INTERFACE DESCRIPTION: octopus RPC Interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t octopus_genpaddr_t;
typedef uint64_t octopus_genvaddr_t;
typedef uint32_t octopus_rsrcid_t;
typedef uint64_t octopus_errval_t;
typedef uint64_t octopus_cycles_t;
typedef uint32_t octopus_iref_t;
typedef uint8_t octopus_coreid_t;
typedef uint32_t octopus_domainid_t;
typedef uint64_t octopus_mode_t;
typedef uint64_t octopus_trigger_id_t;
typedef enum octopus_binding_type_t {
    octopus_BINDING_RPC,
    octopus_BINDING_EVENT
} octopus_binding_type_t;
struct _octopus_trigger__struct {
    octopus_errval_t in_case;
    octopus_binding_type_t send_to;
    octopus_mode_t m;
    uint64_t trigger;
    uint64_t st;
};
typedef struct _octopus_trigger__struct octopus_trigger_t;

/*
 * Forward declaration of binding type
 */
struct octopus_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void octopus_bind_continuation_fn(void *st, errval_t err, struct octopus_binding *_binding);
typedef  bool octopus_can_send_fn(struct octopus_binding *_binding);
typedef  errval_t octopus_register_send_fn(struct octopus_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t octopus_change_waitset_fn(struct octopus_binding *_binding, struct waitset *ws);
typedef  errval_t octopus_control_fn(struct octopus_binding *_binding, idc_control_t control);
typedef  void octopus_error_handler_fn(struct octopus_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum octopus_msg_enum {
    octopus___dummy__msgnum = 0,
    octopus___bind__msgnum = 1,
    octopus___bind_reply__msgnum = 2,
    octopus_get_identifier_call__msgnum = 3,
    octopus_get_identifier_response__msgnum = 4,
    octopus_identify_call__msgnum = 5,
    octopus_identify_response__msgnum = 6,
    octopus_get_names_call__msgnum = 7,
    octopus_get_names_response__msgnum = 8,
    octopus_get_call__msgnum = 9,
    octopus_get_response__msgnum = 10,
    octopus_set_call__msgnum = 11,
    octopus_set_response__msgnum = 12,
    octopus_get_with_idcap_call__msgnum = 13,
    octopus_get_with_idcap_response__msgnum = 14,
    octopus_set_with_idcap_call__msgnum = 15,
    octopus_set_with_idcap_response__msgnum = 16,
    octopus_del_call__msgnum = 17,
    octopus_del_response__msgnum = 18,
    octopus_exists_call__msgnum = 19,
    octopus_exists_response__msgnum = 20,
    octopus_wait_for_call__msgnum = 21,
    octopus_wait_for_response__msgnum = 22,
    octopus_remove_trigger_call__msgnum = 23,
    octopus_remove_trigger_response__msgnum = 24,
    octopus_subscribe_call__msgnum = 25,
    octopus_subscribe_response__msgnum = 26,
    octopus_unsubscribe_call__msgnum = 27,
    octopus_unsubscribe_response__msgnum = 28,
    octopus_publish_call__msgnum = 29,
    octopus_publish_response__msgnum = 30,
    octopus_trigger__msgnum = 31,
    octopus_subscription__msgnum = 32,
    octopus_get_cap_call__msgnum = 33,
    octopus_get_cap_response__msgnum = 34,
    octopus_put_cap_call__msgnum = 35,
    octopus_put_cap_response__msgnum = 36,
    octopus_remove_cap_call__msgnum = 37,
    octopus_remove_cap_response__msgnum = 38
} octopus_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t octopus_get_identifier_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation);
typedef  errval_t octopus_get_identifier_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id);
typedef  errval_t octopus_identify_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id, octopus_binding_type_t type);
typedef  errval_t octopus_identify_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation);
typedef  errval_t octopus_get_names_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, octopus_trigger_t t);
typedef  errval_t octopus_get_names_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t octopus_get_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, octopus_trigger_t t);
typedef  errval_t octopus_get_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t octopus_set_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, uint64_t mode, octopus_trigger_t t, bool get);
typedef  errval_t octopus_set_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *record, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t octopus_get_with_idcap_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, struct capref idcap, octopus_trigger_t t);
typedef  errval_t octopus_get_with_idcap_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t octopus_set_with_idcap_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, struct capref idcap, const char *attributes, uint64_t mode, octopus_trigger_t t, bool get);
typedef  errval_t octopus_set_with_idcap_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *record, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t octopus_del_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, octopus_trigger_t t);
typedef  errval_t octopus_del_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t octopus_exists_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, octopus_trigger_t t);
typedef  errval_t octopus_exists_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  errval_t octopus_wait_for_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *query);
typedef  errval_t octopus_wait_for_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *record, octopus_errval_t error_code);
typedef  errval_t octopus_remove_trigger_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id);
typedef  errval_t octopus_remove_trigger_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t error_code);
typedef  errval_t octopus_subscribe_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, uint64_t trigger_fn, uint64_t state);
typedef  errval_t octopus_subscribe_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id, octopus_errval_t error_code);
typedef  errval_t octopus_unsubscribe_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id);
typedef  errval_t octopus_unsubscribe_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t error_code);
typedef  errval_t octopus_publish_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *record);
typedef  errval_t octopus_publish_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t error_code);
typedef  errval_t octopus_trigger__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state);
typedef  errval_t octopus_subscription__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state);
typedef  errval_t octopus_get_cap_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *key);
typedef  errval_t octopus_get_cap_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, struct capref retcap, octopus_errval_t reterr);
typedef  errval_t octopus_put_cap_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *key, struct capref storecap);
typedef  errval_t octopus_put_cap_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t reterr);
typedef  errval_t octopus_remove_cap_call__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, const char *key);
typedef  errval_t octopus_remove_cap_response__tx_method_fn(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t reterr);

/*
 * Message type signatures (receive)
 */
typedef  void octopus_get_identifier_call__rx_method_fn(struct octopus_binding *_binding);
typedef  void octopus_get_identifier_response__rx_method_fn(struct octopus_binding *_binding, uint64_t id);
typedef  void octopus_identify_call__rx_method_fn(struct octopus_binding *_binding, uint64_t id, octopus_binding_type_t type);
typedef  void octopus_identify_response__rx_method_fn(struct octopus_binding *_binding);
typedef  void octopus_get_names_call__rx_method_fn(struct octopus_binding *_binding, char *query, octopus_trigger_t t);
typedef  void octopus_get_names_response__rx_method_fn(struct octopus_binding *_binding, char *output, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  void octopus_get_call__rx_method_fn(struct octopus_binding *_binding, char *query, octopus_trigger_t t);
typedef  void octopus_get_response__rx_method_fn(struct octopus_binding *_binding, char *output, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  void octopus_set_call__rx_method_fn(struct octopus_binding *_binding, char *query, uint64_t mode, octopus_trigger_t t, bool get);
typedef  void octopus_set_response__rx_method_fn(struct octopus_binding *_binding, char *record, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  void octopus_get_with_idcap_call__rx_method_fn(struct octopus_binding *_binding, struct capref idcap, octopus_trigger_t t);
typedef  void octopus_get_with_idcap_response__rx_method_fn(struct octopus_binding *_binding, char *output, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  void octopus_set_with_idcap_call__rx_method_fn(struct octopus_binding *_binding, struct capref idcap, char *attributes, uint64_t mode, octopus_trigger_t t, bool get);
typedef  void octopus_set_with_idcap_response__rx_method_fn(struct octopus_binding *_binding, char *record, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  void octopus_del_call__rx_method_fn(struct octopus_binding *_binding, char *query, octopus_trigger_t t);
typedef  void octopus_del_response__rx_method_fn(struct octopus_binding *_binding, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  void octopus_exists_call__rx_method_fn(struct octopus_binding *_binding, char *query, octopus_trigger_t t);
typedef  void octopus_exists_response__rx_method_fn(struct octopus_binding *_binding, octopus_trigger_id_t tid, octopus_errval_t error_code);
typedef  void octopus_wait_for_call__rx_method_fn(struct octopus_binding *_binding, char *query);
typedef  void octopus_wait_for_response__rx_method_fn(struct octopus_binding *_binding, char *record, octopus_errval_t error_code);
typedef  void octopus_remove_trigger_call__rx_method_fn(struct octopus_binding *_binding, uint64_t id);
typedef  void octopus_remove_trigger_response__rx_method_fn(struct octopus_binding *_binding, octopus_errval_t error_code);
typedef  void octopus_subscribe_call__rx_method_fn(struct octopus_binding *_binding, char *query, uint64_t trigger_fn, uint64_t state);
typedef  void octopus_subscribe_response__rx_method_fn(struct octopus_binding *_binding, uint64_t id, octopus_errval_t error_code);
typedef  void octopus_unsubscribe_call__rx_method_fn(struct octopus_binding *_binding, uint64_t id);
typedef  void octopus_unsubscribe_response__rx_method_fn(struct octopus_binding *_binding, octopus_errval_t error_code);
typedef  void octopus_publish_call__rx_method_fn(struct octopus_binding *_binding, char *record);
typedef  void octopus_publish_response__rx_method_fn(struct octopus_binding *_binding, octopus_errval_t error_code);
typedef  void octopus_trigger__rx_method_fn(struct octopus_binding *_binding, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, char *record, uint64_t state);
typedef  void octopus_subscription__rx_method_fn(struct octopus_binding *_binding, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, char *record, uint64_t state);
typedef  void octopus_get_cap_call__rx_method_fn(struct octopus_binding *_binding, char *key);
typedef  void octopus_get_cap_response__rx_method_fn(struct octopus_binding *_binding, struct capref retcap, octopus_errval_t reterr);
typedef  void octopus_put_cap_call__rx_method_fn(struct octopus_binding *_binding, char *key, struct capref storecap);
typedef  void octopus_put_cap_response__rx_method_fn(struct octopus_binding *_binding, octopus_errval_t reterr);
typedef  void octopus_remove_cap_call__rx_method_fn(struct octopus_binding *_binding, char *key);
typedef  void octopus_remove_cap_response__rx_method_fn(struct octopus_binding *_binding, octopus_errval_t reterr);

/*
 * Struct type for holding the args for each msg
 */
struct octopus_get_identifier_response__args {
    uint64_t id;
};
struct octopus_identify_call__args {
    uint64_t id;
    octopus_binding_type_t type;
};
struct octopus_get_names_call__args {
    char *query;
    octopus_trigger_t t;
};
struct octopus_get_names_response__args {
    char *output;
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
struct octopus_get_call__args {
    char *query;
    octopus_trigger_t t;
};
struct octopus_get_response__args {
    char *output;
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
struct octopus_set_call__args {
    char *query;
    uint64_t mode;
    octopus_trigger_t t;
    bool get;
};
struct octopus_set_response__args {
    char *record;
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
struct octopus_get_with_idcap_call__args {
    struct capref idcap;
    octopus_trigger_t t;
};
struct octopus_get_with_idcap_response__args {
    char *output;
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
struct octopus_set_with_idcap_call__args {
    struct capref idcap;
    char *attributes;
    uint64_t mode;
    octopus_trigger_t t;
    bool get;
};
struct octopus_set_with_idcap_response__args {
    char *record;
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
struct octopus_del_call__args {
    char *query;
    octopus_trigger_t t;
};
struct octopus_del_response__args {
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
struct octopus_exists_call__args {
    char *query;
    octopus_trigger_t t;
};
struct octopus_exists_response__args {
    octopus_trigger_id_t tid;
    octopus_errval_t error_code;
};
struct octopus_wait_for_call__args {
    char *query;
};
struct octopus_wait_for_response__args {
    char *record;
    octopus_errval_t error_code;
};
struct octopus_remove_trigger_call__args {
    uint64_t id;
};
struct octopus_remove_trigger_response__args {
    octopus_errval_t error_code;
};
struct octopus_subscribe_call__args {
    char *query;
    uint64_t trigger_fn;
    uint64_t state;
};
struct octopus_subscribe_response__args {
    uint64_t id;
    octopus_errval_t error_code;
};
struct octopus_unsubscribe_call__args {
    uint64_t id;
};
struct octopus_unsubscribe_response__args {
    octopus_errval_t error_code;
};
struct octopus_publish_call__args {
    char *record;
};
struct octopus_publish_response__args {
    octopus_errval_t error_code;
};
struct octopus_trigger__args {
    octopus_trigger_id_t id;
    uint64_t trigger_fn;
    octopus_mode_t m;
    char *record;
    uint64_t state;
};
struct octopus_subscription__args {
    octopus_trigger_id_t id;
    uint64_t trigger_fn;
    octopus_mode_t m;
    char *record;
    uint64_t state;
};
struct octopus_get_cap_call__args {
    char *key;
};
struct octopus_get_cap_response__args {
    struct capref retcap;
    octopus_errval_t reterr;
};
struct octopus_put_cap_call__args {
    char *key;
    struct capref storecap;
};
struct octopus_put_cap_response__args {
    octopus_errval_t reterr;
};
struct octopus_remove_cap_call__args {
    char *key;
};
struct octopus_remove_cap_response__args {
    octopus_errval_t reterr;
};

/*
 * Union type for all message arguments
 */
union octopus_arg_union {
    struct octopus_get_identifier_response__args get_identifier_response;
    struct octopus_identify_call__args identify_call;
    struct octopus_get_names_call__args get_names_call;
    struct octopus_get_names_response__args get_names_response;
    struct octopus_get_call__args get_call;
    struct octopus_get_response__args get_response;
    struct octopus_set_call__args set_call;
    struct octopus_set_response__args set_response;
    struct octopus_get_with_idcap_call__args get_with_idcap_call;
    struct octopus_get_with_idcap_response__args get_with_idcap_response;
    struct octopus_set_with_idcap_call__args set_with_idcap_call;
    struct octopus_set_with_idcap_response__args set_with_idcap_response;
    struct octopus_del_call__args del_call;
    struct octopus_del_response__args del_response;
    struct octopus_exists_call__args exists_call;
    struct octopus_exists_response__args exists_response;
    struct octopus_wait_for_call__args wait_for_call;
    struct octopus_wait_for_response__args wait_for_response;
    struct octopus_remove_trigger_call__args remove_trigger_call;
    struct octopus_remove_trigger_response__args remove_trigger_response;
    struct octopus_subscribe_call__args subscribe_call;
    struct octopus_subscribe_response__args subscribe_response;
    struct octopus_unsubscribe_call__args unsubscribe_call;
    struct octopus_unsubscribe_response__args unsubscribe_response;
    struct octopus_publish_call__args publish_call;
    struct octopus_publish_response__args publish_response;
    struct octopus_trigger__args trigger;
    struct octopus_subscription__args subscription;
    struct octopus_get_cap_call__args get_cap_call;
    struct octopus_get_cap_response__args get_cap_response;
    struct octopus_put_cap_call__args put_cap_call;
    struct octopus_put_cap_response__args put_cap_response;
    struct octopus_remove_cap_call__args remove_cap_call;
    struct octopus_remove_cap_response__args remove_cap_response;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct octopus_tx_vtbl {
    octopus_get_identifier_call__tx_method_fn *get_identifier_call;
    octopus_get_identifier_response__tx_method_fn *get_identifier_response;
    octopus_identify_call__tx_method_fn *identify_call;
    octopus_identify_response__tx_method_fn *identify_response;
    octopus_get_names_call__tx_method_fn *get_names_call;
    octopus_get_names_response__tx_method_fn *get_names_response;
    octopus_get_call__tx_method_fn *get_call;
    octopus_get_response__tx_method_fn *get_response;
    octopus_set_call__tx_method_fn *set_call;
    octopus_set_response__tx_method_fn *set_response;
    octopus_get_with_idcap_call__tx_method_fn *get_with_idcap_call;
    octopus_get_with_idcap_response__tx_method_fn *get_with_idcap_response;
    octopus_set_with_idcap_call__tx_method_fn *set_with_idcap_call;
    octopus_set_with_idcap_response__tx_method_fn *set_with_idcap_response;
    octopus_del_call__tx_method_fn *del_call;
    octopus_del_response__tx_method_fn *del_response;
    octopus_exists_call__tx_method_fn *exists_call;
    octopus_exists_response__tx_method_fn *exists_response;
    octopus_wait_for_call__tx_method_fn *wait_for_call;
    octopus_wait_for_response__tx_method_fn *wait_for_response;
    octopus_remove_trigger_call__tx_method_fn *remove_trigger_call;
    octopus_remove_trigger_response__tx_method_fn *remove_trigger_response;
    octopus_subscribe_call__tx_method_fn *subscribe_call;
    octopus_subscribe_response__tx_method_fn *subscribe_response;
    octopus_unsubscribe_call__tx_method_fn *unsubscribe_call;
    octopus_unsubscribe_response__tx_method_fn *unsubscribe_response;
    octopus_publish_call__tx_method_fn *publish_call;
    octopus_publish_response__tx_method_fn *publish_response;
    octopus_trigger__tx_method_fn *trigger;
    octopus_subscription__tx_method_fn *subscription;
    octopus_get_cap_call__tx_method_fn *get_cap_call;
    octopus_get_cap_response__tx_method_fn *get_cap_response;
    octopus_put_cap_call__tx_method_fn *put_cap_call;
    octopus_put_cap_response__tx_method_fn *put_cap_response;
    octopus_remove_cap_call__tx_method_fn *remove_cap_call;
    octopus_remove_cap_response__tx_method_fn *remove_cap_response;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct octopus_rx_vtbl {
    octopus_get_identifier_call__rx_method_fn *get_identifier_call;
    octopus_get_identifier_response__rx_method_fn *get_identifier_response;
    octopus_identify_call__rx_method_fn *identify_call;
    octopus_identify_response__rx_method_fn *identify_response;
    octopus_get_names_call__rx_method_fn *get_names_call;
    octopus_get_names_response__rx_method_fn *get_names_response;
    octopus_get_call__rx_method_fn *get_call;
    octopus_get_response__rx_method_fn *get_response;
    octopus_set_call__rx_method_fn *set_call;
    octopus_set_response__rx_method_fn *set_response;
    octopus_get_with_idcap_call__rx_method_fn *get_with_idcap_call;
    octopus_get_with_idcap_response__rx_method_fn *get_with_idcap_response;
    octopus_set_with_idcap_call__rx_method_fn *set_with_idcap_call;
    octopus_set_with_idcap_response__rx_method_fn *set_with_idcap_response;
    octopus_del_call__rx_method_fn *del_call;
    octopus_del_response__rx_method_fn *del_response;
    octopus_exists_call__rx_method_fn *exists_call;
    octopus_exists_response__rx_method_fn *exists_response;
    octopus_wait_for_call__rx_method_fn *wait_for_call;
    octopus_wait_for_response__rx_method_fn *wait_for_response;
    octopus_remove_trigger_call__rx_method_fn *remove_trigger_call;
    octopus_remove_trigger_response__rx_method_fn *remove_trigger_response;
    octopus_subscribe_call__rx_method_fn *subscribe_call;
    octopus_subscribe_response__rx_method_fn *subscribe_response;
    octopus_unsubscribe_call__rx_method_fn *unsubscribe_call;
    octopus_unsubscribe_response__rx_method_fn *unsubscribe_response;
    octopus_publish_call__rx_method_fn *publish_call;
    octopus_publish_response__rx_method_fn *publish_response;
    octopus_trigger__rx_method_fn *trigger;
    octopus_subscription__rx_method_fn *subscription;
    octopus_get_cap_call__rx_method_fn *get_cap_call;
    octopus_get_cap_response__rx_method_fn *get_cap_response;
    octopus_put_cap_call__rx_method_fn *put_cap_call;
    octopus_put_cap_response__rx_method_fn *put_cap_response;
    octopus_remove_cap_call__rx_method_fn *remove_cap_call;
    octopus_remove_cap_response__rx_method_fn *remove_cap_response;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t octopus_connect_fn(void *st, struct octopus_binding *binding);

/*
 * Export state struct
 */
struct octopus_export {
    struct idc_export common;
    octopus_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t octopus_export(void *st, idc_export_callback_fn *export_cb, octopus_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The message buffer structure (for accept/connect)
 */
struct octopus_frameinfo {
    /* Physical address of send buffer */
    lpaddr_t sendbase;
    
    /* Pointer to incoming message buffer */
    void *inbuf;
    
    /* Size of the incoming buffer in bytes */
    size_t inbufsize;
    
    /* Pointer to outgoing message buffer */
    void *outbuf;
    
    /* Size of the outgoing buffer in bytes */
    size_t outbufsize;
    
};

/*
 * Accept function over already shared frame
 */
extern  errval_t octopus_accept(struct octopus_frameinfo *_frameinfo, void *st, octopus_bind_continuation_fn *_continuation, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct octopus_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    octopus_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    octopus_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    octopus_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    octopus_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    octopus_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct octopus_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct octopus_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union octopus_arg_union tx_union;
    union octopus_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum octopus_msg_enum tx_msgnum;
    enum octopus_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    octopus_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t octopus_bind(iref_t i, octopus_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Generic connect function over already shared frame
 */
extern  errval_t octopus_connect(struct octopus_frameinfo *_frameinfo, octopus_bind_continuation_fn *_continuation, void *st, struct waitset *ws, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t octopus_get_identifier_call__tx(struct octopus_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t octopus_get_identifier_call__tx(struct octopus_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_identifier_call)(_binding, _continuation));
}

static inline errval_t octopus_get_identifier_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id) __attribute__ ((always_inline));
static inline errval_t octopus_get_identifier_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id)
{
    return(((_binding->tx_vtbl).get_identifier_response)(_binding, _continuation, id));
}

static inline errval_t octopus_identify_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id, octopus_binding_type_t type) __attribute__ ((always_inline));
static inline errval_t octopus_identify_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id, octopus_binding_type_t type)
{
    return(((_binding->tx_vtbl).identify_call)(_binding, _continuation, id, type));
}

static inline errval_t octopus_identify_response__tx(struct octopus_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t octopus_identify_response__tx(struct octopus_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).identify_response)(_binding, _continuation));
}

static inline errval_t octopus_get_names_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, octopus_trigger_t t) __attribute__ ((always_inline));
static inline errval_t octopus_get_names_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, octopus_trigger_t t)
{
    return(((_binding->tx_vtbl).get_names_call)(_binding, _continuation, query, t));
}

static inline errval_t octopus_get_names_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t octopus_get_names_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code)
{
    return(((_binding->tx_vtbl).get_names_response)(_binding, _continuation, output, tid, error_code));
}

static inline errval_t octopus_get_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, octopus_trigger_t t) __attribute__ ((always_inline));
static inline errval_t octopus_get_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, octopus_trigger_t t)
{
    return(((_binding->tx_vtbl).get_call)(_binding, _continuation, query, t));
}

static inline errval_t octopus_get_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t octopus_get_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code)
{
    return(((_binding->tx_vtbl).get_response)(_binding, _continuation, output, tid, error_code));
}

static inline errval_t octopus_set_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, uint64_t mode, octopus_trigger_t t, bool get) __attribute__ ((always_inline));
static inline errval_t octopus_set_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, uint64_t mode, octopus_trigger_t t, bool get)
{
    return(((_binding->tx_vtbl).set_call)(_binding, _continuation, query, mode, t, get));
}

static inline errval_t octopus_set_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *record, octopus_trigger_id_t tid, octopus_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t octopus_set_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *record, octopus_trigger_id_t tid, octopus_errval_t error_code)
{
    return(((_binding->tx_vtbl).set_response)(_binding, _continuation, record, tid, error_code));
}

static inline errval_t octopus_get_with_idcap_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, struct capref idcap, octopus_trigger_t t) __attribute__ ((always_inline));
static inline errval_t octopus_get_with_idcap_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, struct capref idcap, octopus_trigger_t t)
{
    return(((_binding->tx_vtbl).get_with_idcap_call)(_binding, _continuation, idcap, t));
}

static inline errval_t octopus_get_with_idcap_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t octopus_get_with_idcap_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *output, octopus_trigger_id_t tid, octopus_errval_t error_code)
{
    return(((_binding->tx_vtbl).get_with_idcap_response)(_binding, _continuation, output, tid, error_code));
}

static inline errval_t octopus_set_with_idcap_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, struct capref idcap, const char *attributes, uint64_t mode, octopus_trigger_t t, bool get) __attribute__ ((always_inline));
static inline errval_t octopus_set_with_idcap_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, struct capref idcap, const char *attributes, uint64_t mode, octopus_trigger_t t, bool get)
{
    return(((_binding->tx_vtbl).set_with_idcap_call)(_binding, _continuation, idcap, attributes, mode, t, get));
}

static inline errval_t octopus_set_with_idcap_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *record, octopus_trigger_id_t tid, octopus_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t octopus_set_with_idcap_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *record, octopus_trigger_id_t tid, octopus_errval_t error_code)
{
    return(((_binding->tx_vtbl).set_with_idcap_response)(_binding, _continuation, record, tid, error_code));
}

static inline errval_t octopus_del_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, octopus_trigger_t t) __attribute__ ((always_inline));
static inline errval_t octopus_del_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, octopus_trigger_t t)
{
    return(((_binding->tx_vtbl).del_call)(_binding, _continuation, query, t));
}

static inline errval_t octopus_del_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_trigger_id_t tid, octopus_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t octopus_del_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_trigger_id_t tid, octopus_errval_t error_code)
{
    return(((_binding->tx_vtbl).del_response)(_binding, _continuation, tid, error_code));
}

static inline errval_t octopus_exists_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, octopus_trigger_t t) __attribute__ ((always_inline));
static inline errval_t octopus_exists_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, octopus_trigger_t t)
{
    return(((_binding->tx_vtbl).exists_call)(_binding, _continuation, query, t));
}

static inline errval_t octopus_exists_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_trigger_id_t tid, octopus_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t octopus_exists_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_trigger_id_t tid, octopus_errval_t error_code)
{
    return(((_binding->tx_vtbl).exists_response)(_binding, _continuation, tid, error_code));
}

static inline errval_t octopus_wait_for_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query) __attribute__ ((always_inline));
static inline errval_t octopus_wait_for_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query)
{
    return(((_binding->tx_vtbl).wait_for_call)(_binding, _continuation, query));
}

static inline errval_t octopus_wait_for_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *record, octopus_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t octopus_wait_for_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *record, octopus_errval_t error_code)
{
    return(((_binding->tx_vtbl).wait_for_response)(_binding, _continuation, record, error_code));
}

static inline errval_t octopus_remove_trigger_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id) __attribute__ ((always_inline));
static inline errval_t octopus_remove_trigger_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id)
{
    return(((_binding->tx_vtbl).remove_trigger_call)(_binding, _continuation, id));
}

static inline errval_t octopus_remove_trigger_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t octopus_remove_trigger_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t error_code)
{
    return(((_binding->tx_vtbl).remove_trigger_response)(_binding, _continuation, error_code));
}

static inline errval_t octopus_subscribe_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, uint64_t trigger_fn, uint64_t state) __attribute__ ((always_inline));
static inline errval_t octopus_subscribe_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *query, uint64_t trigger_fn, uint64_t state)
{
    return(((_binding->tx_vtbl).subscribe_call)(_binding, _continuation, query, trigger_fn, state));
}

static inline errval_t octopus_subscribe_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id, octopus_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t octopus_subscribe_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id, octopus_errval_t error_code)
{
    return(((_binding->tx_vtbl).subscribe_response)(_binding, _continuation, id, error_code));
}

static inline errval_t octopus_unsubscribe_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id) __attribute__ ((always_inline));
static inline errval_t octopus_unsubscribe_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, uint64_t id)
{
    return(((_binding->tx_vtbl).unsubscribe_call)(_binding, _continuation, id));
}

static inline errval_t octopus_unsubscribe_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t octopus_unsubscribe_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t error_code)
{
    return(((_binding->tx_vtbl).unsubscribe_response)(_binding, _continuation, error_code));
}

static inline errval_t octopus_publish_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *record) __attribute__ ((always_inline));
static inline errval_t octopus_publish_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *record)
{
    return(((_binding->tx_vtbl).publish_call)(_binding, _continuation, record));
}

static inline errval_t octopus_publish_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t error_code) __attribute__ ((always_inline));
static inline errval_t octopus_publish_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t error_code)
{
    return(((_binding->tx_vtbl).publish_response)(_binding, _continuation, error_code));
}

static inline errval_t octopus_trigger__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state) __attribute__ ((always_inline));
static inline errval_t octopus_trigger__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state)
{
    return(((_binding->tx_vtbl).trigger)(_binding, _continuation, id, trigger_fn, m, record, state));
}

static inline errval_t octopus_subscription__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state) __attribute__ ((always_inline));
static inline errval_t octopus_subscription__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_trigger_id_t id, uint64_t trigger_fn, octopus_mode_t m, const char *record, uint64_t state)
{
    return(((_binding->tx_vtbl).subscription)(_binding, _continuation, id, trigger_fn, m, record, state));
}

static inline errval_t octopus_get_cap_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *key) __attribute__ ((always_inline));
static inline errval_t octopus_get_cap_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *key)
{
    return(((_binding->tx_vtbl).get_cap_call)(_binding, _continuation, key));
}

static inline errval_t octopus_get_cap_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, struct capref retcap, octopus_errval_t reterr) __attribute__ ((always_inline));
static inline errval_t octopus_get_cap_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, struct capref retcap, octopus_errval_t reterr)
{
    return(((_binding->tx_vtbl).get_cap_response)(_binding, _continuation, retcap, reterr));
}

static inline errval_t octopus_put_cap_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *key, struct capref storecap) __attribute__ ((always_inline));
static inline errval_t octopus_put_cap_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *key, struct capref storecap)
{
    return(((_binding->tx_vtbl).put_cap_call)(_binding, _continuation, key, storecap));
}

static inline errval_t octopus_put_cap_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t reterr) __attribute__ ((always_inline));
static inline errval_t octopus_put_cap_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t reterr)
{
    return(((_binding->tx_vtbl).put_cap_response)(_binding, _continuation, reterr));
}

static inline errval_t octopus_remove_cap_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *key) __attribute__ ((always_inline));
static inline errval_t octopus_remove_cap_call__tx(struct octopus_binding *_binding, struct event_closure _continuation, const char *key)
{
    return(((_binding->tx_vtbl).remove_cap_call)(_binding, _continuation, key));
}

static inline errval_t octopus_remove_cap_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t reterr) __attribute__ ((always_inline));
static inline errval_t octopus_remove_cap_response__tx(struct octopus_binding *_binding, struct event_closure _continuation, octopus_errval_t reterr)
{
    return(((_binding->tx_vtbl).remove_cap_response)(_binding, _continuation, reterr));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/octopus_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/octopus_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/octopus_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/octopus_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
/*
 * And we're done
 */
#endif // __octopus_IF_H
